!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),a=r(o),i=n(3),s=r(i),c=n(22),u=r(c),l=n(23),f=r(l),p=n(24),d=n(25),h=r(d),v=n(26),y=(n(27),function(e){(0,a.default)(e,m),(0,p.SetupGraphs)(),(0,h.default)()}),m=function(e){var t=(0,v.CreateMap)({});(0,f.default)(t,e.baselayers),(0,u.default)(t,e.layers,e.layout),(0,s.default)(t),(0,p.BindGraphEvents)(t)};window.Base=y,t.default={Base:y}},function(e,t){"use strict";function n(e,t){r(e,t)}function r(e,t){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4==n.readyState){try{var e=JSON.parse(n.responseText)}catch(e){console.log("ERROR: Malformed JSON in config file."),console.log(e)}o(e),t(e)}},n.open("GET",e,!0),n.send(),console.log("hi")}function o(e){var t,n,r=e.layers,o=e.mapserverUrl;for(var i in r){if(!r.hasOwnProperty(i))return;for(t=r[i],n=0;n<t.length;n++)a(t[n],o)}}function a(e,t){e.url=e.url||t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t,n){"use strict";function r(e){var t=new o.EsriProvider,n=new o.GeoSearchControl({provider:t,showMarker:!1});e.addControl(n),L.DomEvent.on(n.searchElement.elements.container,"click",function(e){L.DomEvent.stopPropagation(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var o=n(4)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(5);Object.defineProperty(t,"GeoSearchControl",{enumerable:!0,get:function(){return r(o).default}});var a=n(13);Object.defineProperty(t,"SearchElement",{enumerable:!0,get:function(){return r(a).default}});var i=n(17);Object.defineProperty(t,"BingProvider",{enumerable:!0,get:function(){return r(i).default}});var s=n(19);Object.defineProperty(t,"EsriProvider",{enumerable:!0,get:function(){return r(s).default}});var c=n(20);Object.defineProperty(t,"GoogleProvider",{enumerable:!0,get:function(){return r(c).default}});var u=n(21);Object.defineProperty(t,"OpenStreetMapProvider",{enumerable:!0,get:function(){return r(u).default}});var l=n(18);Object.defineProperty(t,"Provider",{enumerable:!0,get:function(){return r(l).default}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(){if(!L||!L.Control||!L.Control.extend)throw new Error("Leaflet must be loaded before instantiating the GeoSearch control");for(var e=L.Control.extend(y),t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return new(Function.prototype.bind.apply(e,[null].concat(n)))}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),i=(r(a),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e});t.default=o;var s=n(12),c=r(s),u=n(13),l=r(u),f=n(16),p=r(f),d=n(14),h=n(15),v=function(){return{position:"topleft",style:"button",showMarker:!0,showPopup:!1,marker:{icon:new L.Icon.Default,draggable:!1},maxMarkers:1,retainZoomLevel:!1,animateZoom:!0,searchLabel:"Enter address",notFoundMessage:"Sorry, that address could not be found.",messageHideDelay:3e3,zoomLevel:18,classNames:{container:"leaflet-bar leaflet-control leaflet-control-geosearch",button:"leaflet-bar-part leaflet-bar-part-single",msgbox:"leaflet-bar message",form:"",input:""},autoComplete:!0,autoCompleteDelay:250}},y={initialize:function(e){var t=this;this.markers=new L.FeatureGroup,this.options=i({},v(),e);var n=this.options,r=n.style,o=n.classNames,a=n.searchLabel,s=n.autoComplete,u=n.autoCompleteDelay;"button"!==r&&(this.options.classNames.container+=" "+e.style),this.searchElement=new l.default(i({},this.options,{handleSubmit:function(e){return t.onSubmit(e)}}));var f=this.searchElement.elements,h=f.container,y=f.form,m=f.input;h.addEventListener("dblclick",function(e){e.stopPropagation()});var b=(0,d.createElement)("a",o.button,h);b.title=a,b.href="#",b.addEventListener("click",function(e){t.onClick(e)},!1),s&&(this.resultList=new p.default({handleClick:function(e){var n=e.result;m.value=n.label,t.onSubmit({query:n.label})}}),y.appendChild(this.resultList.elements.container),m.addEventListener("keyup",(0,c.default)(function(e){return t.autoSearch(e)},u),!0),m.addEventListener("keydown",function(e){return t.selectResult(e)},!0),m.addEventListener("keydown",function(e){return t.clearResults(e)},!0)),this.elements={button:b}},onAdd:function(e){var t=this.options,n=t.showMarker,r=t.style;if(this.map=e,n&&this.markers.addTo(e),"bar"===r){var o=this.searchElement.elements.form,a=e.getContainer().querySelector(".leaflet-control-container"),i=(0,d.createElement)("div","leaflet-control-geosearch bar");i.appendChild(o),a.appendChild(i),this.elements.container=i}return this.searchElement.elements.container},onRemove:function(){var e=this.elements.container;return e&&e.remove(),this},onClick:function(e){e.preventDefault();var t=this.searchElement.elements,n=t.container,r=t.input;n.classList.contains("active")?(0,d.removeClassName)(n,"active"):((0,d.addClassName)(n,"active"),r.focus())},selectResult:function(e){if([h.ARROW_DOWN_KEY,h.ARROW_UP_KEY].includes(e.keyCode)){e.preventDefault();var t=this.searchElement.elements.input,n=this.resultList,r=this.resultList.count()-1,o="ArrowDown"===e.code?1+~~n.selected:~~n.selected-1,a=o<0?r:o>r?0:o,i=n.select(a);t.value=i.label}},clearResults:function(e){e.keyCode===h.ESCAPE_KEY&&this.resultList.clear()},autoSearch:function(e){return new Promise(function(t,n){var r,o,a;return h.SPECIAL_KEYS.includes(e.keyCode)?t():(r=e.target.value,o=this.options.provider,o.search({query:r}).then(function(e){return a=e,this.resultList.render(a),t()}.$asyncbind(this,n),n))}.$asyncbind(this))},onSubmit:function(e){return new Promise(function(t,n){var r,o;return r=this.options.provider,r.search(e).then(function(e){return o=e,o&&o.length>0&&this.showResult(o[0]),t()}.$asyncbind(this,n),n)}.$asyncbind(this))},showResult:function(e){var t=Object.keys(this.markers._layers);t.length>=this.options.maxMarkers&&this.markers.removeLayer(t[0]);var n=this.addMarker(e);this.centerMap(e),this.map.fireEvent("geosearch/showlocation",{location:e,marker:n})},addMarker:function(e){var t=this.options,n=t.marker,r=t.showPopup,o=new L.Marker([e.y,e.x],n);return o.bindPopup(e.label),this.markers.addLayer(o),r&&o.openPopup(),o},centerMap:function(e){var t=this.options,n=t.retainZoomLevel,r=t.animateZoom,o=new L.LatLngBounds(e.bounds),a=o.isValid()?o:this.markers.getBounds();!n&&o.isValid()?this.map.fitBounds(a,{animate:r}):this.map.setView(a.getCenter(),this.getZoom(),{animate:r})},getZoom:function(){var e=this.options,t=e.retainZoomLevel,n=e.zoomLevel;return t?this.map.getZoom():n}}},function(e,t,n){"use strict";function r(e,t){if(Function.prototype.$asyncspawn||Object.defineProperty(Function.prototype,"$asyncspawn",{value:r,enumerable:!1,configurable:!0,writable:!0}),this instanceof Function){var n=this;return new e(function(e,r){function o(t,n){var i;try{if(i=t.call(a,n),i.done){if(i.value!==e){if(i.value&&i.value===i.value.then)return i.value(e,r);e&&e(i.value),e=null}return}i.value.then?i.value.then(function(e){o(a.next,e)},function(e){o(a.throw,e)}):o(a.next,i.value)}catch(e){return r&&r(e),void(r=null)}}var a=n.call(t,e,r);o(a.next)})}}var o=function(e,t){for(var n=t.toString(),r="return "+n,o=n.match(/.*\(([^)]*)\)/)[1],a=/['"]!!!([^'"]*)['"]/g,i=[];;){var s=a.exec(r);if(!s)break;i.push(s)}return i.reverse().forEach(function(t){r=r.slice(0,t.index)+e[t[1]]+r.substr(t.index+t[0].length)}),r=r.replace(/\/\*[^*]*\*\//g," ").replace(/\s+/g," "),new Function(o,r)()}({zousan:n(7).toString(),thenable:n(11).toString()},function e(t,n){function r(){return o.apply(t,arguments)}Function.prototype.$asyncbind||Object.defineProperty(Function.prototype,"$asyncbind",{value:e,enumerable:!1,configurable:!0,writable:!0}),e.trampoline||(e.trampoline=function(e,t,n,r,o){return function a(i){for(;i;){if(i.then)return i=i.then(a,r),o?void 0:i;try{if(i.pop){if(i.length)return i.pop()?t.call(e):i;i=n}else i=i.call(e)}catch(e){return r(e)}}}}),e.LazyThenable||(e.LazyThenable="!!!thenable"(),e.EagerThenable=e.Thenable=(e.EagerThenableFactory="!!!zousan")());var o=this;switch(n){case!0:return new e.Thenable(r);case 0:return new e.LazyThenable(r);case void 0:return r.then=r,r;default:return function(){try{return o.apply(t,arguments)}catch(e){return n(e)}}}});o(),r(),e.exports={$asyncbind:o,$asyncspawn:r}},function(e,t,n){(function(t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){function o(e){if(e){var t=this;e(function(e){t.resolve(e)},function(e){t.reject(e)})}}function a(e,t){if("function"==typeof e.y)try{var n=e.y.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.resolve(t)}function i(e,t){if("function"==typeof e.n)try{var n=e.n.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.reject(t)}e=e||"object"===(void 0===t?"undefined":r(t))&&t.nextTick||"function"==typeof n&&n||function(e){setTimeout(e,0)};var s=function(){function t(){for(;n.length-r;){try{n[r]()}catch(e){}n[r++]=void 0,r===o&&(n.splice(0,o),r=0)}}var n=[],r=0,o=1024;return function(o){n.push(o),n.length-r==1&&e(t)}}();return o.prototype={resolve:function(e){if(void 0===this.state){if(e===this)return this.reject(new TypeError("Attempt to resolve promise with self"));var t=this;if(e&&("function"==typeof e||"object"===(void 0===e?"undefined":r(e))))try{var n=0,o=e.then;if("function"==typeof o)return void o.call(e,function(e){n++||t.resolve(e)},function(e){n++||t.reject(e)})}catch(e){return void(n||this.reject(e))}this.state=a,this.v=e,t.c&&s(function(){for(var n=0,r=t.c.length;n<r;n++)a(t.c[n],e)})}},reject:function(e){if(void 0===this.state){this.state=i,this.v=e;var t=this.c;t&&s(function(){for(var n=0,r=t.length;n<r;n++)i(t[n],e)})}},then:function(e,t){var n=new o,r={y:e,n:t,p:n};if(void 0===this.state)this.c?this.c.push(r):this.c=[r];else{var a=this.state,i=this.v;s(function(){a(r,i)})}return n}},o.resolve=function(e){if(e&&e instanceof o)return e;var t=new o;return t.resolve(e),t},o.reject=function(e){if(e&&e instanceof o)return e;var t=new o;return t.reject(e),t},o.version="2.3.3-nodent",o}}).call(t,n(8),n(9).setImmediate)},function(e,t){"use strict";function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(l===setTimeout)return setTimeout(e,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function a(e){if(f===clearTimeout)return clearTimeout(e);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}function i(){v&&d&&(v=!1,d.length?h=d.concat(h):y=-1,h.length&&s())}function s(){if(!v){var e=o(i);v=!0;for(var t=h.length;t;){for(d=h,h=[];++y<t;)d&&d[y].run();y=-1,t=h.length}d=null,v=!1,a(e)}}function c(e,t){this.fun=e,this.array=t}function u(){}var l,f,p=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(e){l=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(e){f=r}}();var d,h=[],v=!1,y=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];h.push(new c(e,t)),1!==h.length||v||o(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=u,p.addListener=u,p.once=u,p.off=u,p.removeListener=u,p.removeAllListeners=u,p.emit=u,p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t,n){"use strict";function r(e,t){this._id=e,this._clearFn=t}var o=Function.prototype.apply;t.setTimeout=function(){return new r(o.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new r(o.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(10),t.setImmediate=setImmediate,t.clearImmediate=clearImmediate},function(e,t,n){(function(e,t){"use strict";!function(e,n){function r(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return u[c]=r,s(c),c++}function o(e){delete u[e]}function a(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}function i(e){if(l)setTimeout(i,0,e);else{var t=u[e];if(t){l=!0;try{a(t)}finally{o(e),l=!1}}}}if(!e.setImmediate){var s,c=1,u={},l=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?function(){s=function(e){t.nextTick(function(){i(e)})}}():function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&i(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),s=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){i(e.data)},s=function(t){e.port2.postMessage(t)}}():f&&"onreadystatechange"in f.createElement("script")?function(){var e=f.documentElement;s=function(t){var n=f.createElement("script");n.onreadystatechange=function(){i(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():function(){s=function(e){setTimeout(i,0,e)}}(),p.setImmediate=r,p.clearImmediate=o}}("undefined"==typeof self?void 0===e?void 0:e:self)}).call(t,function(){return this}(),n(8))},function(e,t){"use strict";e.exports=function(){function e(e){return e&&e instanceof Object&&"function"==typeof e.then}function t(n,r,o){try{var a=o?o(r):r;if(n===a)return n.reject(new TypeError("Promise resolution loop"));e(a)?a.then(function(e){t(n,e)},function(e){n.reject(e)}):n.resolve(a)}catch(e){n.reject(e)}}function n(){}function r(e){}function o(e,t){this.resolve=e,this.reject=t}function a(r,o){var a=new n;try{this._resolver(function(n){return e(n)?n.then(r,o):t(a,n,r)},function(e){t(a,e,o)})}catch(e){t(a,e,o)}return a}function i(e){this._resolver=e,this.then=a}return n.prototype={resolve:r,reject:r,then:o},i.resolve=function(e){return i.isThenable(e)?e:{then:function(t){return t(e)}}},i.isThenable=e,i}},function(e,t){(function(t){"use strict";function n(e,t,n){function o(t){var n=v,r=y;return v=y=void 0,O=t,b=e.apply(r,n)}function a(e){return O=e,g=setTimeout(l,t),E?o(e):b}function s(e){var n=e-w,r=e-O,o=t-n;return j?_(o,m-r):o}function u(e){var n=e-w,r=e-O;return void 0===w||n>=t||n<0||j&&r>=m}function l(){var e=x();if(u(e))return f(e);g=setTimeout(l,s(e))}function f(e){return g=void 0,S&&v?o(e):(v=y=void 0,b)}function p(){void 0!==g&&clearTimeout(g),O=0,v=w=y=g=void 0}function d(){return void 0===g?b:f(x())}function h(){var e=x(),n=u(e);if(v=arguments,y=this,w=e,n){if(void 0===g)return a(w);if(j)return g=setTimeout(l,t),o(w)}return void 0===g&&(g=setTimeout(l,t)),b}var v,y,m,b,g,w,O=0,E=!1,j=!1,S=!0;if("function"!=typeof e)throw new TypeError(c);return t=i(t)||0,r(n)&&(E=!!n.leading,j="maxWait"in n,m=j?k(i(n.maxWait)||0,t):m,S="trailing"in n?!!n.trailing:S),h.cancel=p,h.flush=d,h}function r(e){var t=void 0===e?"undefined":s(e);return!!e&&("object"==t||"function"==t)}function o(e){return!!e&&"object"==(void 0===e?"undefined":s(e))}function a(e){return"symbol"==(void 0===e?"undefined":s(e))||o(e)&&w.call(e)==l}function i(e){if("number"==typeof e)return e;if(a(e))return u;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(f,"");var n=d.test(e);return n||h.test(e)?v(e.slice(2),n?2:8):p.test(e)?u:+e}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c="Expected a function",u=NaN,l="[object Symbol]",f=/^\s+|\s+$/g,p=/^[-+]0x[0-9a-f]+$/i,d=/^0b[01]+$/i,h=/^0o[0-7]+$/i,v=parseInt,y="object"==(void 0===t?"undefined":s(t))&&t&&t.Object===Object&&t,m="object"==("undefined"==typeof self?"undefined":s(self))&&self&&self.Object===Object&&self,b=y||m||Function("return this")(),g=Object.prototype,w=g.toString,k=Math.max,_=Math.min,x=function(){return b.Date.now()};e.exports=n}).call(t,function(){return this}())},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),a=(function(e){e&&e.__esModule?e:{default:e}}(o),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=n(14),s=n(15),c=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=n.handleSubmit,a=void 0===o?function(){}:o,s=n.searchLabel,c=void 0===s?"search":s,u=n.classNames,l=void 0===u?{}:u;r(this,e);var f=(0,i.createElement)("div",["geosearch",l.container].join(" ")),p=(0,i.createElement)("form",["",l.form].join(" "),f),d=(0,i.createElement)("input",["glass",l.input].join(" "),p);d.type="text",d.placeholder=c,d.addEventListener("input",function(e){t.onInput(e)},!1),d.addEventListener("keyup",function(e){t.onKeyUp(e)},!1),d.addEventListener("keypress",function(e){t.onKeyPress(e)},!1),d.addEventListener("focus",function(e){t.onFocus(e)},!1),d.addEventListener("blur",function(e){t.onBlur(e)},!1),this.elements={container:f,form:p,input:d},this.handleSubmit=a}return a(e,[{key:"onFocus",value:function(){(0,i.addClassName)(this.elements.form,"active")}},{key:"onBlur",value:function(){(0,i.removeClassName)(this.elements.form,"active")}},{key:"onSubmit",value:function(e){return new Promise(function(t,n){var r,o,a;return e.preventDefault(),e.stopPropagation(),r=this.elements,o=r.input,a=r.container,(0,i.removeClassName)(a,"error"),(0,i.addClassName)(a,"pending"),this.handleSubmit({query:o.value}).then(function(e){return(0,i.removeClassName)(a,"pending"),t()}.$asyncbind(this,n),n)}.$asyncbind(this))}},{key:"onInput",value:function(){var e=this.elements.container;this.hasError&&((0,i.removeClassName)(e,"error"),this.hasError=!1)}},{key:"onKeyUp",value:function(e){var t=this.elements,n=t.container,r=t.input;e.keyCode===s.ESCAPE_KEY&&((0,i.removeClassName)(n,"pending"),(0,i.removeClassName)(n,"active"),r.value="",document.body.focus(),document.body.blur())}},{key:"onKeyPress",value:function(e){e.keyCode===s.ENTER_KEY&&this.onSubmit(e)}},{key:"setQuery",value:function(e){this.elements.input.value=e}}]),e}();t.default=c},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.createElement=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=document.createElement(e);return r.className=t,n&&n.appendChild(r),r};t.createScriptElement=function(e,t){var r=n("script",null,document.body);return r.setAttribute("type","text/javascript"),new Promise(function(n){window[t]=function(e){r.remove(),delete window[t],n(e)},r.setAttribute("src",e)})},t.addClassName=function(e,t){e&&!e.classList.contains(t)&&e.classList.add(t)},t.removeClassName=function(e,t){e&&e.classList.contains(t)&&e.classList.remove(t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.ENTER_KEY=13,r=t.ESCAPE_KEY=27,o=t.ARROW_DOWN_KEY=40,a=t.ARROW_UP_KEY=38,i=t.ARROW_LEFT_KEY=37,s=t.ARROW_RIGHT_KEY=39;t.SPECIAL_KEYS=[n,r,o,a,i,s]},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(14),i=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.join(" ").trim()},s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.handleClick,o=void 0===n?function(){}:n,s=t.classNames,u=void 0===s?{}:s;r(this,e),c.call(this),this.props={handleClick:o,classNames:u},this.selected=-1;var l=(0,a.createElement)("div",i("results",u.container)),f=(0,a.createElement)("div",i(u.item));l.addEventListener("click",this.onClick,!0),this.elements={container:l,resultItem:f}}return o(e,[{key:"render",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=this.elements,n=t.container,r=t.resultItem;this.clear(),e.forEach(function(e,t){var o=r.cloneNode(!0);o.setAttribute("data-key",t),o.innerHTML=e.label,n.appendChild(o)}),e.length>0&&(0,a.addClassName)(n,"active"),this.results=e}},{key:"select",value:function(e){var t=this.elements.container;return Array.from(t.children).forEach(function(t,n){return n===e?(0,a.addClassName)(t,"active"):(0,a.removeClassName)(t,"active")}),this.selected=e,this.results[e]}},{key:"count",value:function(){return this.results.length}},{key:"clear",value:function(){var e=this.elements.container;for(this.selected=-1;e.lastChild;)e.removeChild(e.lastChild);(0,a.removeClassName)(e,"active")}}]),e}(),c=function(){var e=this;this.onClick=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.target,r=e.props.handleClick,o=e.elements.container;if(n.parentNode===o&&n.hasAttribute("data-key")){var a=n.getAttribute("data-key");r({result:e.results[a]})}}};t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=n(6),u=(r(c),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(18),p=r(f),d=n(14),h=function(e){function t(){return o(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=e.jsonp,o=this.options.params;return n+"//dev.virtualearth.net/REST/v1/Locations?"+this.getParamString(u({},o,{query:t,jsonp:r}))}},{key:"parse",value:function(e){var t=e.data;return 0===t.resourceSets.length?[]:t.resourceSets[0].resources.map(function(e){return{x:e.point.coordinates[1],y:e.point.coordinates[0],label:e.address.formattedAddress,bounds:[[e.bbox[0],e.bbox[1]],[e.bbox[2],e.bbox[3]]],raw:e}})}},{key:"search",value:function(e){return new Promise(function(t,n){var r,o,a,i,s;return r=e.query,o=~location.protocol.indexOf("http")?location.protocol:"https:",a="BING_JSONP_CB_"+Date.now(),i=this.endpoint({query:r,protocol:o,jsonp:a}),(0,d.createScriptElement)(i,a).then(function(e){return s=e,t(this.parse({data:s}))}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),t}(p.default);t.default=h},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),a=(function(e){e&&e.__esModule?e:{default:e}}(o),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.options=t}return a(e,[{key:"getParamString",value:function(e){return Object.keys(e).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}},{key:"search",value:function(e){return new Promise(function(t,n){var r,o,a,i,s;return r=e.query,o=~location.protocol.indexOf("http")?location.protocol:"https:",a=this.endpoint({query:r,protocol:o}),fetch(a).then(function(e){return i=e,i.json().then(function(e){return s=e,t(this.parse({data:s}))}.$asyncbind(this,n),n)}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),e}();t.default=i},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),f=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find?"+this.getParamString(s({},r,{f:"json",text:t}))}},{key:"parse",value:function(e){return e.data.locations.map(function(e){return{x:e.feature.geometry.x,y:e.feature.geometry.y,label:e.name,bounds:[[e.extent.ymin,e.extent.xmin],[e.extent.ymax,e.extent.xmax]],raw:e}})}}]),t}(l.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),f=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params,o=this.getParamString(s({},r,{address:t}));return(r&&r.key?"https:":n)+"//maps.googleapis.com/maps/api/geocode/json?"+o}},{key:"parse",value:function(e){return e.data.results.map(function(e){return{x:e.geometry.location.lng,y:e.geometry.location.lat,label:e.formatted_address,bounds:[[e.geometry.viewport.southwest.lat,e.geometry.viewport.southwest.lng],[e.geometry.viewport.northeast.lat,e.geometry.viewport.northeast.lng]],raw:e}})}}]),t}(l.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),f=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//nominatim.openstreetmap.org/search?"+this.getParamString(s({},r,{format:"json",q:t}))}},{key:"parse",value:function(e){return e.data.map(function(e){return{x:e.lon,y:e.lat,label:e.display_name,bounds:[[parseFloat(e.boundingbox[0]),parseFloat(e.boundingbox[2])],[parseFloat(e.boundingbox[1]),parseFloat(e.boundingbox[3])]],raw:e}})}}]),t}(l.default);t.default=f},function(e,t){"use strict";function n(e,t,n){var o=d3.select(".layer-list").selectAll(".layer-group-wrapper").data(n["layer-groups-order"]).enter().append("div").attr("class","layer-group-wrapper").attr("id",function(e){return e.id}).classed("active",function(e){return e.active}).each(function(e){d3.select(this).append("div").attr("class","layer-group-btn btn").on("click",function(e){e.active=!e.active,d3.select(this.parentNode).classed("active",function(){return e.active})}).text(e.name)}).append("div").attr("class","layer-group");o.selectAll(".layer-select").data(function(e){return t[e.id]}).enter().append("div").attr("class","layer-select").each(function(t){var o=this.parentNode.parentNode.id,s=d3.select(this);t.active=a(t,o,n["active-layers"]),t.active&&r(e,t,s),s.append("input").attr("type","checkbox").attr("id",function(e){return e.id}).attr("checked",function(e){return e.active?"checked":null}).on("click",function(t){t.active=!t.active,r(e,t,s)}),s.append("label").attr("for",function(e){return e.id}).attr("class","layer-label").html(function(e){return e.name}),t.info&&""!==t.info&&(s.append("div").attr("class","layer-info-btn").text("(?)").on("click",function(){d3.select(this.parentNode).select(".layer-info-wrapper").classed("active",function(){return!d3.select(this).classed("active")})}),s.append("div").attr("class","layer-info-wrapper").text(function(e){return"("+e.info+")"}));var c=(s.append("div").attr("class","legend-wrapper").classed("active",t.active).append("img").attr("src","mean_ndvi_legend.jpg"),d3.scaleLinear().domain([0,300]).range([0,1]).clamp(!0)),u=s.append("div").attr("class","opacity-slider-wrapper").classed("active",t.active),l=u.append("svg").append("g").attr("class","opacity-slider").attr("transform","translate(20, 20)");l.append("circle").attr("r",6).attr("cx",300).attr("class","opacity-slider-circle"),l.append("line").attr("class","opacity-slider-track-overlay").attr("x1",0).attr("x2",315).attr("stroke","#000000").attr("stroke-width","20px").attr("stroke-opacity","0.0").call(d3.drag().on("start drag",function(){i(t,this.parentNode,c,d3.event.x)})),l.append("line").attr("class","opacity-slider-track").attr("x1",0).attr("x2",300).attr("stroke-width","20px").attr("stroke","#666").attr("stroke-width","2px"),l.append("text").attr("class","opacity-indicator").attr("x",315).attr("y",5).text(100*c(300)+"%")})}function r(e,t,n){t.mapLayer=t.mapLayer||o(t),n.selectAll(".legend-wrapper, .opacity-slider-wrapper").classed("active",t.active),t.active?e.addLayer(t.mapLayer):e.removeLayer(t.mapLayer)}function o(e){return L.tileLayer.wms(e.url,{layers:e.id,transparent:e.transparent||!0,version:e.version||"1.3.0",crs:e.crs||L.CRS.EPSG4326,format:e.format||"image/png"})}function a(e,t,n){var r=!1;return n.forEach(function(n){n=n.split(" "),r=r||n[0]===t&&n[1]===e.id}),r}function i(e,t,n,r){var r=n.invert(n(r));t=d3.select(t),t.select("circle").attr("cx",r),t.select("text").text(parseInt(100*n(r))+"%"),e.mapLayer.setOpacity(n(d3.event.x))}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t){"use strict";function n(e,t){t=t||[{url:"http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attributions">CARTO</a>'}];var n,o;for(n=0;n<t.length;n++)o=r(t[n]),o.addTo(e)}function r(e){return L.tileLayer(e.url,{attribution:e.attribution})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t){"use strict";function n(){d3.selectAll(".graph-type-btn").on("click",l),r(),C=d3.tip().attr("class","d3-tip").html(function(e){return e})}function r(){Date.prototype.isLeapYear=function(){var e=this.getFullYear();return 0==(3&e)&&(e%100!=0||e%400==0)},Date.prototype.getDOY=function(){var e=[0,31,59,90,120,151,181,212,243,273,304,334],t=this.getMonth(),n=this.getDate(),r=e[t]+n;return t>1&&this.isLeapYear()&&r++,r}}function o(e){e.on("click",a)}function a(e){var t=this,n=e.latlng.lat,r=e.latlng.lng;f(n,r),i(t,n,r)}function i(e,t,n){L.marker([t,n]).addTo(e)}function s(e,t,n){var r="https://fcav-ndvi.nemac.org/landdat_product.cgi?args="+t+","+e,o=new XMLHttpRequest;o.addEventListener("load",function(){var r=this.responseText;r=r.replace(/\[|\]|\'/g,"").split(", "),p(r,n,e,t)}),o.open("GET",r),o.send()}function c(e){var t;for(t=0;t<e.length;t++)e[t]=e[t].split(",");return e}function u(e){var t,n,r,o,a={};for(a.keys=[],r=0;r<e.length;r++)t=e[r],n=t[0].substring(0,4),a.hasOwnProperty(n)||(a[n]=[],a.keys.push(n)),a[n].push(t);var i,s;for(a.medians=[],r=0;r<46;r++){for(i=[],o=r;o<e.length;o+=46)i.push(e[o][1]);s=i.sort()[Math.floor(i.length/2)],a.medians.push(s)}return a}function l(){var e=this.dataset.type,t=document.getElementsByClassName("graph-type-btn active")[0],n=t.dataset.type;e!==n&&(d3.select("#graph-list").classed("graph-"+n,!1).classed("graph-"+e,!0),d3.select(t).classed("active",!1),d3.select(this).classed("active",!0))}function f(e,t){var n=document.createElement("div"),r=document.createTextNode("Lat: "+e+", Lon: "+t);n.appendChild(r),n.classList.add("graph-elem"),s(e,t,n)}function p(e,t,n,r){e=c(e);var o=u(e);d(e,t,o.medians),h(o,t,n,r),v(o,t,n,r),document.getElementById("graph-list").appendChild(t)}function d(e,t,n){var r={top:30,right:20,bottom:30,left:25},o=580-r.left-r.right,a=270-r.top-r.bottom,i=d3.scaleTime().range([0,o]).domain([E(e[0][0]),E(e[e.length-1][0])]),s=d3.scaleLinear().range([a,0]).domain([0,100]),c=d3.axisBottom(i).ticks(16).tickFormat(function(e){return e.getFullYear()}),u=d3.axisLeft(s).ticks(6),l=d3.line().x(function(e){return i(E(e[0]))}).y(function(e){return s(e[1])}),f=d3.select(t).append("div").classed("timeseries-graph",!0),p=f.append("svg").attr("width",o+r.left+r.right).attr("height",a+r.top+r.bottom).append("g").attr("transform","translate("+r.left+","+r.top+")");p.call(C),b(e,l,p),p.append("g").attr("class","x axis").attr("transform","translate(0,"+a+")").call(c),p.append("g").attr("class","y axis").call(u),w(e,l,p,n)}function h(e,t,n,r){function o(e){return M[(e-15)/30]}var a={},i={top:30,right:20,bottom:30,left:25},s=500-i.left-i.right,c=270-i.top-i.bottom,u=e.medians,l=d3.scaleLinear().range([0,s]).domain([0,365]),f=d3.scaleLinear().range([c,0]).domain([0,100]),p=d3.axisBottom(l).ticks(11).tickValues([15,45,75,105,135,165,195,225,255,285,315,345]).tickFormat(o),d=d3.axisLeft(f).ticks(6),h=d3.line().x(function(e,t){return l(Array.isArray(e)?j(e[0]):8*t+3)}).y(function(e){return f(Array.isArray(e)?e[1]:e)}),v=d3.select(t).append("div").classed("overlapping-graph",!0),y=v.append("svg").attr("width",s+i.left+i.right).attr("height",c+i.top+i.bottom).append("g").attr("transform","translate("+i.left+","+i.top+")");y.call(C),y.append("g").attr("class","x axis").attr("transform","translate(0,"+c+")").call(p),y.append("g").attr("class","y axis").call(d),a.medians={path:b(e.medians,h,y)},a[2015]={path:b(e[2015],h,y)},a.medians.points=w(e.medians,h,y,u),a[2015].points=w(e[2015],h,y,u);var m=v.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){x(m,t,"timeseries","2015",a,e,h,y,u,n,r)}),x(m,"medians","timeseries","medians",a,e,h,y,u,n,r)}function v(e,t,n,r){var o=Math.min(490,490)/2-30,a=e.medians,i=y(e),s=m(a,i[1][0]),c=d3.scaleLinear().domain([0,100]).range([0,o]),u=d3.radialLine().radius(function(e){return c(Array.isArray(e)?e[1]:e)}).angle(function(e,t){return((Array.isArray(e)?j(e[0]):8*t+3)-1)%365/365*(2*Math.PI)}),l=d3.select(t).append("div").classed("polar-graph",!0),f=l.append("svg").attr("width",490).attr("height",490).append("g").attr("transform","translate(245,245)");f.call(C);var p=f.append("g").attr("class","r axis").selectAll("g").data(c.ticks(5).slice(1)).enter().append("g");p.append("circle").attr("r",c),p.append("text").attr("y",function(e){return-c(e)-4}).attr("transform","rotate(15)").style("text-anchor","middle").text(function(e){return e});var d=f.append("g").attr("class","a axis").selectAll("g").data(d3.range(0,360,30)).enter().append("g").attr("transform",function(e){return"rotate("+(e-90)+")"});d.append("line").attr("x2",o),d.append("text").attr("x",o+6).attr("dy",".35em").style("text-anchor",function(e){return e<360&&e>180?"end":null}).attr("transform",function(e){return e<360&&e>180?"rotate(180 "+(o+6)+",0)":null}).text(function(e){return M[e/30]});var h=f.append("g").selectAll("g").data(s).enter().append("g").attr("transform",function(e){return"rotate("+(e.data[1][0]-90)+")"});h.append("line").attr("class","line").attr("x2",o),h.append("text").attr("x",o+6).attr("y",function(e){return(e.data[1][0]-1)%365/365*(2*Math.PI)}).attr("dy",".35em").style("text-anchor",function(e){var t=e.data[1][0];return t<360&&t>180?"end":null}).attr("transform",function(e){var t=e.data[1][0];return t<360&&t>180?"rotate(180 "+(o+6)+",0)":null}).text(function(e){return e.label});var v=i[1][0];g([[v,100],[(v+182.5)%365,100]],u,f).classed("growing-season-line","true"),g(i,u,f).classed("center-line","true"),f.selectAll("point").data([i[1]]).enter().append("circle").attr("class","point").attr("transform",function(e){return"translate("+u([e]).slice(1).slice(0,-1)+")"}).attr("r",2.5).attr("stroke","#000").attr("fill","#dd82d2").on("mouseover",function(e){C.show("Center: "+String(e[1]).substring(0,7)),this.setAttribute("r",5),this.setAttribute("stroke-width","2px"),d3.select(this).classed("active",!0)}).on("mouseout",function(e){C.hide(),this.setAttribute("r",2.5),this.setAttribute("stroke-width","1px"),d3.select(this).classed("active",!0)});var b={};b.medians={path:g(a,u,f)},b[2015]={path:g(e[2015],u,f)},b.medians.points=w(a,u,f,a),b[2015].points=w(e[2015],u,f,a);var k=l.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){var o=k.append("div");o.append("input").attr("type","checkbox").attr("id","polar-"+t+n.toString().replace(".","")+"-"+r.toString().replace(".","")).attr("value",t).property("checked","2015"===t).on("change",function(t){var n=this.value;this.checked?(b.hasOwnProperty(n)||(b[n]={}),b[n].path=g(e[n],u,f),b[n].points=w(e[n],u,f,a)):(b[n].path.remove(),b[n].points.remove())}),o.append("label").text(t).attr("for","polar-"+t+n.toString().replace(".","")+"-"+r.toString().replace(".",""))});var _=k.append("div");_.append("input").attr("type","checkbox").attr("id","polar-average-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")).attr("value","medians").property("checked",!0).on("change",function(t){var n=this.value;this.checked?(b.hasOwnProperty(n)||(b[n]={}),b[n].path=g(e[n],u,f),b[n].points=w(e[n],u,f,a)):(b[n].path.remove(),b[n].points.remove())}),_.append("label").text("Baseline").attr("for","polar-average-"+n.toString().replace(".","")+"-"+r.toString().replace(".",""));var x=k.append("div").classed("threshold-checkbox",!0);x.append("input").attr("type","checkbox").attr("id","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")).property("checked",!0).on("change",function(e){h.style("opacity",this.checked?1:0)}),x.append("label").text("Thresholds").attr("for","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".",""))}function y(e){var t,n,r,o,a,i=0,s=0;for(r=46,t=0;t<e.keys.length;t++)if(o=e[e.keys[t]],o.length===r){for(a=0,n=0;n<r/2;n++)a+=o[n][1]-o[n+23][1];a/=23,i+=a}else s++;i=Math.abs(i)/(e.keys.length-s);var c,u,l,f,p,d=1e6,h=0,v=e.medians;for(t=0;t<r/2;t++){for(u=0,l=0,p=0;p<r/2;p++)n=(t+p)%46,f=(n+23)%46,u+=parseInt(v[n],10),l+=parseInt(v[f],10);c=Math.abs(u-l),c<d&&(d=c,h=t)}var y=parseInt(v[h],10),m=parseInt(-v[h+23],10),b=Math.abs(i-y)-Math.abs(i-m);return Math.abs(-i-y)-Math.abs(-i-m)>b&&(h+=23),[[0,0],[8*h+3,i]]}function m(e,t){var n=Math.floor((t-3)/8);n>22&&(n-=23);var r,o,a,i=0;for(a=46,r=0;r<a;r++)o=(n+r)%a,i+=parseInt(e[o],10);var s,c,u,l=.15*i,f=.8*i,p=.85*i,d=!1,h=!1,v=!1;for(i=0,r=0;r<a;r++)if(o=(n+r)%a,i+=parseInt(e[o],10),!d&&i>l)s=o,d=!0;else if(!h&&i>f)c=o,h=!0;else if(!v&&i>p){u=o,v=!0;break}var y=[0,0];return[{label:"15%",data:[y,[8*s+3,100]]},{label:"80%",data:[y,[8*c+3,100]]},{label:"85%",data:[y,[8*u+3,100]]}]}function b(e,t,n){return n.append("path").attr("class","line").attr("d",t(e))}function g(e,t,n){return n.append("path").datum(e).attr("class","line").attr("d",t)}function w(e,t,n,r){return n.selectAll("point").data(e).enter().append("circle").attr("class","point").attr("transform",function(e,n){return"translate("+t([Array.isArray(e)?e:[8*n+3,e]]).slice(1).slice(0,-1)+")"}).attr("r",3).attr("stroke","#000").attr("fill",function(e,t){return O(Array.isArray(e)?e[1]:e,r[t%46],3)}).on("mouseover",k).on("mouseout",_)}function k(e){var t=Array.isArray(e)?S(e[0])+": "+e[1]:"Average: "+e;C.show(t),this.setAttribute("r",5),this.setAttribute("stroke-width","2px")}function _(e){C.hide(),this.setAttribute("r",3),this.setAttribute("stroke-width","1px")}function x(e,t,n,r,o,a,i,s,c,u,l){var f=e.append("div");f.append("input").attr("type","checkbox").attr("id",n+"-"+t+u.toString().replace(".","")+"-"+l.toString().replace(".","")).attr("value",t).property("checked",t===r).on("change",function(e){var t=this.value;this.checked?(o.hasOwnProperty(t)||(o[t]={}),o[t].path=b(a[t],i,s),o[t].points=w(a[t],i,s,c)):(o[t].path.remove(),o[t].points.remove())}),f.append("label").text(t).attr("for",n+"-"+t+u.toString().replace(".","")+"-"+l.toString().replace(".",""))}function O(e,t,n){var r=e-t,o=Math.abs(r)/t*100*n,a=100-o+"%";return r>0?"hsl(8, 79%, "+a+")":"hsl(219, 79%, "+a+")"}function E(e){e=e.toString();var t=e.substring(0,4),n=parseInt(e.substring(4,6),10)-1,r=e.substring(6,8);return new Date(t,n,r)}function j(e){return"string"==typeof e?(e=E(e),e.getDOY()):e}function S(e){return"Average"===e?e:(e=E(e),P(e.getMonth())+" "+T(e.getDate())+", "+e.getFullYear())}function P(e){switch(e){case 0:return"Jan.";case 1:return"Feb.";case 2:return"Mar.";case 3:return"Apr.";case 4:return"May";case 5:return"Jun.";case 6:return"Jul.";case 7:return"Aug.";case 8:return"Sep.";case 9:return"Oct.";case 10:return"Nov.";case 11:return"Dec."}}function T(e){var t=e%10,n=e%100;return 1===t&&11!==n?e+"st":2===t&&12!==n?e+"nd":3===t&&13!==n?e+"rd":e+"th"}Object.defineProperty(t,"__esModule",{value:!0}),t.SetupGraphs=n,t.BindGraphEvents=o;var C,M={0:"Jan",1:"Feb",2:"Mar",3:"Apr",4:"May",5:"Jun",6:"Jul",7:"Aug",8:"Sep",9:"Oct",10:"Nov",11:"Dec"}},function(e,t){"use strict";function n(){d3.selectAll(".panel-top-btn").on("click",r)}function r(){this.classList.contains("active")||[d3.selectAll(".panel-top-btn"),d3.selectAll(".panel-section-wrapper")].forEach(function(e){e.classed("active",function(){return!d3.select(this).classed("active")})})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t){"use strict";function n(e){var t=e.id||"map",n=e.options||{scrollWheelZoom:!1},r=e.initialCenter||["38.5","-81"],a=e.initialZoom||6;return o=L.map(t,n).setView(r,a)}function r(){return o}Object.defineProperty(t,"__esModule",{value:!0}),t.CreateMap=n,t.GetMap=r;var o},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,