!function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),o=r(a),i=n(3),s=r(i),c=n(22),u=r(c),l=n(23),f=n(24),p=n(25),d=r(p),h=n(26),v=n(27),y=n(28),m=(n(29),function(e){(0,o.default)(e,b),(0,f.SetupGraphs)(),(0,d.default)()}),b=function(e){(0,v.AddShareSettingsToConfig)(e);var t=(0,h.CreateMap)(e.map);(0,l.CreateBaseLayers)(t,e.baselayers),(0,y.CreateDefaultLayers)(e.layers,e["active-layers"]),(0,u.default)(e.layers,e.layout),(0,s.default)(t),(0,f.BindGraphEvents)(t),(0,v.BindUpdateShareUrl)(t)};window.Base=m,t.default={Base:m}},function(e,t){"use strict";function n(e,t){r(e,t)}function r(e,t){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4==n.readyState){try{var e=JSON.parse(n.responseText)}catch(e){console.log("ERROR: Malformed JSON in config file."),console.log(e)}a(e),o(e),t(e)}},n.open("GET",e,!0),n.send(),console.log("hi")}function a(e){e.map||(e.map={})}function o(e){var t,n,r=e.layers,a=e.mapserverUrl;e["active-layers"];for(var o in r){if(!r.hasOwnProperty(o))return;for(t=r[o],n=0;n<t.length;n++)i(t[n],a)}}function i(e,t){e.url=e.url||t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t,n){"use strict";function r(e){var t=new a.EsriProvider,n=new a.GeoSearchControl({provider:t,showMarker:!1});e.addControl(n),L.DomEvent.on(n.searchElement.elements.container,"click",function(e){L.DomEvent.stopPropagation(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var a=n(4)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(5);Object.defineProperty(t,"GeoSearchControl",{enumerable:!0,get:function(){return r(a).default}});var o=n(13);Object.defineProperty(t,"SearchElement",{enumerable:!0,get:function(){return r(o).default}});var i=n(17);Object.defineProperty(t,"BingProvider",{enumerable:!0,get:function(){return r(i).default}});var s=n(19);Object.defineProperty(t,"EsriProvider",{enumerable:!0,get:function(){return r(s).default}});var c=n(20);Object.defineProperty(t,"GoogleProvider",{enumerable:!0,get:function(){return r(c).default}});var u=n(21);Object.defineProperty(t,"OpenStreetMapProvider",{enumerable:!0,get:function(){return r(u).default}});var l=n(18);Object.defineProperty(t,"Provider",{enumerable:!0,get:function(){return r(l).default}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(){if(!L||!L.Control||!L.Control.extend)throw new Error("Leaflet must be loaded before instantiating the GeoSearch control");for(var e=L.Control.extend(y),t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return new(Function.prototype.bind.apply(e,[null].concat(n)))}Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),i=(r(o),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e});t.default=a;var s=n(12),c=r(s),u=n(13),l=r(u),f=n(16),p=r(f),d=n(14),h=n(15),v=function(){return{position:"topleft",style:"button",showMarker:!0,showPopup:!1,marker:{icon:new L.Icon.Default,draggable:!1},maxMarkers:1,retainZoomLevel:!1,animateZoom:!0,searchLabel:"Enter address",notFoundMessage:"Sorry, that address could not be found.",messageHideDelay:3e3,zoomLevel:18,classNames:{container:"leaflet-bar leaflet-control leaflet-control-geosearch",button:"leaflet-bar-part leaflet-bar-part-single",msgbox:"leaflet-bar message",form:"",input:""},autoComplete:!0,autoCompleteDelay:250}},y={initialize:function(e){var t=this;this.markers=new L.FeatureGroup,this.options=i({},v(),e);var n=this.options,r=n.style,a=n.classNames,o=n.searchLabel,s=n.autoComplete,u=n.autoCompleteDelay;"button"!==r&&(this.options.classNames.container+=" "+e.style),this.searchElement=new l.default(i({},this.options,{handleSubmit:function(e){return t.onSubmit(e)}}));var f=this.searchElement.elements,h=f.container,y=f.form,m=f.input;h.addEventListener("dblclick",function(e){e.stopPropagation()});var b=(0,d.createElement)("a",a.button,h);b.title=o,b.href="#",b.addEventListener("click",function(e){t.onClick(e)},!1),s&&(this.resultList=new p.default({handleClick:function(e){var n=e.result;m.value=n.label,t.onSubmit({query:n.label})}}),y.appendChild(this.resultList.elements.container),m.addEventListener("keyup",(0,c.default)(function(e){return t.autoSearch(e)},u),!0),m.addEventListener("keydown",function(e){return t.selectResult(e)},!0),m.addEventListener("keydown",function(e){return t.clearResults(e)},!0)),this.elements={button:b}},onAdd:function(e){var t=this.options,n=t.showMarker,r=t.style;if(this.map=e,n&&this.markers.addTo(e),"bar"===r){var a=this.searchElement.elements.form,o=e.getContainer().querySelector(".leaflet-control-container"),i=(0,d.createElement)("div","leaflet-control-geosearch bar");i.appendChild(a),o.appendChild(i),this.elements.container=i}return this.searchElement.elements.container},onRemove:function(){var e=this.elements.container;return e&&e.remove(),this},onClick:function(e){e.preventDefault();var t=this.searchElement.elements,n=t.container,r=t.input;n.classList.contains("active")?(0,d.removeClassName)(n,"active"):((0,d.addClassName)(n,"active"),r.focus())},selectResult:function(e){if([h.ARROW_DOWN_KEY,h.ARROW_UP_KEY].includes(e.keyCode)){e.preventDefault();var t=this.searchElement.elements.input,n=this.resultList,r=this.resultList.count()-1,a="ArrowDown"===e.code?1+~~n.selected:~~n.selected-1,o=a<0?r:a>r?0:a,i=n.select(o);t.value=i.label}},clearResults:function(e){e.keyCode===h.ESCAPE_KEY&&this.resultList.clear()},autoSearch:function(e){return new Promise(function(t,n){var r,a,o;return h.SPECIAL_KEYS.includes(e.keyCode)?t():(r=e.target.value,a=this.options.provider,a.search({query:r}).then(function(e){return o=e,this.resultList.render(o),t()}.$asyncbind(this,n),n))}.$asyncbind(this))},onSubmit:function(e){return new Promise(function(t,n){var r,a;return r=this.options.provider,r.search(e).then(function(e){return a=e,a&&a.length>0&&this.showResult(a[0]),t()}.$asyncbind(this,n),n)}.$asyncbind(this))},showResult:function(e){var t=Object.keys(this.markers._layers);t.length>=this.options.maxMarkers&&this.markers.removeLayer(t[0]);var n=this.addMarker(e);this.centerMap(e),this.map.fireEvent("geosearch/showlocation",{location:e,marker:n})},addMarker:function(e){var t=this.options,n=t.marker,r=t.showPopup,a=new L.Marker([e.y,e.x],n);return a.bindPopup(e.label),this.markers.addLayer(a),r&&a.openPopup(),a},centerMap:function(e){var t=this.options,n=t.retainZoomLevel,r=t.animateZoom,a=new L.LatLngBounds(e.bounds),o=a.isValid()?a:this.markers.getBounds();!n&&a.isValid()?this.map.fitBounds(o,{animate:r}):this.map.setView(o.getCenter(),this.getZoom(),{animate:r})},getZoom:function(){var e=this.options,t=e.retainZoomLevel,n=e.zoomLevel;return t?this.map.getZoom():n}}},function(e,t,n){"use strict";function r(e,t){if(Function.prototype.$asyncspawn||Object.defineProperty(Function.prototype,"$asyncspawn",{value:r,enumerable:!1,configurable:!0,writable:!0}),this instanceof Function){var n=this;return new e(function(e,r){function a(t,n){var i;try{if(i=t.call(o,n),i.done){if(i.value!==e){if(i.value&&i.value===i.value.then)return i.value(e,r);e&&e(i.value),e=null}return}i.value.then?i.value.then(function(e){a(o.next,e)},function(e){a(o.throw,e)}):a(o.next,i.value)}catch(e){return r&&r(e),void(r=null)}}var o=n.call(t,e,r);a(o.next)})}}var a=function(e,t){for(var n=t.toString(),r="return "+n,a=n.match(/.*\(([^)]*)\)/)[1],o=/['"]!!!([^'"]*)['"]/g,i=[];;){var s=o.exec(r);if(!s)break;i.push(s)}return i.reverse().forEach(function(t){r=r.slice(0,t.index)+e[t[1]]+r.substr(t.index+t[0].length)}),r=r.replace(/\/\*[^*]*\*\//g," ").replace(/\s+/g," "),new Function(a,r)()}({zousan:n(7).toString(),thenable:n(11).toString()},function e(t,n){function r(){return a.apply(t,arguments)}Function.prototype.$asyncbind||Object.defineProperty(Function.prototype,"$asyncbind",{value:e,enumerable:!1,configurable:!0,writable:!0}),e.trampoline||(e.trampoline=function(e,t,n,r,a){return function o(i){for(;i;){if(i.then)return i=i.then(o,r),a?void 0:i;try{if(i.pop){if(i.length)return i.pop()?t.call(e):i;i=n}else i=i.call(e)}catch(e){return r(e)}}}}),e.LazyThenable||(e.LazyThenable="!!!thenable"(),e.EagerThenable=e.Thenable=(e.EagerThenableFactory="!!!zousan")());var a=this;switch(n){case!0:return new e.Thenable(r);case 0:return new e.LazyThenable(r);case void 0:return r.then=r,r;default:return function(){try{return a.apply(t,arguments)}catch(e){return n(e)}}}});a(),r(),e.exports={$asyncbind:a,$asyncspawn:r}},function(e,t,n){(function(t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){function a(e){if(e){var t=this;e(function(e){t.resolve(e)},function(e){t.reject(e)})}}function o(e,t){if("function"==typeof e.y)try{var n=e.y.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.resolve(t)}function i(e,t){if("function"==typeof e.n)try{var n=e.n.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.reject(t)}e=e||"object"===(void 0===t?"undefined":r(t))&&t.nextTick||"function"==typeof n&&n||function(e){setTimeout(e,0)};var s=function(){function t(){for(;n.length-r;){try{n[r]()}catch(e){}n[r++]=void 0,r===a&&(n.splice(0,a),r=0)}}var n=[],r=0,a=1024;return function(a){n.push(a),n.length-r==1&&e(t)}}();return a.prototype={resolve:function(e){if(void 0===this.state){if(e===this)return this.reject(new TypeError("Attempt to resolve promise with self"));var t=this;if(e&&("function"==typeof e||"object"===(void 0===e?"undefined":r(e))))try{var n=0,a=e.then;if("function"==typeof a)return void a.call(e,function(e){n++||t.resolve(e)},function(e){n++||t.reject(e)})}catch(e){return void(n||this.reject(e))}this.state=o,this.v=e,t.c&&s(function(){for(var n=0,r=t.c.length;n<r;n++)o(t.c[n],e)})}},reject:function(e){if(void 0===this.state){this.state=i,this.v=e;var t=this.c;t&&s(function(){for(var n=0,r=t.length;n<r;n++)i(t[n],e)})}},then:function(e,t){var n=new a,r={y:e,n:t,p:n};if(void 0===this.state)this.c?this.c.push(r):this.c=[r];else{var o=this.state,i=this.v;s(function(){o(r,i)})}return n}},a.resolve=function(e){if(e&&e instanceof a)return e;var t=new a;return t.resolve(e),t},a.reject=function(e){if(e&&e instanceof a)return e;var t=new a;return t.reject(e),t},a.version="2.3.3-nodent",a}}).call(t,n(8),n(9).setImmediate)},function(e,t){"use strict";function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function a(e){if(l===setTimeout)return setTimeout(e,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function o(e){if(f===clearTimeout)return clearTimeout(e);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}function i(){v&&d&&(v=!1,d.length?h=d.concat(h):y=-1,h.length&&s())}function s(){if(!v){var e=a(i);v=!0;for(var t=h.length;t;){for(d=h,h=[];++y<t;)d&&d[y].run();y=-1,t=h.length}d=null,v=!1,o(e)}}function c(e,t){this.fun=e,this.array=t}function u(){}var l,f,p=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(e){l=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(e){f=r}}();var d,h=[],v=!1,y=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];h.push(new c(e,t)),1!==h.length||v||a(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=u,p.addListener=u,p.once=u,p.off=u,p.removeListener=u,p.removeAllListeners=u,p.emit=u,p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t,n){"use strict";function r(e,t){this._id=e,this._clearFn=t}var a=Function.prototype.apply;t.setTimeout=function(){return new r(a.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new r(a.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(10),t.setImmediate=setImmediate,t.clearImmediate=clearImmediate},function(e,t,n){(function(e,t){"use strict";!function(e,n){function r(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return u[c]=r,s(c),c++}function a(e){delete u[e]}function o(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}function i(e){if(l)setTimeout(i,0,e);else{var t=u[e];if(t){l=!0;try{o(t)}finally{a(e),l=!1}}}}if(!e.setImmediate){var s,c=1,u={},l=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?function(){s=function(e){t.nextTick(function(){i(e)})}}():function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&i(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),s=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){i(e.data)},s=function(t){e.port2.postMessage(t)}}():f&&"onreadystatechange"in f.createElement("script")?function(){var e=f.documentElement;s=function(t){var n=f.createElement("script");n.onreadystatechange=function(){i(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():function(){s=function(e){setTimeout(i,0,e)}}(),p.setImmediate=r,p.clearImmediate=a}}("undefined"==typeof self?void 0===e?void 0:e:self)}).call(t,function(){return this}(),n(8))},function(e,t){"use strict";e.exports=function(){function e(e){return e&&e instanceof Object&&"function"==typeof e.then}function t(n,r,a){try{var o=a?a(r):r;if(n===o)return n.reject(new TypeError("Promise resolution loop"));e(o)?o.then(function(e){t(n,e)},function(e){n.reject(e)}):n.resolve(o)}catch(e){n.reject(e)}}function n(){}function r(e){}function a(e,t){this.resolve=e,this.reject=t}function o(r,a){var o=new n;try{this._resolver(function(n){return e(n)?n.then(r,a):t(o,n,r)},function(e){t(o,e,a)})}catch(e){t(o,e,a)}return o}function i(e){this._resolver=e,this.then=o}return n.prototype={resolve:r,reject:r,then:a},i.resolve=function(e){return i.isThenable(e)?e:{then:function(t){return t(e)}}},i.isThenable=e,i}},function(e,t){(function(t){"use strict";function n(e,t,n){function a(t){var n=v,r=y;return v=y=void 0,E=t,b=e.apply(r,n)}function o(e){return E=e,g=setTimeout(l,t),S?a(e):b}function s(e){var n=e-w,r=e-E,a=t-n;return O?_(a,m-r):a}function u(e){var n=e-w,r=e-E;return void 0===w||n>=t||n<0||O&&r>=m}function l(){var e=x();if(u(e))return f(e);g=setTimeout(l,s(e))}function f(e){return g=void 0,j&&v?a(e):(v=y=void 0,b)}function p(){void 0!==g&&clearTimeout(g),E=0,v=w=y=g=void 0}function d(){return void 0===g?b:f(x())}function h(){var e=x(),n=u(e);if(v=arguments,y=this,w=e,n){if(void 0===g)return o(w);if(O)return g=setTimeout(l,t),a(w)}return void 0===g&&(g=setTimeout(l,t)),b}var v,y,m,b,g,w,E=0,S=!1,O=!1,j=!0;if("function"!=typeof e)throw new TypeError(c);return t=i(t)||0,r(n)&&(S=!!n.leading,O="maxWait"in n,m=O?k(i(n.maxWait)||0,t):m,j="trailing"in n?!!n.trailing:j),h.cancel=p,h.flush=d,h}function r(e){var t=void 0===e?"undefined":s(e);return!!e&&("object"==t||"function"==t)}function a(e){return!!e&&"object"==(void 0===e?"undefined":s(e))}function o(e){return"symbol"==(void 0===e?"undefined":s(e))||a(e)&&w.call(e)==l}function i(e){if("number"==typeof e)return e;if(o(e))return u;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(f,"");var n=d.test(e);return n||h.test(e)?v(e.slice(2),n?2:8):p.test(e)?u:+e}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c="Expected a function",u=NaN,l="[object Symbol]",f=/^\s+|\s+$/g,p=/^[-+]0x[0-9a-f]+$/i,d=/^0b[01]+$/i,h=/^0o[0-7]+$/i,v=parseInt,y="object"==(void 0===t?"undefined":s(t))&&t&&t.Object===Object&&t,m="object"==("undefined"==typeof self?"undefined":s(self))&&self&&self.Object===Object&&self,b=y||m||Function("return this")(),g=Object.prototype,w=g.toString,k=Math.max,_=Math.min,x=function(){return b.Date.now()};e.exports=n}).call(t,function(){return this}())},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),o=(function(e){e&&e.__esModule?e:{default:e}}(a),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=n(14),s=n(15),c=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=n.handleSubmit,o=void 0===a?function(){}:a,s=n.searchLabel,c=void 0===s?"search":s,u=n.classNames,l=void 0===u?{}:u;r(this,e);var f=(0,i.createElement)("div",["geosearch",l.container].join(" ")),p=(0,i.createElement)("form",["",l.form].join(" "),f),d=(0,i.createElement)("input",["glass",l.input].join(" "),p);d.type="text",d.placeholder=c,d.addEventListener("input",function(e){t.onInput(e)},!1),d.addEventListener("keyup",function(e){t.onKeyUp(e)},!1),d.addEventListener("keypress",function(e){t.onKeyPress(e)},!1),d.addEventListener("focus",function(e){t.onFocus(e)},!1),d.addEventListener("blur",function(e){t.onBlur(e)},!1),this.elements={container:f,form:p,input:d},this.handleSubmit=o}return o(e,[{key:"onFocus",value:function(){(0,i.addClassName)(this.elements.form,"active")}},{key:"onBlur",value:function(){(0,i.removeClassName)(this.elements.form,"active")}},{key:"onSubmit",value:function(e){return new Promise(function(t,n){var r,a,o;return e.preventDefault(),e.stopPropagation(),r=this.elements,a=r.input,o=r.container,(0,i.removeClassName)(o,"error"),(0,i.addClassName)(o,"pending"),this.handleSubmit({query:a.value}).then(function(e){return(0,i.removeClassName)(o,"pending"),t()}.$asyncbind(this,n),n)}.$asyncbind(this))}},{key:"onInput",value:function(){var e=this.elements.container;this.hasError&&((0,i.removeClassName)(e,"error"),this.hasError=!1)}},{key:"onKeyUp",value:function(e){var t=this.elements,n=t.container,r=t.input;e.keyCode===s.ESCAPE_KEY&&((0,i.removeClassName)(n,"pending"),(0,i.removeClassName)(n,"active"),r.value="",document.body.focus(),document.body.blur())}},{key:"onKeyPress",value:function(e){e.keyCode===s.ENTER_KEY&&this.onSubmit(e)}},{key:"setQuery",value:function(e){this.elements.input.value=e}}]),e}();t.default=c},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.createElement=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=document.createElement(e);return r.className=t,n&&n.appendChild(r),r};t.createScriptElement=function(e,t){var r=n("script",null,document.body);return r.setAttribute("type","text/javascript"),new Promise(function(n){window[t]=function(e){r.remove(),delete window[t],n(e)},r.setAttribute("src",e)})},t.addClassName=function(e,t){e&&!e.classList.contains(t)&&e.classList.add(t)},t.removeClassName=function(e,t){e&&e.classList.contains(t)&&e.classList.remove(t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.ENTER_KEY=13,r=t.ESCAPE_KEY=27,a=t.ARROW_DOWN_KEY=40,o=t.ARROW_UP_KEY=38,i=t.ARROW_LEFT_KEY=37,s=t.ARROW_RIGHT_KEY=39;t.SPECIAL_KEYS=[n,r,a,o,i,s]},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(14),i=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.join(" ").trim()},s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.handleClick,a=void 0===n?function(){}:n,s=t.classNames,u=void 0===s?{}:s;r(this,e),c.call(this),this.props={handleClick:a,classNames:u},this.selected=-1;var l=(0,o.createElement)("div",i("results",u.container)),f=(0,o.createElement)("div",i(u.item));l.addEventListener("click",this.onClick,!0),this.elements={container:l,resultItem:f}}return a(e,[{key:"render",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=this.elements,n=t.container,r=t.resultItem;this.clear(),e.forEach(function(e,t){var a=r.cloneNode(!0);a.setAttribute("data-key",t),a.innerHTML=e.label,n.appendChild(a)}),e.length>0&&(0,o.addClassName)(n,"active"),this.results=e}},{key:"select",value:function(e){var t=this.elements.container;return Array.from(t.children).forEach(function(t,n){return n===e?(0,o.addClassName)(t,"active"):(0,o.removeClassName)(t,"active")}),this.selected=e,this.results[e]}},{key:"count",value:function(){return this.results.length}},{key:"clear",value:function(){var e=this.elements.container;for(this.selected=-1;e.lastChild;)e.removeChild(e.lastChild);(0,o.removeClassName)(e,"active")}}]),e}(),c=function(){var e=this;this.onClick=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.target,r=e.props.handleClick,a=e.elements.container;if(n.parentNode===a&&n.hasAttribute("data-key")){var o=n.getAttribute("data-key");r({result:e.results[o]})}}};t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=n(6),u=(r(c),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(18),p=r(f),d=n(14),h=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=e.jsonp,a=this.options.params;return n+"//dev.virtualearth.net/REST/v1/Locations?"+this.getParamString(u({},a,{query:t,jsonp:r}))}},{key:"parse",value:function(e){var t=e.data;return 0===t.resourceSets.length?[]:t.resourceSets[0].resources.map(function(e){return{x:e.point.coordinates[1],y:e.point.coordinates[0],label:e.address.formattedAddress,bounds:[[e.bbox[0],e.bbox[1]],[e.bbox[2],e.bbox[3]]],raw:e}})}},{key:"search",value:function(e){return new Promise(function(t,n){var r,a,o,i,s;return r=e.query,a=~location.protocol.indexOf("http")?location.protocol:"https:",o="BING_JSONP_CB_"+Date.now(),i=this.endpoint({query:r,protocol:a,jsonp:o}),(0,d.createScriptElement)(i,o).then(function(e){return s=e,t(this.parse({data:s}))}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),t}(p.default);t.default=h},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),o=(function(e){e&&e.__esModule?e:{default:e}}(a),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.options=t}return o(e,[{key:"getParamString",value:function(e){return Object.keys(e).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}},{key:"search",value:function(e){return new Promise(function(t,n){var r,a,o,i,s;return r=e.query,a=~location.protocol.indexOf("http")?location.protocol:"https:",o=this.endpoint({query:r,protocol:a}),fetch(o).then(function(e){return i=e,i.json().then(function(e){return s=e,t(this.parse({data:s}))}.$asyncbind(this,n),n)}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),e}();t.default=i},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),f=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),c(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find?"+this.getParamString(s({},r,{f:"json",text:t}))}},{key:"parse",value:function(e){return e.data.locations.map(function(e){return{x:e.feature.geometry.x,y:e.feature.geometry.y,label:e.name,bounds:[[e.extent.ymin,e.extent.xmin],[e.extent.ymax,e.extent.xmax]],raw:e}})}}]),t}(l.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),f=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),c(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params,a=this.getParamString(s({},r,{address:t}));return(r&&r.key?"https:":n)+"//maps.googleapis.com/maps/api/geocode/json?"+a}},{key:"parse",value:function(e){return e.data.results.map(function(e){return{x:e.geometry.location.lng,y:e.geometry.location.lat,label:e.formatted_address,bounds:[[e.geometry.viewport.southwest.lat,e.geometry.viewport.southwest.lng],[e.geometry.viewport.northeast.lat,e.geometry.viewport.northeast.lng]],raw:e}})}}]),t}(l.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),f=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),c(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//nominatim.openstreetmap.org/search?"+this.getParamString(s({},r,{format:"json",q:t}))}},{key:"parse",value:function(e){return e.data.map(function(e){return{x:e.lon,y:e.lat,label:e.display_name,bounds:[[parseFloat(e.boundingbox[0]),parseFloat(e.boundingbox[2])],[parseFloat(e.boundingbox[1]),parseFloat(e.boundingbox[3])]],raw:e}})}}]),t}(l.default);t.default=f},function(e,t,n){"use strict";function r(e,t){i(o(t["layer-groups-order"]),e),a()}function a(){function e(){var e=d3.select("#right-panel"),t=d3.select("#map-wrapper"),n=d3.select("#wrapper"),r=n.property("clientWidth"),a=e.property("clientWidth"),o=+e.style("min-width").slice(0,-2),i=d3.event.sourceEvent.x,s=r-i-a,c=a+s;c=c<o?o:c,t.style("padding-right",c+"px"),e.style("width",c+"px")}d3.select("#right-panel-drag-overlay").call(d3.drag().on("drag",function(){e.call(this)}))}function o(e){return d3.select(".layer-list").selectAll(".layer-group-wrapper").data(e).enter().append("div").attr("class","layer-group-wrapper").attr("id",function(e){return e.id}).classed("active",function(e){return e.active}).each(function(e){d3.select(this).append("div").attr("class","layer-group-btn btn").on("click",function(e){e.active=!e.active,d3.select(this.parentNode).classed("active",function(){return e.active})}).text(e.name)}).append("div").attr("class","layer-group")}function i(e,t){e.selectAll(".layer-select").data(function(e){return t[e.id]}).enter().append("div").attr("class","layer-select").each(function(e){var t=(this.parentNode.parentNode.id,d3.select(this));s(e,t),c(e,t),u(e,t),l(e,t),f(e,t)})}function s(e,t){t.append("input").attr("type","checkbox").attr("id",function(e){return e.id}).attr("checked",function(e){return e.active?"checked":null}).on("click",function(e){(0,d.toggleLayer)(e),t.selectAll(".legend-wrapper, .opacity-slider-wrapper").classed("active",e.active)})}function c(e,t){t.append("label").attr("for",function(e){return e.id}).attr("class","layer-label").html(function(e){return e.name})}function u(e,t){e.info&&""!==e.info&&(t.append("div").attr("class","layer-info-btn").text("(?)").on("click",function(){d3.select(this.parentNode).select(".layer-info-wrapper").classed("active",function(){return!d3.select(this).classed("active")})}),t.append("div").attr("class","layer-info-wrapper").text(function(e){return e.info}))}function l(e,t){t.append("div").attr("class","legend-wrapper").classed("active",e.active).append("img").attr("src",e.legend||"mean_ndvi_legend.jpg")}function f(e,t){var n=d3.scaleLinear().domain([0,300]).range([0,1]).clamp(!0),r=e.opacity?e.opacity:1,a=300*r,o=t.append("div").attr("class","opacity-slider-wrapper").classed("active",e.active),i=o.append("svg").append("g").attr("class","opacity-slider").attr("transform","translate(20, 20)");i.append("circle").attr("r",6).attr("cx",a).attr("class","opacity-slider-circle"),i.append("line").attr("class","opacity-slider-track-overlay").attr("x1",0).attr("x2",315).attr("stroke","#000000").attr("stroke-width","20px").attr("stroke-opacity","0.0").call(d3.drag().on("start drag",function(){p(e,this.parentNode,n,d3.event.x)}).on("end",function(){(0,h.updateShareUrl)()})),i.append("line").attr("class","opacity-slider-track").attr("x1",0).attr("x2",300).attr("stroke-width","20px").attr("stroke","#666").attr("stroke-width","2px"),i.append("text").attr("class","opacity-indicator").attr("x",315).attr("y",5).text(parseInt(100*r,10)+"%")}function p(e,t,n,r){var r=n.invert(n(r));t=d3.select(t),t.select("circle").attr("cx",r),t.select("text").text(parseInt(100*n(r),10)+"%"),e.mapLayer.setOpacity(n(d3.event.x))}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var d=n(28),h=n(27)},function(e,t,n){"use strict";function r(e,t){t=t||[{id:"carto-light-default",url:"http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attributions">CARTO</a>'}],f=t;var n,r,o;for(n=0;n<t.length;n++)o=t[n],o.active&&(r=u(o),o.layer=r,r.addTo(e));a(t)}function a(e){var t=document.createElement("div");t.className="baselayer-ui";for(var n,r,a,i,s=0,c=e.length;s<c;s++)i=e[s],i.hasOwnProperty("image")&&(n=document.createElement("div"),n.setAttribute("data-layer",i.id),r=document.createElement("img"),r.setAttribute("src",i.image),r.setAttribute("alt",i.label),r.setAttribute("title",i.label),a=document.createElement("div"),a.textContent=i.label,n.appendChild(r),n.appendChild(a),n.addEventListener("click",o),d3.select(n).classed("base-selector",!0).classed("active",i.active),t.appendChild(n));document.getElementsByClassName("leaflet-bottom leaflet-left")[0].appendChild(t)}function o(e){e.stopPropagation();var t=this.getAttribute("data-layer");i(this),s(),c(t),(0,d.updateShareUrl)()}function i(e){d3.select(".base-selector.active").classed("active",!1),d3.select(e).classed("active",!0)}function s(){var e=(0,p.GetMap)();e.eachLayer(function(t){t.options.type===h&&e.removeLayer(t)})}function c(e){for(var t,n=(0,p.GetMap)(),r=0,a=f.length;r<a;r++)if(t=f[r],t.id===e){t.layer||(t.layer=u(t)),t.layer.addTo(n),t.layer.bringToBack();break}}function u(e){return L.tileLayer(e.url,l(e))}function l(e){var t={};return e.id&&(t.id=e.id),e.attribution&&(t.attribution=e.attribution),e.subdomains&&(t.subdomains=e.subdomains),t.type=h,t}Object.defineProperty(t,"__esModule",{value:!0}),t.BASE_LAYER_TYPE=void 0,t.CreateBaseLayers=r;var f,p=n(26),d=n(27),h=t.BASE_LAYER_TYPE="baselayer"},function(e,t){"use strict";function n(){d3.selectAll(".graph-type-btn").on("click",p),r(),M=d3.tip().attr("class","d3-tip").html(function(e){return e})}function r(){Date.prototype.isLeapYear=function(){var e=this.getFullYear();return 0==(3&e)&&(e%100!=0||e%400==0)},Date.prototype.getDOY=function(){var e=[0,31,59,90,120,151,181,212,243,273,304,334],t=this.getMonth(),n=this.getDate(),r=e[t]+n;return t>1&&this.isLeapYear()&&r++,r}}function a(e){e.on("click",o)}function o(e){var t=this,n=e.latlng.lat,r=e.latlng.lng,a=d(n,r),o=i(t,n,r);d3.select(a).on("mouseenter",function(){o.setIcon(R)}),d3.select(a).on("mouseleave",function(){o.setIcon(N)}),s(t,a,o)}function i(e,t,n){return L.marker([t,n],{icon:N}).addTo(e)}function s(e,t,n){var r=c();t.appendChild(r),d3.select(r).on("click",function(){document.getElementById("graph-list").removeChild(t),e.removeLayer(n)})}function c(){var e=document.createElement("button");return e.className="remove-graph",e.innerText=String.fromCharCode("10005"),e.setAttribute("title","Remove graph"),e}function u(e,t,n){var r="https://fcav-ndvi.nemac.org/landdat_product.cgi?args="+t+","+e,a=new XMLHttpRequest;a.addEventListener("load",function(){var r=this.responseText;r=r.replace(/\[|\]|\'/g,"").split(", "),h(r,n,e,t)}),a.open("GET",r),a.send()}function l(e){var t;for(t=0;t<e.length;t++)e[t]=e[t].split(",");return e}function f(e){var t,n,r,a,o={};for(o.keys=[],r=0;r<e.length;r++)t=e[r],n=t[0].substring(0,4),o.hasOwnProperty(n)||(o[n]=[],o.keys.push(n)),o[n].push(t);var i,s;for(o.medians=[],r=0;r<46;r++){for(i=[],a=r;a<e.length;a+=46)i.push(e[a][1]);s=i.sort()[Math.floor(i.length/2)],o.medians.push(s)}return o}function p(){var e=this.dataset.type,t=document.getElementsByClassName("graph-type-btn active")[0],n=t.dataset.type;e!==n&&(d3.select("#graph-list").classed("graph-"+n,!1).classed("graph-"+e,!0),d3.select(t).classed("active",!1),d3.select(this).classed("active",!0))}function d(e,t){var n=document.createElement("div"),r=document.createTextNode("Lat: "+e+", Lon: "+t);return n.appendChild(r),n.classList.add("graph-elem"),u(e,t,n),n}function h(e,t,n,r){e=l(e);var a=f(e);v(e,t,a.medians),y(a,t,n,r),m(a,t,n,r),document.getElementById("graph-list").appendChild(t)}function v(e,t,n){var r={top:30,right:20,bottom:30,left:25},a=580-r.left-r.right,o=270-r.top-r.bottom,i=d3.scaleTime().range([0,a]).domain([j(e[0][0]),j(e[e.length-1][0])]),s=d3.scaleLinear().range([o,0]).domain([0,100]),c=d3.axisBottom(i).ticks(16).tickFormat(function(e){return e.getFullYear()}),u=d3.axisLeft(s).ticks(6),l=d3.line().x(function(e){return i(j(e[0]))}).y(function(e){return s(e[1])}),f=d3.select(t).append("div").classed("timeseries-graph",!0),p=f.append("svg").attr("height",o+r.top+r.bottom).attr("viewBox",function(){return"0 0 "+(a+r.left+r.right)+" "+(o+r.top+r.bottom)}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate("+r.left+","+r.top+")");p.call(M),w(e,l,p),p.append("g").attr("class","x axis").attr("transform","translate(0,"+o+")").call(c),p.append("g").attr("class","y axis").call(u),_(e,l,p,n)}function y(e,t,n,r){function a(e){return B[(e-15)/30]}var o={},i={top:30,right:20,bottom:30,left:25},s=500-i.left-i.right,c=270-i.top-i.bottom,u=e.medians,l=d3.scaleLinear().range([0,s]).domain([0,365]),f=d3.scaleLinear().range([c,0]).domain([0,100]),p=d3.axisBottom(l).ticks(11).tickValues([15,45,75,105,135,165,195,225,255,285,315,345]).tickFormat(a),d=d3.axisLeft(f).ticks(6),h=d3.line().x(function(e,t){return l(Array.isArray(e)?P(e[0]):8*t+3)}).y(function(e){return f(Array.isArray(e)?e[1]:e)}),v=d3.select(t).append("div").classed("overlapping-graph",!0),y=v.append("svg").attr("viewBox",function(){return"0 0 "+(s+i.left+i.right)+" "+(c+i.top+i.bottom)}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate("+i.left+","+i.top+")");y.call(M),y.append("g").attr("class","x axis").attr("transform","translate(0,"+c+")").call(p),y.append("g").attr("class","y axis").call(d),o.medians={path:w(e.medians,h,y)},o[2015]={path:w(e[2015],h,y)},o.medians.points=_(e.medians,h,y,u),o[2015].points=_(e[2015],h,y,u);var m=v.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){S(m,t,"timeseries","2015",o,e,h,y,u,n,r)}),S(m,"medians","timeseries","medians",o,e,h,y,u,n,r)}function m(e,t,n,r){var a=Math.min(490,490)/2-30,o=e.medians,i=b(e),s=g(o,i[1][0]),c=d3.scaleLinear().domain([0,100]).range([0,a]),u=d3.radialLine().radius(function(e){return c(Array.isArray(e)?e[1]:e)}).angle(function(e,t){return((Array.isArray(e)?P(e[0]):8*t+3)-1)%365/365*(2*Math.PI)}),l=d3.select(t).append("div").classed("polar-graph",!0),f=l.append("svg").attr("viewBox",function(){return"0 0 490 490"}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(245,245)");f.call(M);var p=f.append("g").attr("class","r axis").selectAll("g").data(c.ticks(5).slice(1)).enter().append("g");p.append("circle").attr("r",c),p.append("text").attr("y",function(e){return-c(e)-4}).attr("transform","rotate(15)").style("text-anchor","middle").text(function(e){return e});var d=f.append("g").attr("class","a axis").selectAll("g").data(d3.range(0,360,30)).enter().append("g").attr("transform",function(e){return"rotate("+(e-90)+")"});d.append("line").attr("x2",a),d.append("text").attr("x",a+6).attr("dy",".35em").style("text-anchor",function(e){return e<360&&e>180?"end":null}).attr("transform",function(e){return e<360&&e>180?"rotate(180 "+(a+6)+",0)":null}).text(function(e){return B[e/30]});var h=f.append("g").selectAll("g").data(s).enter().append("g").attr("transform",function(e){return"rotate("+(e.data[1][0]-90)+")"});h.append("line").attr("class","line").attr("x2",a),h.append("text").attr("x",a+6).attr("y",function(e){return(e.data[1][0]-1)%365/365*(2*Math.PI)}).attr("dy",".35em").style("text-anchor",function(e){var t=e.data[1][0];return t<360&&t>180?"end":null}).attr("transform",function(e){var t=e.data[1][0];return t<360&&t>180?"rotate(180 "+(a+6)+",0)":null}).text(function(e){return e.label});var v=i[1][0];k([[v,100],[(v+182.5)%365,100]],u,f).classed("growing-season-line","true"),k(i,u,f).classed("center-line","true"),f.selectAll("point").data([i[1]]).enter().append("circle").attr("class","point").attr("transform",function(e){return"translate("+u([e]).slice(1).slice(0,-1)+")"}).attr("r",2.5).attr("stroke","#000").attr("fill","#dd82d2").on("mouseover",function(e){M.show("Center: "+String(e[1]).substring(0,7)),this.setAttribute("r",5),this.setAttribute("stroke-width","2px"),d3.select(this).classed("active",!0)}).on("mouseout",function(e){M.hide(),this.setAttribute("r",2.5),this.setAttribute("stroke-width","1px"),d3.select(this).classed("active",!0)});var y={};y.medians={path:k(o,u,f)},y[2015]={path:k(e[2015],u,f)},y.medians.points=_(o,u,f,o),y[2015].points=_(e[2015],u,f,o);var m=l.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){var a=m.append("div");a.append("input").attr("type","checkbox").attr("id","polar-"+t+n.toString().replace(".","")+"-"+r.toString().replace(".","")).attr("value",t).property("checked","2015"===t).on("change",function(t){var n=this.value;this.checked?(y.hasOwnProperty(n)||(y[n]={}),y[n].path=k(e[n],u,f),y[n].points=_(e[n],u,f,o)):(y[n].path.remove(),y[n].points.remove())}),a.append("label").text(t).attr("for","polar-"+t+n.toString().replace(".","")+"-"+r.toString().replace(".",""))});var w=m.append("div");w.append("input").attr("type","checkbox").attr("id","polar-average-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")).attr("value","medians").property("checked",!0).on("change",function(t){var n=this.value;this.checked?(y.hasOwnProperty(n)||(y[n]={}),y[n].path=k(e[n],u,f),y[n].points=_(e[n],u,f,o)):(y[n].path.remove(),y[n].points.remove())}),w.append("label").text("Baseline").attr("for","polar-average-"+n.toString().replace(".","")+"-"+r.toString().replace(".",""));var x=m.append("div").classed("threshold-checkbox",!0);x.append("input").attr("type","checkbox").attr("id","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")).property("checked",!0).on("change",function(e){h.style("opacity",this.checked?1:0)}),x.append("label").text("Thresholds").attr("for","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".",""))}function b(e){var t,n,r,a,o,i=0,s=0;for(r=46,t=0;t<e.keys.length;t++)if(a=e[e.keys[t]],a.length===r){for(o=0,n=0;n<r/2;n++)o+=a[n][1]-a[n+23][1];o/=23,i+=o}else s++;i=Math.abs(i)/(e.keys.length-s);var c,u,l,f,p,d=1e6,h=0,v=e.medians;for(t=0;t<r/2;t++){for(u=0,l=0,p=0;p<r/2;p++)n=(t+p)%46,f=(n+23)%46,u+=parseInt(v[n],10),l+=parseInt(v[f],10);c=Math.abs(u-l),c<d&&(d=c,h=t)}var y=parseInt(v[h],10),m=parseInt(-v[h+23],10),b=Math.abs(i-y)-Math.abs(i-m);return Math.abs(-i-y)-Math.abs(-i-m)>b&&(h+=23),[[0,0],[8*h+3,i]]}function g(e,t){var n=Math.floor((t-3)/8);n>22&&(n-=23);var r,a,o,i=0;for(o=46,r=0;r<o;r++)a=(n+r)%o,i+=parseInt(e[a],10);var s,c,u,l=.15*i,f=.8*i,p=.85*i,d=!1,h=!1,v=!1;for(i=0,r=0;r<o;r++)if(a=(n+r)%o,i+=parseInt(e[a],10),!d&&i>l)s=a,d=!0;else if(!h&&i>f)c=a,h=!0;else if(!v&&i>p){u=a,v=!0;break}var y=[0,0];return[{label:"15%",data:[y,[8*s+3,100]]},{label:"80%",data:[y,[8*c+3,100]]},{label:"85%",data:[y,[8*u+3,100]]}]}function w(e,t,n){return n.append("path").attr("class","line").attr("d",t(e))}function k(e,t,n){return n.append("path").datum(e).attr("class","line").attr("d",t)}function _(e,t,n,r){return n.selectAll("point").data(e).enter().append("circle").attr("class","point").attr("transform",function(e,n){var r=Array.isArray(e)?e:[8*n+3,e];return"translate("+t([r]).slice(1).slice(0,-1)+")"}).attr("r",3).attr("stroke","#000").attr("fill",function(e,t){return O(Array.isArray(e)?e[1]:e,r[t%46],3)}).on("mouseover",x).on("mouseout",E)}function x(e){var t=Array.isArray(e)?C(e[0])+": "+e[1]:"Average: "+e;M.show(t),this.setAttribute("r",5),this.setAttribute("stroke-width","2px")}function E(e){M.hide(),this.setAttribute("r",3),this.setAttribute("stroke-width","1px")}function S(e,t,n,r,a,o,i,s,c,u,l){var f=e.append("div");f.append("input").attr("type","checkbox").attr("id",n+"-"+t+u.toString().replace(".","")+"-"+l.toString().replace(".","")).attr("value",t).property("checked",t===r).on("change",function(e){var t=this.value;this.checked?(a.hasOwnProperty(t)||(a[t]={}),a[t].path=w(o[t],i,s),a[t].points=_(o[t],i,s,c)):(a[t].path.remove(),a[t].points.remove())}),f.append("label").text(t).attr("for",n+"-"+t+u.toString().replace(".","")+"-"+l.toString().replace(".",""))}function O(e,t,n){var r=e-t,a=Math.abs(r)/t*100*n,o=100-a+"%";return r>0?"hsl(8, 79%, "+o+")":"hsl(219, 79%, "+o+")"}function j(e){e=e.toString();var t=e.substring(0,4),n=parseInt(e.substring(4,6),10)-1,r=e.substring(6,8);return new Date(t,n,r)}function P(e){return"string"==typeof e?(e=j(e),e.getDOY()):e}function C(e){return"Average"===e?e:(e=j(e),T(e.getMonth())+" "+A(e.getDate())+", "+e.getFullYear())}function T(e){switch(e){case 0:return"Jan.";case 1:return"Feb.";case 2:return"Mar.";case 3:return"Apr.";case 4:return"May";case 5:return"Jun.";case 6:return"Jul.";case 7:return"Aug.";case 8:return"Sep.";case 9:return"Oct.";case 10:return"Nov.";case 11:return"Dec."}}function A(e){var t=e%10,n=e%100;return 1===t&&11!==n?e+"st":2===t&&12!==n?e+"nd":3===t&&13!==n?e+"rd":e+"th"}Object.defineProperty(t,"__esModule",{value:!0}),t.SetupGraphs=n,t.BindGraphEvents=a;var M,I=L.Icon.extend({}),N=new I({iconUrl:"imgs/blue_icon.png",shadowUrl:"imgs/marker_shadow.png",iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]}),R=new I({iconUrl:"imgs/orange_icon.png",shadowUrl:"imgs/marker_shadow.png",iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]}),B={0:"Jan",1:"Feb",2:"Mar",3:"Apr",4:"May",5:"Jun",6:"Jul",7:"Aug",8:"Sep",9:"Oct",10:"Nov",11:"Dec"}},function(e,t){"use strict";function n(){d3.selectAll(".panel-top-btn").on("click",r)}function r(){this.classList.contains("active")||(a(),o(),d3.selectAll(".panel-top-btn, .panel-section-wrapper").classed("active",function(){return!d3.select(this).classed("active")}))}function a(){var e=d3.selectAll("#map-wrapper, #right-panel"),t=e.classed("layers-active"),n=e.classed("graphs-active");e.classed("layers-active",!t).classed("graphs-active",!n)}function o(){var e=document.getElementById("right-panel").offsetWidth;document.getElementById("map-wrapper").style.paddingRight=e+"px"}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t){"use strict";function n(e){var t=e.id||"map",n=e.options||{scrollWheelZoom:!1},r=e.initialCenter||["38.5","-81"],o=e.initialZoom||6;return a=L.map(t,n).setView(r,o),L.control.attribution().addTo(a),a}function r(){return a}Object.defineProperty(t,"__esModule",{value:!0}),t.CreateMap=n,t.GetMap=r;var a},function(e,t,n){"use strict";function r(e){e.on("moveend",a)}function a(e){var t=(0,_.GetMap)();i(o([s(t),c(t),u(t),l(t)]))}function o(e){return"?"+e.filter(function(e){return void 0!==e}).join("&")}function i(e){window.history&&window.history.replaceState&&window.history.replaceState({},"",e)}function s(e){var t=e.getCenter();return"center="+t.lat.toString()+","+t.lng.toString()}function c(e){return"zoom="+e.getZoom()}function u(e){var t=[],n={},r=(0,E.GetCurrentLayers)();e.eachLayer(function(e){var t=e.options;t&&t.layers&&(n[t.layers]=t.hasOwnProperty("opacity")?t.opacity:"1")});var a,o;for(o=0;o<r.length;o++)a=r[o],t.push(a),t.push(n[a]);return"layers="+t.join(",")}function l(e){var t=[];return e.eachLayer(function(e){e.options&&e.options.type===x.BASE_LAYER_TYPE&&t.push(e.options.id)}),"baselayers="+t.join(",")}function f(){var e=window.location.search;if(""!==e)return e=p(e),e=h(e),v(e),e}function p(e){return e=e.substring(1),e=d(e),e.split("&")}function d(e){return e.replace(/\%2[c|C]/g,",")}function h(e){var t,n,r={};for(n=0;n<e.length;n++)t=e[n].split("="),r[t[0]]=t[1];return r}function v(e){e.center&&(e.center=y(e.center)),e.layers&&(e.layers=m(e.layers)),e.baselayers&&(e.baselayers=b(e.baselayers))}function y(e){return e.split(",")}function m(e){var t,n,r={enabledLayers:[],opacityVals:{}};for(e=e.split(","),n=0;n<e.length;n+=2)t=e[n],r.enabledLayers.push(t),r.opacityVals[t]=e[n+1];return r}function b(e){return e.split(",")}function g(e){var t=f();t&&(t.center&&(e.map.initialCenter=t.center),t.zoom&&(e.map.initialZoom=t.zoom),t.layers&&w(t.layers,e),t.baselayers&&k(t.baselayers,e))}function w(e,t){var n=e.enabledLayers;t["active-layers"]=n;var r,a,o,i,s,c,u=t.layers;for(r=0;r<n.length;r++){c=!1,s=n[r];for(o in u){if(!u.hasOwnProperty(o))return;for(i=u[o],a=0;a<i.length;a++)if(i[a].id===s){i[a].opacity=e.opacityVals[s],c=!0;break}if(c)break}}}function k(e,t){var n,r,a=t.baselayers;for(r=0;r<a.length;r++)n=a[r],n.active=e.indexOf(n.id)!==-1}Object.defineProperty(t,"__esModule",{value:!0}),t.BindUpdateShareUrl=r,t.updateShareUrl=a,t.AddShareSettingsToConfig=g;var _=n(26),x=n(23),E=n(28)},function(e,t,n){"use strict";function r(){return d}function a(e,t){var n,r,a,o,s,c;if(t&&0!==t.length)for(n=0;n<t.length;n++){c=!1,s=t[n];for(a in e){if(!e.hasOwnProperty(a))return;for(o=e[a],r=0;r<o.length;r++)if(o[r].id===s){i(o[r]),c=!0;break}if(c)break}}}function o(e,t){e.active?c(e):i(e)}function i(e){var t=(0,f.GetMap)();e.active=!0,e.mapLayer=e.mapLayer||l(e),t.addLayer(e.mapLayer),s(e),(0,p.updateShareUrl)()}function s(e){d.push(e.id)}function c(e){var t=(0,f.GetMap)();e.active=!1,e.mapLayer&&t.hasLayer(e.mapLayer)&&t.removeLayer(e.mapLayer),u(e),(0,p.updateShareUrl)()}function u(e){var t=d.indexOf(e.id);t!==-1&&d.splice(t,1)}function l(e){return L.tileLayer.wms(e.url,{layers:e.id,transparent:e.transparent||!0,version:e.version||"1.3.0",crs:e.crs||L.CRS.EPSG4326,format:e.format||"image/png",opacity:e.opacity||"1"})}Object.defineProperty(t,"__esModule",{value:!0}),t.GetCurrentLayers=r,t.CreateDefaultLayers=a,t.toggleLayer=o,t.enableLayer=i,t.disableLayer=c;var f=n(26),p=n(27),d=[]},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,