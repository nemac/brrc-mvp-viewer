!function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),o=n(3),i=r(o),c=n(22),s=n(26),l=n(28),u=n(27),d=n(29),p=n(24),f=n(25),v=n(23),h=n(31),m=r(h),y=n(40),g=r(y),b=(n(39),function(e){(0,a.ParseConfig)(e,w),(0,l.SetupGraphs)(),(0,d.BindTabEvents)(),(0,f.BindCopyLinkEvents)(),(0,g.default)()}),w=function(e){(0,f.AddShareSettingsToConfig)(e);var t=(0,p.CreateMap)(e.map);(0,s.CreateBaseLayers)(t,e.baselayers),(0,v.CreateDefaultLayers)(e.layers,e["active-layers"]),(0,c.SetupPanel)(e.layers,e.layout),(0,i.default)(t),(0,m.default)(e.logo),e.tab&&(0,d.HandleTabChange)(e.tab),e.graph&&(0,l.HandleGraphTabChange)(e.graph),(0,u.BindGraphEvents)(t),(0,f.BindUpdateShareUrl)(t),(0,u.SetupPointsOfInterest)(t,e.pois),(0,f.updateShareUrl)()};window.Base=b,t.default={Base:b}},function(e,t){"use strict";function n(e,t){a(e,t)}function r(e){var t;return t=!window.XMLHttpRequest&&window.ActiveXObject?new window.ActiveXObject("MSXML2.XMLHTTP.3.0"):new XMLHttpRequest,t.onreadystatechange=function(){4===t.readyState&&e(t.response)},t}function a(e,t){var n=r(function(e){var n=o(e);t(n)});n.open("GET",e,!0),n.send(),console.log("hi")}function o(e){return e=JSON.parse(e),i(e),c(e),e}function i(e){e.map||(e.map={})}function c(e){var t,n,r=e.layers,a=e.mapserverUrl;e["active-layers"];for(var o in r){if(!r.hasOwnProperty(o))return;for(t=r[o],n=0;n<t.length;n++)l(t[n],a),s(t[n],e.defaultLayerOpacity)}}function s(e,t){e.opacity=e.opacity||t}function l(e,t){e.url=e.url||t}Object.defineProperty(t,"__esModule",{value:!0}),t.ParseConfig=n,t.GetAjaxObject=r},function(e,t,n){"use strict";function r(e){var t=new a.OpenStreetMapProvider,n=new a.GeoSearchControl({provider:t,showMarker:!1,autoComplete:!0,showPopup:!1});e.addControl(n);var r=n.searchElement.elements;L.DomEvent.on(r.container,"click",function(e){L.DomEvent.stopPropagation(e);for(var t=r.form.getElementsByClassName("results")[0].children,n=0;n<t.length;n++)e.target===t[n]&&r.container.classList.remove("active");ga("send","event",{eventCategory:"map",eventAction:"search",eventLabel:"click",nonInteraction:!1})}),L.DomEvent.on(r.container,"keydown",function(e){L.DomEvent.stopPropagation(e),13!=e.which&&13!=e.keyCode||(r.container.classList.remove("active"),ga("send","event",{eventCategory:"map",eventAction:"search address",eventLabel:e.target.value,nonInteraction:!1}))})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var a=n(4)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(5);Object.defineProperty(t,"GeoSearchControl",{enumerable:!0,get:function(){return r(a).default}});var o=n(13);Object.defineProperty(t,"SearchElement",{enumerable:!0,get:function(){return r(o).default}});var i=n(17);Object.defineProperty(t,"BingProvider",{enumerable:!0,get:function(){return r(i).default}});var c=n(19);Object.defineProperty(t,"EsriProvider",{enumerable:!0,get:function(){return r(c).default}});var s=n(20);Object.defineProperty(t,"GoogleProvider",{enumerable:!0,get:function(){return r(s).default}});var l=n(21);Object.defineProperty(t,"OpenStreetMapProvider",{enumerable:!0,get:function(){return r(l).default}});var u=n(18);Object.defineProperty(t,"Provider",{enumerable:!0,get:function(){return r(u).default}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(){if(!L||!L.Control||!L.Control.extend)throw new Error("Leaflet must be loaded before instantiating the GeoSearch control");for(var e=L.Control.extend(m),t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return new(Function.prototype.bind.apply(e,[null].concat(n)))}Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),i=(r(o),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e});t.default=a;var c=n(12),s=r(c),l=n(13),u=r(l),d=n(16),p=r(d),f=n(14),v=n(15),h=function(){return{position:"topleft",style:"button",showMarker:!0,showPopup:!1,marker:{icon:new L.Icon.Default,draggable:!1},maxMarkers:1,retainZoomLevel:!1,animateZoom:!0,searchLabel:"Enter address",notFoundMessage:"Sorry, that address could not be found.",messageHideDelay:3e3,zoomLevel:18,classNames:{container:"leaflet-bar leaflet-control leaflet-control-geosearch",button:"leaflet-bar-part leaflet-bar-part-single",msgbox:"leaflet-bar message",form:"",input:""},autoComplete:!0,autoCompleteDelay:250}},m={initialize:function(e){var t=this;this.markers=new L.FeatureGroup,this.options=i({},h(),e);var n=this.options,r=n.style,a=n.classNames,o=n.searchLabel,c=n.autoComplete,l=n.autoCompleteDelay;"button"!==r&&(this.options.classNames.container+=" "+e.style),this.searchElement=new u.default(i({},this.options,{handleSubmit:function(e){return t.onSubmit(e)}}));var d=this.searchElement.elements,v=d.container,m=d.form,y=d.input;v.addEventListener("dblclick",function(e){e.stopPropagation()});var g=(0,f.createElement)("a",a.button,v);g.title=o,g.href="#",g.addEventListener("click",function(e){t.onClick(e)},!1),c&&(this.resultList=new p.default({handleClick:function(e){var n=e.result;y.value=n.label,t.onSubmit({query:n.label})}}),m.appendChild(this.resultList.elements.container),y.addEventListener("keyup",(0,s.default)(function(e){return t.autoSearch(e)},l),!0),y.addEventListener("keydown",function(e){return t.selectResult(e)},!0),y.addEventListener("keydown",function(e){return t.clearResults(e)},!0)),this.elements={button:g}},onAdd:function(e){var t=this.options,n=t.showMarker,r=t.style;if(this.map=e,n&&this.markers.addTo(e),"bar"===r){var a=this.searchElement.elements.form,o=e.getContainer().querySelector(".leaflet-control-container"),i=(0,f.createElement)("div","leaflet-control-geosearch bar");i.appendChild(a),o.appendChild(i),this.elements.container=i}return this.searchElement.elements.container},onRemove:function(){var e=this.elements.container;return e&&e.remove(),this},onClick:function(e){e.preventDefault();var t=this.searchElement.elements,n=t.container,r=t.input;n.classList.contains("active")?(0,f.removeClassName)(n,"active"):((0,f.addClassName)(n,"active"),r.focus())},selectResult:function(e){if([v.ARROW_DOWN_KEY,v.ARROW_UP_KEY].includes(e.keyCode)){e.preventDefault();var t=this.searchElement.elements.input,n=this.resultList,r=this.resultList.count()-1,a="ArrowDown"===e.code?1+~~n.selected:~~n.selected-1,o=a<0?r:a>r?0:a,i=n.select(o);t.value=i.label}},clearResults:function(e){e.keyCode===v.ESCAPE_KEY&&this.resultList.clear()},autoSearch:function(e){return new Promise(function(t,n){var r,a,o;return v.SPECIAL_KEYS.includes(e.keyCode)?t():(r=e.target.value,a=this.options.provider,a.search({query:r}).then(function(e){return o=e,this.resultList.render(o),t()}.$asyncbind(this,n),n))}.$asyncbind(this))},onSubmit:function(e){return new Promise(function(t,n){var r,a;return r=this.options.provider,r.search(e).then(function(e){return a=e,a&&a.length>0&&this.showResult(a[0]),t()}.$asyncbind(this,n),n)}.$asyncbind(this))},showResult:function(e){var t=Object.keys(this.markers._layers);t.length>=this.options.maxMarkers&&this.markers.removeLayer(t[0]);var n=this.addMarker(e);this.centerMap(e),this.map.fireEvent("geosearch/showlocation",{location:e,marker:n})},addMarker:function(e){var t=this.options,n=t.marker,r=t.showPopup,a=new L.Marker([e.y,e.x],n);return a.bindPopup(e.label),this.markers.addLayer(a),r&&a.openPopup(),a},centerMap:function(e){var t=this.options,n=t.retainZoomLevel,r=t.animateZoom,a=new L.LatLngBounds(e.bounds),o=a.isValid()?a:this.markers.getBounds();!n&&a.isValid()?this.map.fitBounds(o,{animate:r}):this.map.setView(o.getCenter(),this.getZoom(),{animate:r})},getZoom:function(){var e=this.options,t=e.retainZoomLevel,n=e.zoomLevel;return t?this.map.getZoom():n}}},function(e,t,n){"use strict";function r(e,t){if(Function.prototype.$asyncspawn||Object.defineProperty(Function.prototype,"$asyncspawn",{value:r,enumerable:!1,configurable:!0,writable:!0}),this instanceof Function){var n=this;return new e(function(e,r){function a(t,n){var i;try{if(i=t.call(o,n),i.done){if(i.value!==e){if(i.value&&i.value===i.value.then)return i.value(e,r);e&&e(i.value),e=null}return}i.value.then?i.value.then(function(e){a(o.next,e)},function(e){a(o.throw,e)}):a(o.next,i.value)}catch(e){return r&&r(e),void(r=null)}}var o=n.call(t,e,r);a(o.next)})}}var a=function(e,t){for(var n=t.toString(),r="return "+n,a=n.match(/.*\(([^)]*)\)/)[1],o=/['"]!!!([^'"]*)['"]/g,i=[];;){var c=o.exec(r);if(!c)break;i.push(c)}return i.reverse().forEach(function(t){r=r.slice(0,t.index)+e[t[1]]+r.substr(t.index+t[0].length)}),r=r.replace(/\/\*[^*]*\*\//g," ").replace(/\s+/g," "),new Function(a,r)()}({zousan:n(7).toString(),thenable:n(11).toString()},function e(t,n){function r(){return a.apply(t,arguments)}Function.prototype.$asyncbind||Object.defineProperty(Function.prototype,"$asyncbind",{value:e,enumerable:!1,configurable:!0,writable:!0}),e.trampoline||(e.trampoline=function(e,t,n,r,a){return function o(i){for(;i;){if(i.then)return i=i.then(o,r),a?void 0:i;try{if(i.pop){if(i.length)return i.pop()?t.call(e):i;i=n}else i=i.call(e)}catch(e){return r(e)}}}}),e.LazyThenable||(e.LazyThenable="!!!thenable"(),e.EagerThenable=e.Thenable=(e.EagerThenableFactory="!!!zousan")());var a=this;switch(n){case!0:return new e.Thenable(r);case 0:return new e.LazyThenable(r);case void 0:return r.then=r,r;default:return function(){try{return a.apply(t,arguments)}catch(e){return n(e)}}}});a(),r(),e.exports={$asyncbind:a,$asyncspawn:r}},function(e,t,n){(function(t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){function a(e){if(e){var t=this;e(function(e){t.resolve(e)},function(e){t.reject(e)})}}function o(e,t){if("function"==typeof e.y)try{var n=e.y.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.resolve(t)}function i(e,t){if("function"==typeof e.n)try{var n=e.n.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.reject(t)}e=e||"object"===(void 0===t?"undefined":r(t))&&t.nextTick||"function"==typeof n&&n||function(e){setTimeout(e,0)};var c=function(){function t(){for(;n.length-r;){try{n[r]()}catch(e){}n[r++]=void 0,r===a&&(n.splice(0,a),r=0)}}var n=[],r=0,a=1024;return function(a){n.push(a),n.length-r==1&&e(t)}}();return a.prototype={resolve:function(e){if(void 0===this.state){if(e===this)return this.reject(new TypeError("Attempt to resolve promise with self"));var t=this;if(e&&("function"==typeof e||"object"===(void 0===e?"undefined":r(e))))try{var n=0,a=e.then;if("function"==typeof a)return void a.call(e,function(e){n++||t.resolve(e)},function(e){n++||t.reject(e)})}catch(e){return void(n||this.reject(e))}this.state=o,this.v=e,t.c&&c(function(){for(var n=0,r=t.c.length;n<r;n++)o(t.c[n],e)})}},reject:function(e){if(void 0===this.state){this.state=i,this.v=e;var t=this.c;t&&c(function(){for(var n=0,r=t.length;n<r;n++)i(t[n],e)})}},then:function(e,t){var n=new a,r={y:e,n:t,p:n};if(void 0===this.state)this.c?this.c.push(r):this.c=[r];else{var o=this.state,i=this.v;c(function(){o(r,i)})}return n}},a.resolve=function(e){if(e&&e instanceof a)return e;var t=new a;return t.resolve(e),t},a.reject=function(e){if(e&&e instanceof a)return e;var t=new a;return t.reject(e),t},a.version="2.3.3-nodent",a}}).call(t,n(8),n(9).setImmediate)},function(e,t){"use strict";function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function a(e){if(u===setTimeout)return setTimeout(e,0);if((u===n||!u)&&setTimeout)return u=setTimeout,setTimeout(e,0);try{return u(e,0)}catch(t){try{return u.call(null,e,0)}catch(t){return u.call(this,e,0)}}}function o(e){if(d===clearTimeout)return clearTimeout(e);if((d===r||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function i(){h&&f&&(h=!1,f.length?v=f.concat(v):m=-1,v.length&&c())}function c(){if(!h){var e=a(i);h=!0;for(var t=v.length;t;){for(f=v,v=[];++m<t;)f&&f[m].run();m=-1,t=v.length}f=null,h=!1,o(e)}}function s(e,t){this.fun=e,this.array=t}function l(){}var u,d,p=e.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:n}catch(e){u=n}try{d="function"==typeof clearTimeout?clearTimeout:r}catch(e){d=r}}();var f,v=[],h=!1,m=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];v.push(new s(e,t)),1!==v.length||h||a(c)},s.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=l,p.addListener=l,p.once=l,p.off=l,p.removeListener=l,p.removeAllListeners=l,p.emit=l,p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t,n){"use strict";function r(e,t){this._id=e,this._clearFn=t}var a=Function.prototype.apply;t.setTimeout=function(){return new r(a.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new r(a.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(10),t.setImmediate=setImmediate,t.clearImmediate=clearImmediate},function(e,t,n){(function(e,t){"use strict";!function(e,n){function r(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return l[s]=r,c(s),s++}function a(e){delete l[e]}function o(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}function i(e){if(u)setTimeout(i,0,e);else{var t=l[e];if(t){u=!0;try{o(t)}finally{a(e),u=!1}}}}if(!e.setImmediate){var c,s=1,l={},u=!1,d=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?function(){c=function(e){t.nextTick(function(){i(e)})}}():function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&i(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),c=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){i(e.data)},c=function(t){e.port2.postMessage(t)}}():d&&"onreadystatechange"in d.createElement("script")?function(){var e=d.documentElement;c=function(t){var n=d.createElement("script");n.onreadystatechange=function(){i(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():function(){c=function(e){setTimeout(i,0,e)}}(),p.setImmediate=r,p.clearImmediate=a}}("undefined"==typeof self?void 0===e?void 0:e:self)}).call(t,function(){return this}(),n(8))},function(e,t){"use strict";e.exports=function(){function e(e){return e&&e instanceof Object&&"function"==typeof e.then}function t(n,r,a){try{var o=a?a(r):r;if(n===o)return n.reject(new TypeError("Promise resolution loop"));e(o)?o.then(function(e){t(n,e)},function(e){n.reject(e)}):n.resolve(o)}catch(e){n.reject(e)}}function n(){}function r(e){}function a(e,t){this.resolve=e,this.reject=t}function o(r,a){var o=new n;try{this._resolver(function(n){return e(n)?n.then(r,a):t(o,n,r)},function(e){t(o,e,a)})}catch(e){t(o,e,a)}return o}function i(e){this._resolver=e,this.then=o}return n.prototype={resolve:r,reject:r,then:a},i.resolve=function(e){return i.isThenable(e)?e:{then:function(t){return t(e)}}},i.isThenable=e,i}},function(e,t){(function(t){"use strict";function n(e,t,n){function a(t){var n=h,r=m;return h=m=void 0,C=t,g=e.apply(r,n)}function o(e){return C=e,b=setTimeout(u,t),O?a(e):g}function c(e){var n=e-w,r=e-C,a=t-n;return _?k(a,y-r):a}function l(e){var n=e-w,r=e-C;return void 0===w||n>=t||n<0||_&&r>=y}function u(){var e=L();if(l(e))return d(e);b=setTimeout(u,c(e))}function d(e){return b=void 0,A&&h?a(e):(h=m=void 0,g)}function p(){void 0!==b&&clearTimeout(b),C=0,h=w=m=b=void 0}function f(){return void 0===b?g:d(L())}function v(){var e=L(),n=l(e);if(h=arguments,m=this,w=e,n){if(void 0===b)return o(w);if(_)return b=setTimeout(u,t),a(w)}return void 0===b&&(b=setTimeout(u,t)),g}var h,m,y,g,b,w,C=0,O=!1,_=!1,A=!0;if("function"!=typeof e)throw new TypeError(s);return t=i(t)||0,r(n)&&(O=!!n.leading,_="maxWait"in n,y=_?E(i(n.maxWait)||0,t):y,A="trailing"in n?!!n.trailing:A),v.cancel=p,v.flush=f,v}function r(e){var t=void 0===e?"undefined":c(e);return!!e&&("object"==t||"function"==t)}function a(e){return!!e&&"object"==(void 0===e?"undefined":c(e))}function o(e){return"symbol"==(void 0===e?"undefined":c(e))||a(e)&&w.call(e)==u}function i(e){if("number"==typeof e)return e;if(o(e))return l;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(d,"");var n=f.test(e);return n||v.test(e)?h(e.slice(2),n?2:8):p.test(e)?l:+e}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s="Expected a function",l=NaN,u="[object Symbol]",d=/^\s+|\s+$/g,p=/^[-+]0x[0-9a-f]+$/i,f=/^0b[01]+$/i,v=/^0o[0-7]+$/i,h=parseInt,m="object"==(void 0===t?"undefined":c(t))&&t&&t.Object===Object&&t,y="object"==("undefined"==typeof self?"undefined":c(self))&&self&&self.Object===Object&&self,g=m||y||Function("return this")(),b=Object.prototype,w=b.toString,E=Math.max,k=Math.min,L=function(){return g.Date.now()};e.exports=n}).call(t,function(){return this}())},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),o=(function(e){e&&e.__esModule?e:{default:e}}(a),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=n(14),c=n(15),s=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=n.handleSubmit,o=void 0===a?function(){}:a,c=n.searchLabel,s=void 0===c?"search":c,l=n.classNames,u=void 0===l?{}:l;r(this,e);var d=(0,i.createElement)("div",["geosearch",u.container].join(" ")),p=(0,i.createElement)("form",["",u.form].join(" "),d),f=(0,i.createElement)("input",["glass",u.input].join(" "),p);f.type="text",f.placeholder=s,f.addEventListener("input",function(e){t.onInput(e)},!1),f.addEventListener("keyup",function(e){t.onKeyUp(e)},!1),f.addEventListener("keypress",function(e){t.onKeyPress(e)},!1),f.addEventListener("focus",function(e){t.onFocus(e)},!1),f.addEventListener("blur",function(e){t.onBlur(e)},!1),this.elements={container:d,form:p,input:f},this.handleSubmit=o}return o(e,[{key:"onFocus",value:function(){(0,i.addClassName)(this.elements.form,"active")}},{key:"onBlur",value:function(){(0,i.removeClassName)(this.elements.form,"active")}},{key:"onSubmit",value:function(e){return new Promise(function(t,n){var r,a,o;return e.preventDefault(),e.stopPropagation(),r=this.elements,a=r.input,o=r.container,(0,i.removeClassName)(o,"error"),(0,i.addClassName)(o,"pending"),this.handleSubmit({query:a.value}).then(function(e){return(0,i.removeClassName)(o,"pending"),t()}.$asyncbind(this,n),n)}.$asyncbind(this))}},{key:"onInput",value:function(){var e=this.elements.container;this.hasError&&((0,i.removeClassName)(e,"error"),this.hasError=!1)}},{key:"onKeyUp",value:function(e){var t=this.elements,n=t.container,r=t.input;e.keyCode===c.ESCAPE_KEY&&((0,i.removeClassName)(n,"pending"),(0,i.removeClassName)(n,"active"),r.value="",document.body.focus(),document.body.blur())}},{key:"onKeyPress",value:function(e){e.keyCode===c.ENTER_KEY&&this.onSubmit(e)}},{key:"setQuery",value:function(e){this.elements.input.value=e}}]),e}();t.default=s},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.createElement=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=document.createElement(e);return r.className=t,n&&n.appendChild(r),r};t.createScriptElement=function(e,t){var r=n("script",null,document.body);return r.setAttribute("type","text/javascript"),new Promise(function(n){window[t]=function(e){r.remove(),delete window[t],n(e)},r.setAttribute("src",e)})},t.addClassName=function(e,t){e&&!e.classList.contains(t)&&e.classList.add(t)},t.removeClassName=function(e,t){e&&e.classList.contains(t)&&e.classList.remove(t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.ENTER_KEY=13,r=t.ESCAPE_KEY=27,a=t.ARROW_DOWN_KEY=40,o=t.ARROW_UP_KEY=38,i=t.ARROW_LEFT_KEY=37,c=t.ARROW_RIGHT_KEY=39;t.SPECIAL_KEYS=[n,r,a,o,i,c]},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(14),i=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.join(" ").trim()},c=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.handleClick,a=void 0===n?function(){}:n,c=t.classNames,l=void 0===c?{}:c;r(this,e),s.call(this),this.props={handleClick:a,classNames:l},this.selected=-1;var u=(0,o.createElement)("div",i("results",l.container)),d=(0,o.createElement)("div",i(l.item));u.addEventListener("click",this.onClick,!0),this.elements={container:u,resultItem:d}}return a(e,[{key:"render",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=this.elements,n=t.container,r=t.resultItem;this.clear(),e.forEach(function(e,t){var a=r.cloneNode(!0);a.setAttribute("data-key",t),a.innerHTML=e.label,n.appendChild(a)}),e.length>0&&(0,o.addClassName)(n,"active"),this.results=e}},{key:"select",value:function(e){var t=this.elements.container;return Array.from(t.children).forEach(function(t,n){return n===e?(0,o.addClassName)(t,"active"):(0,o.removeClassName)(t,"active")}),this.selected=e,this.results[e]}},{key:"count",value:function(){return this.results.length}},{key:"clear",value:function(){var e=this.elements.container;for(this.selected=-1;e.lastChild;)e.removeChild(e.lastChild);(0,o.removeClassName)(e,"active")}}]),e}(),s=function(){var e=this;this.onClick=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.target,r=e.props.handleClick,a=e.elements.container;if(n.parentNode===a&&n.hasAttribute("data-key")){var o=n.getAttribute("data-key");r({result:e.results[o]})}}};t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":c(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":c(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var s=n(6),l=(r(s),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}),u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),d=n(18),p=r(d),f=n(14),v=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),u(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=e.jsonp,a=this.options.params;return n+"//dev.virtualearth.net/REST/v1/Locations?"+this.getParamString(l({},a,{query:t,jsonp:r}))}},{key:"parse",value:function(e){var t=e.data;return 0===t.resourceSets.length?[]:t.resourceSets[0].resources.map(function(e){return{x:e.point.coordinates[1],y:e.point.coordinates[0],label:e.address.formattedAddress,bounds:[[e.bbox[0],e.bbox[1]],[e.bbox[2],e.bbox[3]]],raw:e}})}},{key:"search",value:function(e){return new Promise(function(t,n){var r,a,o,i,c;return r=e.query,a=~location.protocol.indexOf("http")?location.protocol:"https:",o="BING_JSONP_CB_"+Date.now(),i=this.endpoint({query:r,protocol:a,jsonp:o}),(0,f.createScriptElement)(i,o).then(function(e){return c=e,t(this.parse({data:c}))}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),t}(p.default);t.default=v},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),o=(function(e){e&&e.__esModule?e:{default:e}}(a),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.options=t}return o(e,[{key:"getParamString",value:function(e){return Object.keys(e).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}},{key:"search",value:function(e){return new Promise(function(t,n){var r,a,o,i,c;return r=e.query,a=~location.protocol.indexOf("http")?location.protocol:"https:",o=this.endpoint({query:r,protocol:a}),fetch(o).then(function(e){return i=e,i.json().then(function(e){return c=e,t(this.parse({data:c}))}.$asyncbind(this,n),n)}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),e}();t.default=i},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(18),u=function(e){return e&&e.__esModule?e:{default:e}}(l),d=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),s(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find?"+this.getParamString(c({},r,{f:"json",text:t}))}},{key:"parse",value:function(e){return e.data.locations.map(function(e){return{x:e.feature.geometry.x,y:e.feature.geometry.y,label:e.name,bounds:[[e.extent.ymin,e.extent.xmin],[e.extent.ymax,e.extent.xmax]],raw:e}})}}]),t}(u.default);t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(18),u=function(e){return e&&e.__esModule?e:{default:e}}(l),d=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),s(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params,a=this.getParamString(c({},r,{address:t}));return(r&&r.key?"https:":n)+"//maps.googleapis.com/maps/api/geocode/json?"+a}},{key:"parse",value:function(e){return e.data.results.map(function(e){return{x:e.geometry.location.lng,y:e.geometry.location.lat,label:e.formatted_address,bounds:[[e.geometry.viewport.southwest.lat,e.geometry.viewport.southwest.lng],[e.geometry.viewport.northeast.lat,e.geometry.viewport.northeast.lng]],raw:e}})}}]),t}(u.default);t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(18),u=function(e){return e&&e.__esModule?e:{default:e}}(l),d=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),s(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//nominatim.openstreetmap.org/search?"+this.getParamString(c({},r,{format:"json",q:t}))}},{key:"parse",value:function(e){return e.data.map(function(e){return{x:e.lon,y:e.lat,label:e.display_name,bounds:[[parseFloat(e.boundingbox[0]),parseFloat(e.boundingbox[2])],[parseFloat(e.boundingbox[1]),parseFloat(e.boundingbox[3])]],raw:e}})}}]),t}(u.default);t.default=d},function(e,t,n){"use strict";function r(){return E.filter(function(e){return e.active})}function a(e,t){E=t["layer-groups-order"],p(d(t["layer-groups-order"]),e),c(),i()}function o(){var e=window.navigator.userAgent;return e.indexOf("MSIE")>-1||e.indexOf("rv:11.0")>-1}function i(){document.getElementById("right-panel").onscroll=l}function c(){if(!o()){var e=d3.select("#right-panel-drag-overlay");e.style("cursor","ew-resize"),e.call(d3.drag().on("drag",function(){s.call(this)}))}}function s(){l(),u()}function l(){var e,t=d3.select("#right-panel"),n=t.property("offsetHeight"),r=document.getElementById("right-panel-drag-overlay"),a=document.getElementById("right-panel-header");if(t.classed("graphs-active")){var o=document.getElementById("graph-list");e=a.scrollHeight+o.scrollHeight+700}else{var i=document.getElementById("layer-list");e=a.scrollHeight+i.scrollHeight}e=e>n?e+"px":null,r.style.height=e}function u(){var e=d3.select("#right-panel"),t=+e.style("min-width").slice(0,-2),n=e.property("clientWidth"),r=document.getElementById("wrapper"),a=r.clientWidth,o=document.getElementById("map-wrapper"),i=d3.event.sourceEvent.x,c=a-i-n,s=n+c;s=s<t?t:s>a?a:s,o.style.paddingRight=s+"px",e.style("width",s+"px")}function d(e){return d3.select("#layer-list").selectAll(".layer-group-wrapper").data(e).enter().append("div").attr("class","layer-group-wrapper").attr("id",function(e){return e.id}).classed("active",function(e){return e.active}).each(function(e){d3.select(this).append("div").attr("class","layer-group-btn btn").on("click",function(e){ga("send","event",{eventCategory:"layer list",eventAction:"toggle "+!e.active,eventLabel:e.name,nonInteraction:!1}),e.active=!e.active,d3.select(this.parentNode).classed("active",function(){return e.active}),l(),(0,w.updateShareUrl)()}).text(e.name)}).append("div").attr("class","layer-group")}function p(e,t){e.selectAll(".layer-select").data(function(e){return t[e.id]}).enter().append("div").attr("class","layer-select").each(function(e){var t=(this.parentNode.parentNode.id,d3.select(this));f(e,t),v(e,t),h(e,t),t.node().appendChild(m(e))})}function f(e,t){t.append("input").attr("type","checkbox").attr("id",function(e){return e.id}).attr("checked",function(e){return e.active?"checked":null}).on("click",function(e){if((0,g.toggleLayer)(e),t.select(".layer-tools-wrapper").classed("active",e.active),e.active){var n=t.select(".opacity-slider-handle").node();(0,b.setOpacitySliderPosition)(e,n,e.opacitiy)}})}function v(e,t){t.append("div").attr("class","layer-label-wrapper").append("label").attr("for",function(e){return e.id}).attr("class","layer-label").html(function(e){return e.name})}function h(e,t){e.info&&""!==e.info&&(t.append("div").attr("class","layer-info-btn-wrapper").on("click",function(){d3.select(this.parentNode).select(".layer-info-wrapper").classed("active",function(){return ga("send","event",{eventCategory:"layer info",eventAction:"clicked",eventLabel:e.name+" "+!d3.select(this).classed("active"),nonInteraction:!1}),!d3.select(this).classed("active")})}).append("img").attr("class","layer-info-icon").attr("src","imgs/more-info-icon-64x64.png").attr("alt","Read more about the "+e.name+" layer").attr("title","Read more about the "+e.name+" layer"),t.append("div").attr("class","layer-info-wrapper").text(function(e){return e.info}))}function m(e,t){var n=document.createElement("div");n.classList.add("layer-tools-wrapper"),e.active&&n.classList.add("active");var r=(0,b.makeOpacitySlider)(e),a=y(e);return n.appendChild(a),n.appendChild(r),n}function y(e,t){var n=document.createElement("div"),r=document.createElement("img");return n.classList.add("legend-wrapper"),r.setAttribute("src",e.legend),n.appendChild(r),n}Object.defineProperty(t,"__esModule",{value:!0}),t.GetActiveLayerGroups=r,t.SetupPanel=a,t.updatePanelDragOverlayHeight=l;var g=n(23),b=n(30),w=n(25),E=[]},function(e,t,n){"use strict";function r(){return h}function a(e,t){var n,r,a,o,c,s;if(t&&0!==t.length)for(n=0;n<t.length;n++){s=!1,c=t[n];for(a in e){if(!e.hasOwnProperty(a))return;for(o=e[a],r=0;r<o.length;r++)if(o[r].id===c){i(o[r]),s=!0;break}if(s)break}}}function o(e){e.active?(l(e),ga("send","event",{eventCategory:"layer",eventAction:"toggle off",eventLabel:e.name,nonInteraction:!1})):(i(e),ga("send","event",{eventCategory:"layer",eventAction:"toggle on",eventLabel:e.name,nonInteraction:!1}))}function i(e){var t=(0,f.GetMap)();e.active=!0,e.mapLayer=e.mapLayer||p(e),t.addLayer(e.mapLayer),s(e),c(),(0,v.updateShareUrl)()}function c(){var e,t,n;for(t=0,n=m.length;t<n;t++)e=m[t],"overlay"===e.type&&e.mapLayer.bringToFront()}function s(e){h.push(e.id),m.push(e)}function l(e){var t=(0,f.GetMap)();e.active=!1,e.mapLayer&&t.hasLayer(e.mapLayer)&&t.removeLayer(e.mapLayer),u(e),(0,v.updateShareUrl)()}function u(e){var t=h.indexOf(e.id);t!==-1&&(h.splice(t,1),m.splice(t,1))}function d(e,t){e.opacity=t,e.mapLayer.setOpacity(t)}function p(e){return L.tileLayer.wms(e.url,{layers:e.id,transparent:e.transparent||!0,version:e.version||"1.3.0",crs:e.crs||L.CRS.EPSG900913,format:e.format||"image/png",opacity:e.opacity||.75,tileSize:e.tileSize||document.getElementById("map").clientWidth})}Object.defineProperty(t,"__esModule",{value:!0}),t.GetCurrentLayers=r,t.CreateDefaultLayers=a,t.toggleLayer=o,t.enableLayer=i,t.disableLayer=l,t.updateLayerOpacity=d;var f=n(24),v=n(25),h=[],m=[]},function(e,t){"use strict";function n(e){var t=e.id||"map",n=e.options||{scrollWheelZoom:!1},r=e.center||["38.5","-81"],o=e.zoom||6;return a=L.map(t,n).setView(r,o),L.control.attribution().addTo(a),document.getElementsByClassName("leaflet-control-zoom-in")[0].addEventListener("click",function(){ga("send","event",{eventCategory:"map",eventAction:"click button",eventLabel:"zoom in",nonInteraction:!1})}),document.getElementsByClassName("leaflet-control-zoom-out")[0].addEventListener("click",function(){ga("send","event",{eventCategory:"map",eventAction:"click button",eventLabel:"zoom out",nonInteraction:!1})}),a.on("dragend",function(e){ga("send","event",{eventCategory:"map",eventAction:"drag",eventLabel:JSON.stringify(a.getBounds()),nonInteraction:!0})}),a.on("zoomend",function(e){ga("send","event",{eventCategory:"map",eventAction:"zoom",eventLabel:JSON.stringify(a.getBounds()),nonInteraction:!0})}),a}function r(){return a}Object.defineProperty(t,"__esModule",{value:!0}),t.CreateMap=n,t.GetMap=r;var a},function(e,t,n){"use strict";function r(e){e.on("moveend",a)}function a(e){var t=(0,Y.GetMap)();c(i([b(t),w(t),E(t),L(),k(t),C(),O(),_()])),s(),g()}function o(e){var t=A();t&&(t.center&&(e.map.center=t.center),t.zoom&&(e.map.zoom=t.zoom),t.layers&&D(t.layers,e),t.baselayers&&F(t.baselayers,e),t.pois&&U(t.pois,e),t.tab&&(e.tab=t.tab),t.graph&&(e.graph=t.graph),t.layerGroups&&(e.layerGroups=G(t.layerGroups,e)))}function i(e){return"?"+e.filter(function(e){return void 0!==e}).join("&")}function c(e){window.history&&window.history.replaceState&&window.history.replaceState({},"",e)}function s(){var e=window.location.href;document.getElementById("shareurl-link-url").setAttribute("value",e)}function l(){d3.select(document).on("click",u),d3.select(".shareurl-link a").on("click",p),d3.select(".shareurl-link-url").on("click",v),d3.select(".shareurl-link-popup-remover").on("click",f)}function u(){var e=d3.event,t=[];t=d(e.target);var n,r,a=!0;for(n=0,r=t.length;n<r;n++)try{if(t[n].classList.contains("shareurl-link-popup")||t[n].classList.contains("shareurl-link")){a=!1;break}}catch(e){}if(a){m(document.getElementsByClassName("shareurl-link-popup").item(0))}}function d(e){for(var t=[];e&&e.parentNode;)t.push(e),e=e.parentNode;return t}function p(){var e=document.getElementsByClassName("shareurl-link-popup").item(0);d3.select(e).classed("active")?m(e):h(e)}function f(){m(document.getElementsByClassName("shareurl-link-popup").item(0))}function v(){y()}function h(e){e.classList.toggle("active"),y(),ga("send","event",{eventCategory:"shareurl",eventAction:"open",eventLabel:document.getElementById("shareurl-link-url").getAttribute("value"),nonInteraction:!1})}function m(e){ga("send","event",{eventCategory:"shareurl",eventAction:"close",eventLabel:document.getElementById("shareurl-link-url").getAttribute("value"),nonInteraction:!1}),e.classList.remove("active")}function y(){var e=document.getElementById("shareurl-link-url");e.focus(),e.setSelectionRange(0,e.value.length)}function g(){var e,t,n,r,a=P(window.location.href),o=document.getElementsByClassName("shareurl-social");for(n=0,r=o.length;n<r;n++)e=o[n],t=e.getAttribute("data-baseurl")+a,e.setAttribute("href",t),e.addEventListener("click",function(){ga("send","event",{eventCategory:"shareurl",eventAction:this.getAttribute("aria-label"),eventLabel:this.href,nonInteraction:!1})})}function b(e){var t=e.getCenter();return"center="+t.lat.toString()+","+t.lng.toString()}function w(e){return"zoom="+e.getZoom()}function E(e){var t=[],n={},r=(0,H.GetCurrentLayers)();e.eachLayer(function(e){var t=e.options;t&&t.layers&&(n[t.layers]=t.hasOwnProperty("opacity")?t.opacity:"1")});var a,o;for(o=0;o<r.length;o++)a=r[o],t.push(a),t.push(n[a]);return"layers="+t.join(",")}function k(e){var t=[];return e.eachLayer(function(e){e.options&&e.options.type===z.BASE_LAYER_TYPE&&t.push(e.options.id)}),"baselayers="+t.join(",")}function L(){return"layerGroups="+(0,K.GetActiveLayerGroups)().map(function(e){return e.id}).join(",")}function C(){var e=(0,$.GetAllPointsOfInterest)();if(e.length){var t="pois=";return e.forEach(function(e){t+=e.lat+","+e.lng+";"}),t}}function O(){return"tab="+d3.select(".panel-top-btn.active").attr("data-active")}function _(){return"graph="+d3.select(".graph-type-btn.active").attr("data-type")}function A(){var e=window.location.search;if(""!==e)return e=S(e),e=x(e),I(e),e}function S(e){return e=e.substring(1),e=j(e),e.split("&")}function P(e){return e.replace(/\:/g,"%3A").replace(/\;/g,"%3B").replace(/\//g,"%2F").replace(/\,/g,"%2C").replace(/\&/g,"%26")}function j(e){return e.replace(/\%2[c|C]/g,",").replace(/\%3[b|B]/g,";")}function x(e){var t,n,r={};for(n=0;n<e.length;n++)t=e[n].split("="),r[t[0]]=t[1];return r}function I(e){e.center&&(e.center=T(e.center)),e.layers&&(e.layers=M(e.layers)),e.baselayers&&(e.baselayers=B(e.baselayers)),e.pois&&(e.pois=N(e.pois)),e.layerGroups&&(e.layerGroups=R(e.layerGroups))}function T(e){return e.split(",")}function M(e){var t,n,r={enabledLayers:[],opacityVals:{}};for(e=e.split(","),n=0;n<e.length;n+=2)t=e[n],r.enabledLayers.push(t),r.opacityVals[t]=e[n+1];return r}function B(e){return e.split(",")}function N(e){return e.split(";").filter(function(e){return""!==e}).map(function(e){return e=e.split(","),{lat:e[0],lng:e[1]}})}function R(e){return e.split(",")}function G(e,t){t.layout["layer-groups-order"].forEach(function(t){t.active=e.filter(function(e){return e===t.id}).length>0})}function D(e,t){var n=e.enabledLayers;t["active-layers"]=n;var r,a,o,i,c,s,l=t.layers;for(r=0;r<n.length;r++){s=!1,c=n[r];for(o in l){if(!l.hasOwnProperty(o))return;for(i=l[o],a=0;a<i.length;a++)if(i[a].id===c){i[a].opacity=e.opacityVals[c],s=!0;break}if(s)break}}}function F(e,t){var n,r,a=t.baselayers;for(r=0;r<a.length;r++)n=a[r],n.active=e.indexOf(n.id)!==-1}function U(e,t){t.pois=e}Object.defineProperty(t,"__esModule",{value:!0}),t.BindUpdateShareUrl=r,t.updateShareUrl=a,t.AddShareSettingsToConfig=o,t.BindCopyLinkEvents=l;var Y=n(24),z=n(26),H=n(23),$=n(27),K=n(22)},function(e,t,n){"use strict";function r(e,t){t=t||[{id:"carto-light-default",url:"http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attributions">CARTO</a>'}],d=t;var n,r,o;for(n=0;n<t.length;n++)o=t[n],o.active&&(r=l(o),o.layer=r,r.addTo(e));a(t)}function a(e){var t=document.createElement("div");t.className="baselayer-ui";for(var n,r,a,i,c=0,s=e.length;c<s;c++)i=e[c],i.hasOwnProperty("image")&&(n=document.createElement("div"),n.setAttribute("data-layer",i.id),r=document.createElement("img"),r.setAttribute("src",i.image),r.setAttribute("alt",i.label),r.setAttribute("title",i.label),a=document.createElement("div"),a.textContent=i.label,n.appendChild(r),n.appendChild(a),n.addEventListener("click",o),d3.select(n).classed("base-selector",!0).classed("active",i.active),t.appendChild(n));document.getElementsByClassName("leaflet-bottom leaflet-left")[0].appendChild(t)}function o(e){e.stopPropagation();var t=this.getAttribute("data-layer");i(this),c(),s(t),ga("send","event",{eventCategory:"map",eventAction:"change base layer",eventLabel:t,nonInteraction:!1}),(0,f.updateShareUrl)()}function i(e){d3.select(".base-selector.active").classed("active",!1),d3.select(e).classed("active",!0)}function c(){var e=(0,p.GetMap)();e.eachLayer(function(t){t.options.type===v&&e.removeLayer(t)})}function s(e){for(var t,n=(0,p.GetMap)(),r=0,a=d.length;r<a;r++)if(t=d[r],t.id===e){t.layer||(t.layer=l(t)),t.layer.addTo(n),t.layer.bringToBack();break}}function l(e){return L.tileLayer(e.url,u(e))}function u(e){var t={};return e.id&&(t.id=e.id),e.attribution&&(t.attribution=e.attribution),e.subdomains&&(t.subdomains=e.subdomains),t.type=v,t}Object.defineProperty(t,"__esModule",{value:!0}),t.BASE_LAYER_TYPE=void 0,t.CreateBaseLayers=r;var d,p=n(24),f=n(25),v=t.BASE_LAYER_TYPE="baselayer"},function(e,t,n){"use strict";function r(e){e.on("click",a)}function a(e){p(this,s(e.latlng.lat,e.latlng.lng)),(0,b.updateShareUrl)(),ga("send","event",{eventCategory:"map",eventAction:"click",eventLabel:"add point",nonInteraction:!1})}function o(e,t,n,r){var a=i();t.getElementsByClassName("graph-elem-header")[0].appendChild(a),d3.select(a).on("click",function(){ga("send","event",{eventCategory:"graph",eventAction:"click",eventLabel:"remove",nonInteraction:!1}),d(r),m(e,t,n),(0,k.updatePanelDragOverlayHeight)(),(0,b.updateShareUrl)()})}function i(){var e=document.createElement("button");return e.className="remove-graph",e.innerText=String.fromCharCode("10005"),e.setAttribute("title","Remove graph"),e}function c(){return L}function s(e,t){var n={lat:e,lng:t};return L.push(n),n}function l(e,t){u(t);var n=c(),e=(0,w.GetMap)();n.forEach(function(t){p(e,t)})}function u(e){Array.prototype.push.apply(L,e)}function d(e){L=L.filter(function(t){return!(t===e)})}function p(e,t){var n=(0,y.createGraphDiv)(t),r=(0,g.createMarker)(t.lat,t.lng);t.graphDiv=n,t.marker=r,r.addTo(e),o(e,n,r,t),d3.select(n).on("mouseenter",function(e){r.setIcon((0,g.getIcon)("hover"))}),d3.select(n).on("mouseleave",function(){r.setIcon((0,g.getIcon)("graph"))}),r.on("click dblclick",function(e){f(e,t)}),r.on("mouseover",function(e){r.setIcon((0,g.getIcon)("hover"))}),r.on("mouseout",function(e){r.setIcon((0,g.getIcon)("graph")),t.graphDiv.getElementsByClassName("pan-to-marker-btn")[0].classList.remove("animate")})}function f(e,t){e.originalEvent.stopPropagation(),(0,E.HandleTabChange)("graphs-active"),h(t),v(t)}function v(e){e.graphDiv.getElementsByClassName("pan-to-marker-btn")[0].classList.add("animate")}function h(e){document.getElementById("right-panel").scrollTop=e.graphDiv.offsetTop}function m(e,t,n){document.getElementById("graph-list").removeChild(t),e.removeLayer(n),(0,b.updateShareUrl)()}Object.defineProperty(t,"__esModule",{value:!0}),t.BindGraphEvents=r,t.createGraphRemover=o,t.GetAllPointsOfInterest=c,t.AddPointOfInterestToTracker=s,t.SetupPointsOfInterest=l,t.AddMultiplePointsOfInterest=u,t.RemovePointOfInterestFromTracker=d,t.SetupPointOfInterestUI=p,t.RemovePointOfInterestUI=m;var y=n(28),g=n(41),b=n(25),w=n(24),E=n(29),k=n(22),L=[]},function(e,t,n){"use strict";function r(){d3.selectAll(".graph-type-btn").on("click",u),a(),Y=d3.tip().attr("class","d3-tip").html(function(e){return e})}function a(){Date.prototype.isLeapYear=function(){var e=this.getFullYear();return 0==(3&e)&&(e%100!=0||e%400==0)},Date.prototype.getDOY=function(){var e=[0,31,59,90,120,151,181,212,243,273,304,334],t=this.getMonth(),n=this.getDate(),r=e[t]+n;return t>1&&this.isLeapYear()&&r++,r}}function o(e,t,n,r){r=r.replace(/\[|\]|\'/g,"").split(", "),g(r,e,t,n),(0,G.updatePanelDragOverlayHeight)()}function i(e,t,n){var r="https://fcav-ndvi.nemac.org/landdat_product.cgi?args="+t+","+e,a=(0,U.GetAjaxObject)(function(r){o(n,e,t,r)});a.open("GET",r),a.send()}function c(e){var t;for(t=0;t<e.length;t++)e[t]=e[t].split(",");return e}function s(e){var t,n,r,a,o={};for(o.keys=[],r=0;r<e.length;r++)t=e[r],n=t[0].substring(0,4),o.hasOwnProperty(n)||(o[n]=[],o.keys.push(n)),o[n].push(t);var i=[];for(r=0;r<o.keys.length;r++)n=o.keys[r],46!==o[n].length&&i.push(n);for(r=0;r<i.length;r++)n=i[r],delete o[n],o.keys.splice(o.keys.indexOf(n),1);var c,s;for(o.means=[],r=0;r<46;r++){for(c=[],a=r;a<e.length;a+=46)c.push(parseInt(e[a][1],10));s=l(c),o.means.push(s)}return o}function l(e){var t,n,r=0;for(t=0,n=e.length;t<n;t++)r+=e[t];return(r/n).toString()}function u(){var e=this.getAttribute("data-type"),t=document.getElementsByClassName("graph-type-btn active")[0].getAttribute("data-type");e!==t&&(ga("send","event",{eventCategory:"graph type",eventAction:"click",eventLabel:e,nonInteraction:!1}),d(e))}function d(e){if(!p())var t=document.getElementsByClassName("graph-elem")[0].scrollHeight,n=document.getElementsByClassName("graph-type-info active")[0].scrollHeight,r=document.getElementById("right-panel").scrollTop;v(),h(e),p()||f(n,t,r),(0,D.updateShareUrl)()}function p(){return void 0===document.getElementsByClassName("graph-elem")[0]}function f(e,t,n){var r=document.getElementsByClassName("graph-type-info active")[0].scrollHeight,a=document.getElementsByClassName("graph-elem")[0].scrollHeight,o=a/t,i=r+(n-e)*o;document.getElementById("right-panel").scrollTop=i}function v(){var e=document.getElementsByClassName("graph-type-btn active")[0],t="graph-"+e.getAttribute("data-type");e.classList.remove("active"),document.getElementById("graph-list").classList.remove(t)}function h(e){d3.select(".graph-type-btn[data-type='"+e+"']").classed("active",!0),document.getElementById("graph-list").classList.add("graph-"+e),d3.selectAll(".graph-type-info").classed("active",function(){return e===this.id.split("-")[0]})}function m(e){var t=b(e.lat,3),n=b(e.lng,3),r=document.createElement("div"),a=document.createElement("div");r.appendChild(a);var o=y(e),c=document.createTextNode("Lat: "+t+", Long: "+n),s=document.createElement("div");return s.className="graph-lat-lon",s.appendChild(c),a.appendChild(o),a.appendChild(s),r.classList.add("graph-elem"),a.classList.add("graph-elem-header"),i(e.lat,e.lng,r),r}function y(e){var t=document.createElement("button");return t.classList.add("btn"),t.classList.add("pan-to-marker-btn"),t.textContent="Show On Map",t.onclick=function(e,t){(0,F.GetMap)().panTo([e.lat,e.lng]),ga("send","event",{eventCategory:"graph",eventAction:"click",eventLabel:'{"show on map":{"lat":'+e.lat+',"long":'+e.lng+"}}",nonInteraction:!1})}.bind(t,e),t}function g(e,t,n,r){e=c(e);var a=s(e);w(e,t,a.means),E(a,t,n,r),k(a,t,n,r),document.getElementById("graph-list").appendChild(t)}function b(e,t){return Math.round(e*Math.pow(10,t))/Math.pow(10,t)}function w(e,t,n){var r={top:30,right:20,bottom:30,left:29},a=580-r.left-r.right,o=270-r.top-r.bottom,i=d3.scaleTime().range([0,a]).domain([T(e[0][0]),T(e[e.length-1][0])]),c=d3.scaleLinear().range([o,0]).domain([0,100]),s=d3.axisBottom(i).ticks(16).tickFormat(function(e){return e.getFullYear()}),l=d3.axisLeft(c).ticks(6),u=d3.line().x(function(e){return i(T(e[0]))}).y(function(e){return c(e[1])}),d=d3.select(t).append("div").classed("timeseries-graph",!0),p=d.append("svg").attr("height",o+r.top+r.bottom).attr("viewBox",function(){return"0 0 "+(a+r.left+r.right)+" "+(o+r.top+r.bottom)}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate("+r.left+","+r.top+")");p.call(Y),O(e,u,p),p.append("g").attr("class","x axis").attr("transform","translate(0,"+o+")").call(s),p.append("g").attr("class","y axis").call(l),A(e,u,p,n)}function E(e,t,n,r){function a(e){return z[(e-15)/30]}var o={},i={top:30,right:20,bottom:30,left:29},c=500-i.left-i.right,s=270-i.top-i.bottom,l=e.means,u=d3.scaleLinear().range([0,c]).domain([0,365]),d=d3.scaleLinear().range([s,0]).domain([0,100]),p=d3.axisBottom(u).ticks(11).tickValues([15,45,75,105,135,165,195,225,255,285,315,345]).tickFormat(a),f=d3.axisLeft(d).ticks(6),v=d3.line().x(function(e,t){return u(Array.isArray(e)?M(e[0]):8*t+3)}).y(function(e){return d(Array.isArray(e)?e[1]:e)}),h=d3.select(t).append("div").classed("overlapping-graph",!0),m=h.append("svg").attr("viewBox",function(){return"0 0 "+(c+i.left+i.right)+" "+(s+i.top+i.bottom)}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate("+i.left+","+i.top+")");m.call(Y),m.append("g").attr("class","x axis").attr("transform","translate(0,"+s+")").call(p),m.append("g").attr("class","y axis").call(f),o.means={path:O(e.means,v,m)},o[2015]={path:O(e[2015],v,m)},o.means.points=A(e.means,v,m,l),o[2015].points=A(e[2015],v,m,l);var y=h.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){j(y,t,"overlapping","2015",o,e,v,m,l,n,r)}),j(y,"means","overlapping","means",o,e,v,m,l,n,r)}function k(e,t,n,r){var a=Math.min(490,490)/2-30,o=e.means,i=L(e),c=C(o,i[1][0]),s=d3.scaleLinear().domain([0,100]).range([0,a]),l=d3.radialLine().radius(function(e){return s(Array.isArray(e)?e[1]:e)}).angle(function(e,t){return((Array.isArray(e)?M(e[0]):8*t+3)-1)%365/365*(2*Math.PI)}),u=d3.select(t).append("div").classed("polar-graph",!0),d=u.append("svg").attr("viewBox",function(){return"0 0 490 490"}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(245,245)");d.call(Y);var p=d.append("g").attr("class","r axis").selectAll("g").data(s.ticks(5).slice(1)).enter().append("g");p.append("circle").attr("r",s),p.append("text").attr("y",function(e){return-s(e)-4}).attr("transform","rotate(15)").style("text-anchor","middle").text(function(e){return e});var f=d.append("g").attr("class","a axis").selectAll("g").data(d3.range(0,360,30)).enter().append("g").attr("transform",function(e){return"rotate("+(e-90)+")"});f.append("line").attr("x2",a),f.append("text").attr("x",a+6).attr("dy",".35em").style("text-anchor",function(e){return e<360&&e>180?"end":null}).attr("transform",function(e){return e<360&&e>180?"rotate(180 "+(a+6)+",0)":null}).text(function(e){return z[e/30]});var v=d.append("g").selectAll("g").data(c).enter().append("g").attr("transform",function(e){return"rotate("+(e.data[1][0]-90)+")"});v.append("line").attr("class","line").attr("x2",a),v.append("text").attr("x",function(e){var t=e.data[1][0];return t<360&&t>180?a+30:a-30}).attr("y",function(e){return e.data[1][0]%365/365*(2*Math.PI)+6}).attr("dy",".35em").style("text-anchor",function(e){var t=e.data[1][0];return t<360&&t>180?"middle":null}).attr("transform",function(e){var t=e.data[1][0];return t<360&&t>180?"rotate(180 "+(a+6)+",0)":null}).text(function(e){return e.label});var h=i[1][0];_([[h,100],[(h+182.5)%365,100]],l,d).classed("growing-season-line","true"),_(i,l,d).classed("center-line","true"),d.selectAll("point").data([i[1]]).enter().append("circle").attr("class","center").attr("r",4).attr("transform",function(e){return"translate("+l([e]).slice(1).slice(0,-1)+")"}).attr("stroke","#000").attr("fill","#ea0c48").on("mouseover",function(e){Y.show("Center: "+String(e[1]).substring(0,7)),this.setAttribute("r",5)}).on("mouseout",function(e){Y.hide(),this.setAttribute("r",4)});var m={};m.means={path:_(o,l,d)},m[2015]={path:_(e[2015],l,d)},m.means.points=A(o,l,d,o),m[2015].points=A(e[2015],l,d,o);var y=u.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){j(y,t,"polar","2015",m,e,l,d,o,n,r)}),j(y,"means","polar","means",m,e,l,d,o,n,r);var g=y.append("div").classed("threshold-checkbox",!0);g.append("input").attr("type","checkbox").attr("id","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")).property("checked",!0).on("change",function(e){v.style("opacity",this.checked?1:0),x("threshold polar timeseries "+(this.checked?"off":"on"))}),g.append("label").text("Thresholds").attr("for","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".",""))}function L(e){var t,n,r,a,o,i=0,c=0;for(r=46,t=0;t<e.keys.length;t++)if(a=e[e.keys[t]],a.length===r){for(o=0,n=0;n<r/2;n++)o+=a[n][1]-a[n+23][1];o/=23,i+=o}else c++;i=Math.abs(i)/(e.keys.length-c);var s,l,u,d,p,f=1e6,v=0,h=e.means;for(t=0;t<r/2;t++){for(l=0,u=0,p=0;p<r/2;p++)n=(t+p)%46,d=(n+23)%46,l+=parseInt(h[n],10),u+=parseInt(h[d],10);s=Math.abs(l-u),s<f&&(f=s,v=t)}var m=parseInt(h[v],10),y=parseInt(-h[v+23],10),g=Math.abs(i-m)-Math.abs(i-y);return Math.abs(-i-m)-Math.abs(-i-y)>g&&(v+=23),[[0,0],[8*v+3,i]]}function C(e,t){var n=Math.floor((t-3)/8);n>22&&(n-=23);var r,a,o,i=0;for(o=46,r=0;r<o;r++)a=(n+r)%o,i+=parseInt(e[a],10);var c,s,l=.15*i,u=.8*i,d=!1,p=!1;for(i=0,r=0;r<o;r++)a=(n+r)%o,i+=parseInt(e[a],10),!d&&i>l?(c=a,d=!0):!p&&i>u&&(s=a,p=!0);var f=[0,0];return[{label:"15%",data:[f,[8*c+3,100]]},{label:"80%",data:[f,[8*s+3,100]]}]}function O(e,t,n){return n.append("path").attr("class","line").attr("d",t(e))}function _(e,t,n){return n.append("path").datum(e).attr("class","line").attr("d",t)}function A(e,t,n,r){return n.selectAll("point").data(e).enter().append("circle").attr("r",2).attr("class","point").attr("transform",function(e,n){var r=Array.isArray(e)?e:[8*n+3,e];return"translate("+t([r]).slice(1).slice(0,-1)+")"}).attr("stroke","#000").attr("fill",function(e,t){return I(Array.isArray(e)?e[0].substring(0,4):0)}).on("mouseover",S).on("mouseout",P)}function S(e){var t=Array.isArray(e)?B(e[0])+": "+e[1]:"Average: "+e;Y.show(t),this.setAttribute("r","4")}function P(e){Y.hide(),this.setAttribute("r","2");var t=document.getElementsByClassName("graph-type-btn active")[0].getAttribute("data-type");ga("send","event",{eventCategory:"graph",eventAction:"hover",eventLabel:t+" tool tip",nonInteraction:!1})}function j(e,t,n,r,a,o,i,c,s,l,u){var d=e.append("div");d.append("input").attr("type","checkbox").attr("id",n+"-"+t+l.toString().replace(".","")+"-"+u.toString().replace(".","")).attr("value",t).property("checked",t===r).on("change",function(e){var t=this.value;this.checked?(a.hasOwnProperty(t)||(a[t]={}),a[t].path=O(o[t],i,c),a[t].points=A(o[t],i,c,s),x(t+" "+n+" timeseries on")):(a[t].path.remove(),a[t].points.remove(),x(t+" "+n+" timeseries off"))}),d.append("label").text("means"!==t?t:"Baseline").attr("for",n+"-"+t+l.toString().replace(".","")+"-"+u.toString().replace(".","")),d.append("div").style("background",I("means"!==t?t:0)).classed("graph-pip-example",!0)}function x(e){ga("send","event",{eventCategory:"graph",eventAction:"click",eventLabel:e,nonInteraction:!1})}function I(e){var t=["#ffe476","#036593","#116c91","#1e7390","#2c7b8e","#39828c","#4c8c8a","#5e9589","#719f87","#83a886","#95b183","#a6ba80","#b8c37c","#cacc79","#d6d279","#e2d779","#efdd78","#fbe378"];return 0===e?"#fff":t[parseInt(e,10)%t.length]}function T(e){e=e.toString();var t=e.substring(0,4),n=parseInt(e.substring(4,6),10)-1,r=e.substring(6,8);return new Date(t,n,r)}function M(e){return"string"==typeof e?(e=T(e),e.getDOY()):e}function B(e){return"Average"===e?e:(e=T(e),N(e.getMonth())+" "+R(e.getDate())+", "+e.getFullYear())}function N(e){return H[e]}function R(e){var t=e%10,n=e%100;return 1===t&&11!==n?e+"st":2===t&&12!==n?e+"nd":3===t&&13!==n?e+"rd":e+"th"}Object.defineProperty(t,"__esModule",{value:!0}),t.SetupGraphs=r,t.HandleGraphTabChange=d,t.createGraphDiv=m;var G=n(22),D=n(25),F=n(24),U=n(2),Y={},z={0:"Jan",1:"Feb",2:"Mar",3:"Apr",4:"May",5:"Jun",6:"Jul",7:"Aug",8:"Sep",9:"Oct",10:"Nov",11:"Dec"},H={0:"Jan.",1:"Feb.",2:"Mar.",3:"Apr.",4:"May",5:"Jun.",6:"Jul.",7:"Aug.",8:"Sep.",9:"Oct.",10:"Nov.",11:"Dec."}},function(e,t,n){"use strict";function r(){d3.selectAll(".panel-top-btn").on("click",o)}function a(){return document.getElementsByClassName("panel-top-btn active")[0].getAttribute("data-active")}function o(){this.classList.contains("active")||(ga("send","event",{eventCategory:"tab",eventAction:"click",eventLabel:this.getAttribute("data-active"),nonInteraction:!1}),i(this.getAttribute("data-active")))}function i(e){s(),c(e),(0,p.updateShareUrl)()}function c(e){d3.select(".panel-top-btn[data-active='"+e+"']").classed("active",!0),document.getElementById("map-wrapper").classList.add(e),document.getElementById("right-panel").classList.add(e),d3.select(".panel-section-wrapper[data-active='"+e+"']").classed("active",!0),l(),u(),(0,d.updatePanelDragOverlayHeight)()}function s(){var e=d3.select(".panel-top-btn.active").attr("data-active");d3.selectAll("#map-wrapper, #right-panel").classed(e,!1),d3.selectAll(".panel-top-btn.active, .panel-section-wrapper.active").classed("active",!1)}function l(){var e=document.getElementById("right-panel").offsetWidth;document.getElementById("map-wrapper").style.paddingRight=e+"px"}function u(){var e=document.getElementById("right-panel"),t=e.style.width;if(t){var n=d3.select(e).style("min-width").slice(0,-2);parseInt(t.slice(0,-2),10)>parseInt(n,10)||(e.style.width="")}}Object.defineProperty(t,"__esModule",{value:!0}),t.BindTabEvents=r,t.GetActiveTab=a,t.HandleTabChange=i;var d=n(22),p=n(25)},function(e,t,n){"use strict";function r(e,t,n){n=n||e.opacity,t.style.top=d(n)+"px"}function a(e){var t=void 0!==e.opacity?e.opacity:1,n=document.createElement("div"),r=i(e,t),a=o("closed",e,r);return n.classList.add("opacity-slider-wrapper"),n.appendChild(r),n.appendChild(a),n}function o(e,t,n){var a=document.createElement("div"),o=document.createElement("img");return a.classList.add("opacity-icon-wrapper"),o.classList.add("opacity-icon"),o.classList.add(e),o.setAttribute("src","imgs/opacity-icon-"+e+"-64x64.png"),o.setAttribute("alt","Use this slider to adjust transparency for the "+t.name+" layer"),o.setAttribute("title","Use this slider to adjust transparency for the "+t.name+" layer"),a.appendChild(o),a.onclick=function(e){var a=n.getElementsByClassName("opacity-slider-handle")[0];(0,u.updateLayerOpacity)(t,0),r(t,a,0)},a}function i(e,t){var n=document.createElement("div"),a=document.createElement("div"),o=document.createElement("div");return n.classList.add("opacity-slider-track-overlay"),a.classList.add("opacity-slider-track"),o.classList.add("opacity-slider-handle"),n.appendChild(a),n.appendChild(o),e.active&&r(e,o),c(n,e,t),n}function c(e,t,n){d3.select(e).call(d3.drag().on("start drag",function(){var n=e.getElementsByClassName("opacity-slider-handle")[0],a=s(e);(0,u.updateLayerOpacity)(t,a),r(t,n,a)}).on("end",function(){var n=s(e);ga("send","event",{eventCategory:"opacity slider",eventAction:"change",eventLabel:'{"'+t.name+'": "'+n+'"}',nonInteraction:!1}),(0,l.updateShareUrl)()}))}function s(e){var t=d3.mouse(e)[1];return d.invert(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.setOpacitySliderPosition=r,t.makeOpacitySlider=a;var l=n(25),u=n(23),d=d3.scaleLinear().domain([1,0]).range([0,90]).clamp(!0)},function(e,t){"use strict";function n(e){if(e.image){var t=r(),n=a(e),i=e.link?o(e.link):null;i?(i.appendChild(n),t.appendChild(i)):t.appendChild(n);var c=document.getElementsByClassName(e.location)[0],s=c.firstChild;c.insertBefore(t,s)}}function r(){var e=document.createElement("div");return d3.select(e).classed("project-logo",!0),e}function a(e){var t=document.createElement("img");return t.setAttribute("src",e.image),e.label&&(t.setAttribute("alt",e.label),t.setAttribute("title",e.label)),t}function o(e){var t=document.createElement("a");return t.setAttribute("href",e),t.setAttribute("target","_blank"),t.addEventListener("click",function(){ga("send","event",{eventCategory:"map",eventAction:"click",eventLabel:"landat logo",nonInteraction:!1})}),t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},,,,,,,,function(e,t){},function(e,t){"use strict";function n(){d3.selectAll(".mobile-menu-button").on("click",r)}function r(){var e=d3.select("#wrapper"),t=e.classed("mobile-menu-hidden");e.classed("mobile-menu-hidden",!t),a(t?"closing":"opening")}function a(e){ga("send","event",{eventCategory:"mobile menu",eventAction:"click",eventLabel:"Mobile Menu "+!e,nonInteraction:!1})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t){"use strict";function n(e,t){return L.marker([e,t],{icon:o})}function r(e){return"hover"===e?i:o}Object.defineProperty(t,"__esModule",{value:!0}),t.createMarker=n,t.getIcon=r;var a=L.Icon.extend({}),o=new a({iconUrl:"imgs/blue_icon.png",shadowUrl:"imgs/marker_shadow.png",iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]}),i=new a({iconUrl:"imgs/orange_icon.png",shadowUrl:"imgs/marker_shadow.png",iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,