!function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),o=r(a),i=n(3),c=r(i),s=n(22),u=n(26),l=n(28),f=n(29),p=n(24),d=n(25),h=n(23),v=n(31),y=r(v),m=n(27),g=(n(32),function(e){(0,o.default)(e,b),(0,l.SetupGraphs)(),(0,f.BindTabEvents)(),(0,d.BindCopyLinkEvents)()}),b=function(e){(0,d.AddShareSettingsToConfig)(e);var t=(0,p.CreateMap)(e.map);(0,u.CreateBaseLayers)(t,e.baselayers),(0,h.CreateDefaultLayers)(e.layers,e["active-layers"]),(0,s.SetupPanel)(e.layers,e.layout),(0,c.default)(t),(0,y.default)(e.logo),e.tab&&(0,f.HandleTabChange)(e.tab),(0,l.BindGraphEvents)(t),(0,d.BindUpdateShareUrl)(t),(0,m.SetupPointsOfInterest)(t,e.pois),(0,d.updateShareUrl)()};window.Base=g,t.default={Base:g}},function(e,t){"use strict";function n(e,t){r(e,t)}function r(e,t){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4==n.readyState){try{var e=JSON.parse(n.responseText)}catch(e){console.log("ERROR: Malformed JSON in config file."),console.log(e)}a(e),o(e),t(e)}},n.open("GET",e,!0),n.send(),console.log("hi")}function a(e){e.map||(e.map={})}function o(e){var t,n,r=e.layers,a=e.mapserverUrl;e["active-layers"];for(var o in r){if(!r.hasOwnProperty(o))return;for(t=r[o],n=0;n<t.length;n++)i(t[n],a)}}function i(e,t){e.url=e.url||t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t,n){"use strict";function r(e){var t=new a.EsriProvider,n=new a.GeoSearchControl({provider:t,showMarker:!1,autoComplete:!1});e.addControl(n),L.DomEvent.on(n.searchElement.elements.container,"click",function(e){L.DomEvent.stopPropagation(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var a=n(4)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(5);Object.defineProperty(t,"GeoSearchControl",{enumerable:!0,get:function(){return r(a).default}});var o=n(13);Object.defineProperty(t,"SearchElement",{enumerable:!0,get:function(){return r(o).default}});var i=n(17);Object.defineProperty(t,"BingProvider",{enumerable:!0,get:function(){return r(i).default}});var c=n(19);Object.defineProperty(t,"EsriProvider",{enumerable:!0,get:function(){return r(c).default}});var s=n(20);Object.defineProperty(t,"GoogleProvider",{enumerable:!0,get:function(){return r(s).default}});var u=n(21);Object.defineProperty(t,"OpenStreetMapProvider",{enumerable:!0,get:function(){return r(u).default}});var l=n(18);Object.defineProperty(t,"Provider",{enumerable:!0,get:function(){return r(l).default}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(){if(!L||!L.Control||!L.Control.extend)throw new Error("Leaflet must be loaded before instantiating the GeoSearch control");for(var e=L.Control.extend(y),t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return new(Function.prototype.bind.apply(e,[null].concat(n)))}Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),i=(r(o),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e});t.default=a;var c=n(12),s=r(c),u=n(13),l=r(u),f=n(16),p=r(f),d=n(14),h=n(15),v=function(){return{position:"topleft",style:"button",showMarker:!0,showPopup:!1,marker:{icon:new L.Icon.Default,draggable:!1},maxMarkers:1,retainZoomLevel:!1,animateZoom:!0,searchLabel:"Enter address",notFoundMessage:"Sorry, that address could not be found.",messageHideDelay:3e3,zoomLevel:18,classNames:{container:"leaflet-bar leaflet-control leaflet-control-geosearch",button:"leaflet-bar-part leaflet-bar-part-single",msgbox:"leaflet-bar message",form:"",input:""},autoComplete:!0,autoCompleteDelay:250}},y={initialize:function(e){var t=this;this.markers=new L.FeatureGroup,this.options=i({},v(),e);var n=this.options,r=n.style,a=n.classNames,o=n.searchLabel,c=n.autoComplete,u=n.autoCompleteDelay;"button"!==r&&(this.options.classNames.container+=" "+e.style),this.searchElement=new l.default(i({},this.options,{handleSubmit:function(e){return t.onSubmit(e)}}));var f=this.searchElement.elements,h=f.container,y=f.form,m=f.input;h.addEventListener("dblclick",function(e){e.stopPropagation()});var g=(0,d.createElement)("a",a.button,h);g.title=o,g.href="#",g.addEventListener("click",function(e){t.onClick(e)},!1),c&&(this.resultList=new p.default({handleClick:function(e){var n=e.result;m.value=n.label,t.onSubmit({query:n.label})}}),y.appendChild(this.resultList.elements.container),m.addEventListener("keyup",(0,s.default)(function(e){return t.autoSearch(e)},u),!0),m.addEventListener("keydown",function(e){return t.selectResult(e)},!0),m.addEventListener("keydown",function(e){return t.clearResults(e)},!0)),this.elements={button:g}},onAdd:function(e){var t=this.options,n=t.showMarker,r=t.style;if(this.map=e,n&&this.markers.addTo(e),"bar"===r){var a=this.searchElement.elements.form,o=e.getContainer().querySelector(".leaflet-control-container"),i=(0,d.createElement)("div","leaflet-control-geosearch bar");i.appendChild(a),o.appendChild(i),this.elements.container=i}return this.searchElement.elements.container},onRemove:function(){var e=this.elements.container;return e&&e.remove(),this},onClick:function(e){e.preventDefault();var t=this.searchElement.elements,n=t.container,r=t.input;n.classList.contains("active")?(0,d.removeClassName)(n,"active"):((0,d.addClassName)(n,"active"),r.focus())},selectResult:function(e){if([h.ARROW_DOWN_KEY,h.ARROW_UP_KEY].includes(e.keyCode)){e.preventDefault();var t=this.searchElement.elements.input,n=this.resultList,r=this.resultList.count()-1,a="ArrowDown"===e.code?1+~~n.selected:~~n.selected-1,o=a<0?r:a>r?0:a,i=n.select(o);t.value=i.label}},clearResults:function(e){e.keyCode===h.ESCAPE_KEY&&this.resultList.clear()},autoSearch:function(e){return new Promise(function(t,n){var r,a,o;return h.SPECIAL_KEYS.includes(e.keyCode)?t():(r=e.target.value,a=this.options.provider,a.search({query:r}).then(function(e){return o=e,this.resultList.render(o),t()}.$asyncbind(this,n),n))}.$asyncbind(this))},onSubmit:function(e){return new Promise(function(t,n){var r,a;return r=this.options.provider,r.search(e).then(function(e){return a=e,a&&a.length>0&&this.showResult(a[0]),t()}.$asyncbind(this,n),n)}.$asyncbind(this))},showResult:function(e){var t=Object.keys(this.markers._layers);t.length>=this.options.maxMarkers&&this.markers.removeLayer(t[0]);var n=this.addMarker(e);this.centerMap(e),this.map.fireEvent("geosearch/showlocation",{location:e,marker:n})},addMarker:function(e){var t=this.options,n=t.marker,r=t.showPopup,a=new L.Marker([e.y,e.x],n);return a.bindPopup(e.label),this.markers.addLayer(a),r&&a.openPopup(),a},centerMap:function(e){var t=this.options,n=t.retainZoomLevel,r=t.animateZoom,a=new L.LatLngBounds(e.bounds),o=a.isValid()?a:this.markers.getBounds();!n&&a.isValid()?this.map.fitBounds(o,{animate:r}):this.map.setView(o.getCenter(),this.getZoom(),{animate:r})},getZoom:function(){var e=this.options,t=e.retainZoomLevel,n=e.zoomLevel;return t?this.map.getZoom():n}}},function(e,t,n){"use strict";function r(e,t){if(Function.prototype.$asyncspawn||Object.defineProperty(Function.prototype,"$asyncspawn",{value:r,enumerable:!1,configurable:!0,writable:!0}),this instanceof Function){var n=this;return new e(function(e,r){function a(t,n){var i;try{if(i=t.call(o,n),i.done){if(i.value!==e){if(i.value&&i.value===i.value.then)return i.value(e,r);e&&e(i.value),e=null}return}i.value.then?i.value.then(function(e){a(o.next,e)},function(e){a(o.throw,e)}):a(o.next,i.value)}catch(e){return r&&r(e),void(r=null)}}var o=n.call(t,e,r);a(o.next)})}}var a=function(e,t){for(var n=t.toString(),r="return "+n,a=n.match(/.*\(([^)]*)\)/)[1],o=/['"]!!!([^'"]*)['"]/g,i=[];;){var c=o.exec(r);if(!c)break;i.push(c)}return i.reverse().forEach(function(t){r=r.slice(0,t.index)+e[t[1]]+r.substr(t.index+t[0].length)}),r=r.replace(/\/\*[^*]*\*\//g," ").replace(/\s+/g," "),new Function(a,r)()}({zousan:n(7).toString(),thenable:n(11).toString()},function e(t,n){function r(){return a.apply(t,arguments)}Function.prototype.$asyncbind||Object.defineProperty(Function.prototype,"$asyncbind",{value:e,enumerable:!1,configurable:!0,writable:!0}),e.trampoline||(e.trampoline=function(e,t,n,r,a){return function o(i){for(;i;){if(i.then)return i=i.then(o,r),a?void 0:i;try{if(i.pop){if(i.length)return i.pop()?t.call(e):i;i=n}else i=i.call(e)}catch(e){return r(e)}}}}),e.LazyThenable||(e.LazyThenable="!!!thenable"(),e.EagerThenable=e.Thenable=(e.EagerThenableFactory="!!!zousan")());var a=this;switch(n){case!0:return new e.Thenable(r);case 0:return new e.LazyThenable(r);case void 0:return r.then=r,r;default:return function(){try{return a.apply(t,arguments)}catch(e){return n(e)}}}});a(),r(),e.exports={$asyncbind:a,$asyncspawn:r}},function(e,t,n){(function(t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){function a(e){if(e){var t=this;e(function(e){t.resolve(e)},function(e){t.reject(e)})}}function o(e,t){if("function"==typeof e.y)try{var n=e.y.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.resolve(t)}function i(e,t){if("function"==typeof e.n)try{var n=e.n.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.reject(t)}e=e||"object"===(void 0===t?"undefined":r(t))&&t.nextTick||"function"==typeof n&&n||function(e){setTimeout(e,0)};var c=function(){function t(){for(;n.length-r;){try{n[r]()}catch(e){}n[r++]=void 0,r===a&&(n.splice(0,a),r=0)}}var n=[],r=0,a=1024;return function(a){n.push(a),n.length-r==1&&e(t)}}();return a.prototype={resolve:function(e){if(void 0===this.state){if(e===this)return this.reject(new TypeError("Attempt to resolve promise with self"));var t=this;if(e&&("function"==typeof e||"object"===(void 0===e?"undefined":r(e))))try{var n=0,a=e.then;if("function"==typeof a)return void a.call(e,function(e){n++||t.resolve(e)},function(e){n++||t.reject(e)})}catch(e){return void(n||this.reject(e))}this.state=o,this.v=e,t.c&&c(function(){for(var n=0,r=t.c.length;n<r;n++)o(t.c[n],e)})}},reject:function(e){if(void 0===this.state){this.state=i,this.v=e;var t=this.c;t&&c(function(){for(var n=0,r=t.length;n<r;n++)i(t[n],e)})}},then:function(e,t){var n=new a,r={y:e,n:t,p:n};if(void 0===this.state)this.c?this.c.push(r):this.c=[r];else{var o=this.state,i=this.v;c(function(){o(r,i)})}return n}},a.resolve=function(e){if(e&&e instanceof a)return e;var t=new a;return t.resolve(e),t},a.reject=function(e){if(e&&e instanceof a)return e;var t=new a;return t.reject(e),t},a.version="2.3.3-nodent",a}}).call(t,n(8),n(9).setImmediate)},function(e,t){"use strict";function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function a(e){if(l===setTimeout)return setTimeout(e,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function o(e){if(f===clearTimeout)return clearTimeout(e);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}function i(){v&&d&&(v=!1,d.length?h=d.concat(h):y=-1,h.length&&c())}function c(){if(!v){var e=a(i);v=!0;for(var t=h.length;t;){for(d=h,h=[];++y<t;)d&&d[y].run();y=-1,t=h.length}d=null,v=!1,o(e)}}function s(e,t){this.fun=e,this.array=t}function u(){}var l,f,p=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(e){l=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(e){f=r}}();var d,h=[],v=!1,y=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];h.push(new s(e,t)),1!==h.length||v||a(c)},s.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=u,p.addListener=u,p.once=u,p.off=u,p.removeListener=u,p.removeAllListeners=u,p.emit=u,p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t,n){"use strict";function r(e,t){this._id=e,this._clearFn=t}var a=Function.prototype.apply;t.setTimeout=function(){return new r(a.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new r(a.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(10),t.setImmediate=setImmediate,t.clearImmediate=clearImmediate},function(e,t,n){(function(e,t){"use strict";!function(e,n){function r(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return u[s]=r,c(s),s++}function a(e){delete u[e]}function o(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}function i(e){if(l)setTimeout(i,0,e);else{var t=u[e];if(t){l=!0;try{o(t)}finally{a(e),l=!1}}}}if(!e.setImmediate){var c,s=1,u={},l=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?function(){c=function(e){t.nextTick(function(){i(e)})}}():function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&i(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),c=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){i(e.data)},c=function(t){e.port2.postMessage(t)}}():f&&"onreadystatechange"in f.createElement("script")?function(){var e=f.documentElement;c=function(t){var n=f.createElement("script");n.onreadystatechange=function(){i(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():function(){c=function(e){setTimeout(i,0,e)}}(),p.setImmediate=r,p.clearImmediate=a}}("undefined"==typeof self?void 0===e?void 0:e:self)}).call(t,function(){return this}(),n(8))},function(e,t){"use strict";e.exports=function(){function e(e){return e&&e instanceof Object&&"function"==typeof e.then}function t(n,r,a){try{var o=a?a(r):r;if(n===o)return n.reject(new TypeError("Promise resolution loop"));e(o)?o.then(function(e){t(n,e)},function(e){n.reject(e)}):n.resolve(o)}catch(e){n.reject(e)}}function n(){}function r(e){}function a(e,t){this.resolve=e,this.reject=t}function o(r,a){var o=new n;try{this._resolver(function(n){return e(n)?n.then(r,a):t(o,n,r)},function(e){t(o,e,a)})}catch(e){t(o,e,a)}return o}function i(e){this._resolver=e,this.then=o}return n.prototype={resolve:r,reject:r,then:a},i.resolve=function(e){return i.isThenable(e)?e:{then:function(t){return t(e)}}},i.isThenable=e,i}},function(e,t){(function(t){"use strict";function n(e,t,n){function a(t){var n=v,r=y;return v=y=void 0,_=t,g=e.apply(r,n)}function o(e){return _=e,b=setTimeout(l,t),S?a(e):g}function c(e){var n=e-w,r=e-_,a=t-n;return x?E(a,m-r):a}function u(e){var n=e-w,r=e-_;return void 0===w||n>=t||n<0||x&&r>=m}function l(){var e=O();if(u(e))return f(e);b=setTimeout(l,c(e))}function f(e){return b=void 0,P&&v?a(e):(v=y=void 0,g)}function p(){void 0!==b&&clearTimeout(b),_=0,v=w=y=b=void 0}function d(){return void 0===b?g:f(O())}function h(){var e=O(),n=u(e);if(v=arguments,y=this,w=e,n){if(void 0===b)return o(w);if(x)return b=setTimeout(l,t),a(w)}return void 0===b&&(b=setTimeout(l,t)),g}var v,y,m,g,b,w,_=0,S=!1,x=!1,P=!0;if("function"!=typeof e)throw new TypeError(s);return t=i(t)||0,r(n)&&(S=!!n.leading,x="maxWait"in n,m=x?k(i(n.maxWait)||0,t):m,P="trailing"in n?!!n.trailing:P),h.cancel=p,h.flush=d,h}function r(e){var t=void 0===e?"undefined":c(e);return!!e&&("object"==t||"function"==t)}function a(e){return!!e&&"object"==(void 0===e?"undefined":c(e))}function o(e){return"symbol"==(void 0===e?"undefined":c(e))||a(e)&&w.call(e)==l}function i(e){if("number"==typeof e)return e;if(o(e))return u;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(f,"");var n=d.test(e);return n||h.test(e)?v(e.slice(2),n?2:8):p.test(e)?u:+e}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s="Expected a function",u=NaN,l="[object Symbol]",f=/^\s+|\s+$/g,p=/^[-+]0x[0-9a-f]+$/i,d=/^0b[01]+$/i,h=/^0o[0-7]+$/i,v=parseInt,y="object"==(void 0===t?"undefined":c(t))&&t&&t.Object===Object&&t,m="object"==("undefined"==typeof self?"undefined":c(self))&&self&&self.Object===Object&&self,g=y||m||Function("return this")(),b=Object.prototype,w=b.toString,k=Math.max,E=Math.min,O=function(){return g.Date.now()};e.exports=n}).call(t,function(){return this}())},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),o=(function(e){e&&e.__esModule?e:{default:e}}(a),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=n(14),c=n(15),s=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=n.handleSubmit,o=void 0===a?function(){}:a,c=n.searchLabel,s=void 0===c?"search":c,u=n.classNames,l=void 0===u?{}:u;r(this,e);var f=(0,i.createElement)("div",["geosearch",l.container].join(" ")),p=(0,i.createElement)("form",["",l.form].join(" "),f),d=(0,i.createElement)("input",["glass",l.input].join(" "),p);d.type="text",d.placeholder=s,d.addEventListener("input",function(e){t.onInput(e)},!1),d.addEventListener("keyup",function(e){t.onKeyUp(e)},!1),d.addEventListener("keypress",function(e){t.onKeyPress(e)},!1),d.addEventListener("focus",function(e){t.onFocus(e)},!1),d.addEventListener("blur",function(e){t.onBlur(e)},!1),this.elements={container:f,form:p,input:d},this.handleSubmit=o}return o(e,[{key:"onFocus",value:function(){(0,i.addClassName)(this.elements.form,"active")}},{key:"onBlur",value:function(){(0,i.removeClassName)(this.elements.form,"active")}},{key:"onSubmit",value:function(e){return new Promise(function(t,n){var r,a,o;return e.preventDefault(),e.stopPropagation(),r=this.elements,a=r.input,o=r.container,(0,i.removeClassName)(o,"error"),(0,i.addClassName)(o,"pending"),this.handleSubmit({query:a.value}).then(function(e){return(0,i.removeClassName)(o,"pending"),t()}.$asyncbind(this,n),n)}.$asyncbind(this))}},{key:"onInput",value:function(){var e=this.elements.container;this.hasError&&((0,i.removeClassName)(e,"error"),this.hasError=!1)}},{key:"onKeyUp",value:function(e){var t=this.elements,n=t.container,r=t.input;e.keyCode===c.ESCAPE_KEY&&((0,i.removeClassName)(n,"pending"),(0,i.removeClassName)(n,"active"),r.value="",document.body.focus(),document.body.blur())}},{key:"onKeyPress",value:function(e){e.keyCode===c.ENTER_KEY&&this.onSubmit(e)}},{key:"setQuery",value:function(e){this.elements.input.value=e}}]),e}();t.default=s},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.createElement=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=document.createElement(e);return r.className=t,n&&n.appendChild(r),r};t.createScriptElement=function(e,t){var r=n("script",null,document.body);return r.setAttribute("type","text/javascript"),new Promise(function(n){window[t]=function(e){r.remove(),delete window[t],n(e)},r.setAttribute("src",e)})},t.addClassName=function(e,t){e&&!e.classList.contains(t)&&e.classList.add(t)},t.removeClassName=function(e,t){e&&e.classList.contains(t)&&e.classList.remove(t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.ENTER_KEY=13,r=t.ESCAPE_KEY=27,a=t.ARROW_DOWN_KEY=40,o=t.ARROW_UP_KEY=38,i=t.ARROW_LEFT_KEY=37,c=t.ARROW_RIGHT_KEY=39;t.SPECIAL_KEYS=[n,r,a,o,i,c]},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(14),i=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.join(" ").trim()},c=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.handleClick,a=void 0===n?function(){}:n,c=t.classNames,u=void 0===c?{}:c;r(this,e),s.call(this),this.props={handleClick:a,classNames:u},this.selected=-1;var l=(0,o.createElement)("div",i("results",u.container)),f=(0,o.createElement)("div",i(u.item));l.addEventListener("click",this.onClick,!0),this.elements={container:l,resultItem:f}}return a(e,[{key:"render",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=this.elements,n=t.container,r=t.resultItem;this.clear(),e.forEach(function(e,t){var a=r.cloneNode(!0);a.setAttribute("data-key",t),a.innerHTML=e.label,n.appendChild(a)}),e.length>0&&(0,o.addClassName)(n,"active"),this.results=e}},{key:"select",value:function(e){var t=this.elements.container;return Array.from(t.children).forEach(function(t,n){return n===e?(0,o.addClassName)(t,"active"):(0,o.removeClassName)(t,"active")}),this.selected=e,this.results[e]}},{key:"count",value:function(){return this.results.length}},{key:"clear",value:function(){var e=this.elements.container;for(this.selected=-1;e.lastChild;)e.removeChild(e.lastChild);(0,o.removeClassName)(e,"active")}}]),e}(),s=function(){var e=this;this.onClick=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.target,r=e.props.handleClick,a=e.elements.container;if(n.parentNode===a&&n.hasAttribute("data-key")){var o=n.getAttribute("data-key");r({result:e.results[o]})}}};t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":c(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":c(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var s=n(6),u=(r(s),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(18),p=r(f),d=n(14),h=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=e.jsonp,a=this.options.params;return n+"//dev.virtualearth.net/REST/v1/Locations?"+this.getParamString(u({},a,{query:t,jsonp:r}))}},{key:"parse",value:function(e){var t=e.data;return 0===t.resourceSets.length?[]:t.resourceSets[0].resources.map(function(e){return{x:e.point.coordinates[1],y:e.point.coordinates[0],label:e.address.formattedAddress,bounds:[[e.bbox[0],e.bbox[1]],[e.bbox[2],e.bbox[3]]],raw:e}})}},{key:"search",value:function(e){return new Promise(function(t,n){var r,a,o,i,c;return r=e.query,a=~location.protocol.indexOf("http")?location.protocol:"https:",o="BING_JSONP_CB_"+Date.now(),i=this.endpoint({query:r,protocol:a,jsonp:o}),(0,d.createScriptElement)(i,o).then(function(e){return c=e,t(this.parse({data:c}))}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),t}(p.default);t.default=h},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),o=(function(e){e&&e.__esModule?e:{default:e}}(a),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.options=t}return o(e,[{key:"getParamString",value:function(e){return Object.keys(e).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}},{key:"search",value:function(e){return new Promise(function(t,n){var r,a,o,i,c;return r=e.query,a=~location.protocol.indexOf("http")?location.protocol:"https:",o=this.endpoint({query:r,protocol:a}),fetch(o).then(function(e){return i=e,i.json().then(function(e){return c=e,t(this.parse({data:c}))}.$asyncbind(this,n),n)}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),e}();t.default=i},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),f=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),s(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find?"+this.getParamString(c({},r,{f:"json",text:t}))}},{key:"parse",value:function(e){return e.data.locations.map(function(e){return{x:e.feature.geometry.x,y:e.feature.geometry.y,label:e.name,bounds:[[e.extent.ymin,e.extent.xmin],[e.extent.ymax,e.extent.xmax]],raw:e}})}}]),t}(l.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),f=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),s(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params,a=this.getParamString(c({},r,{address:t}));return(r&&r.key?"https:":n)+"//maps.googleapis.com/maps/api/geocode/json?"+a}},{key:"parse",value:function(e){return e.data.results.map(function(e){return{x:e.geometry.location.lng,y:e.geometry.location.lat,label:e.formatted_address,bounds:[[e.geometry.viewport.southwest.lat,e.geometry.viewport.southwest.lng],[e.geometry.viewport.northeast.lat,e.geometry.viewport.northeast.lng]],raw:e}})}}]),t}(l.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),f=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),s(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//nominatim.openstreetmap.org/search?"+this.getParamString(c({},r,{format:"json",q:t}))}},{key:"parse",value:function(e){return e.data.map(function(e){return{x:e.lon,y:e.lat,label:e.display_name,bounds:[[parseFloat(e.boundingbox[0]),parseFloat(e.boundingbox[2])],[parseFloat(e.boundingbox[1]),parseFloat(e.boundingbox[3])]],raw:e}})}}]),t}(l.default);t.default=f},function(e,t,n){"use strict";function r(e,t){l(u(t["layer-groups-order"]),e),o(),a()}function a(){document.getElementById("right-panel").onscroll=c}function o(){d3.select("#right-panel-drag-overlay").call(d3.drag().on("drag",function(){i.call(this)}))}function i(){c(),s()}function c(){var e,t=d3.select("#right-panel"),n=t.property("offsetHeight"),r=document.getElementById("right-panel-drag-overlay"),a=document.getElementById("right-panel-header");if(t.classed("graphs-active")){var o=document.getElementById("graph-list");e=a.scrollHeight+o.scrollHeight+700}else{var i=document.getElementById("layer-list");e=a.scrollHeight+i.scrollHeight}e=e>n?e+"px":null,r.style.height=e}function s(){var e=d3.select("#right-panel"),t=+e.style("min-width").slice(0,-2),n=e.property("clientWidth"),r=document.getElementById("wrapper"),a=r.clientWidth,o=document.getElementById("map-wrapper"),i=d3.event.sourceEvent.x,c=a-i-n,s=n+c;s=s<t?t:s>a?a:s,o.style.paddingRight=s+"px",e.style("width",s+"px")}function u(e){return d3.select("#layer-list").selectAll(".layer-group-wrapper").data(e).enter().append("div").attr("class","layer-group-wrapper").attr("id",function(e){return e.id}).classed("active",function(e){return e.active}).each(function(e){d3.select(this).append("div").attr("class","layer-group-btn btn").on("click",function(e){e.active=!e.active,d3.select(this.parentNode).classed("active",function(){return e.active}),c()}).text(e.name)}).append("div").attr("class","layer-group")}function l(e,t){e.selectAll(".layer-select").data(function(e){return t[e.id]}).enter().append("div").attr("class","layer-select").each(function(e){var t=(this.parentNode.parentNode.id,d3.select(this));f(e,t),p(e,t),d(e,t),h(e,t)})}function f(e,t){t.append("input").attr("type","checkbox").attr("id",function(e){return e.id}).attr("checked",function(e){return e.active?"checked":null}).on("click",function(e){(0,y.toggleLayer)(e),t.select(".layer-tools-wrapper").classed("active",e.active),e.active&&(0,m.setSliderInitialPos)(e,t)})}function p(e,t){t.append("div").attr("class","layer-label-wrapper").append("label").attr("for",function(e){return e.id}).attr("class","layer-label").html(function(e){return e.name})}function d(e,t){e.info&&""!==e.info&&(t.append("div").attr("class","layer-info-btn").text("(?)").on("click",function(){d3.select(this.parentNode).select(".layer-info-wrapper").classed("active",function(){return!d3.select(this).classed("active")})}),t.append("div").attr("class","layer-info-wrapper").text(function(e){return e.info}))}function h(e,t){var n=t.append("div").attr("class","layer-tools-wrapper").classed("active",function(){return e.active});(0,m.makeOpacitySlider)(e,n),v(e,n)}function v(e,t){t.append("div").attr("class","legend-wrapper").append("img").attr("src",e.legend||"mean_ndvi_legend.jpg")}Object.defineProperty(t,"__esModule",{value:!0}),t.SetupPanel=r,t.updatePanelDragOverlayHeight=c;var y=n(23),m=n(30);n(25)},function(e,t,n){"use strict";function r(){return h}function a(e,t){var n,r,a,o,c,s;if(t&&0!==t.length)for(n=0;n<t.length;n++){s=!1,c=t[n];for(a in e){if(!e.hasOwnProperty(a))return;for(o=e[a],r=0;r<o.length;r++)if(o[r].id===c){i(o[r]),s=!0;break}if(s)break}}}function o(e){e.active?s(e):i(e)}function i(e){var t=(0,p.GetMap)();e.active=!0,e.mapLayer=e.mapLayer||f(e),t.addLayer(e.mapLayer),c(e),(0,d.updateShareUrl)()}function c(e){h.push(e.id)}function s(e){var t=(0,p.GetMap)();e.active=!1,e.mapLayer&&t.hasLayer(e.mapLayer)&&t.removeLayer(e.mapLayer),u(e),(0,d.updateShareUrl)()}function u(e){var t=h.indexOf(e.id);t!==-1&&h.splice(t,1)}function l(e,t){e.opacity=t,e.mapLayer.setOpacity(t)}function f(e){return L.tileLayer.wms(e.url,{layers:e.id,transparent:e.transparent||!0,version:e.version||"1.3.0",crs:e.crs||L.CRS.EPSG4326,format:e.format||"image/png",opacity:e.opacity||1,tileSize:e.tileSize||256})}Object.defineProperty(t,"__esModule",{value:!0}),t.GetCurrentLayers=r,t.CreateDefaultLayers=a,t.toggleLayer=o,t.enableLayer=i,t.disableLayer=s,t.updateLayerOpacity=l;var p=n(24),d=n(25),h=[]},function(e,t){"use strict";function n(e){var t=e.id||"map",n=e.options||{scrollWheelZoom:!1},r=e.center||["38.5","-81"],o=e.zoom||6;return a=L.map(t,n).setView(r,o),L.control.attribution().addTo(a),a}function r(){return a}Object.defineProperty(t,"__esModule",{value:!0}),t.CreateMap=n,t.GetMap=r;var a},function(e,t,n){"use strict";function r(e){e.on("moveend",a)}function a(e){var t=(0,R.GetMap)();c(i([g(t),b(t),w(t),k(t),E(),O()])),s(),m()}function o(e){var t=_();t&&(t.center&&(e.map.center=t.center),t.zoom&&(e.map.zoom=t.zoom),t.layers&&I(t.layers,e),t.baselayers&&B(t.baselayers,e),t.pois&&N(t.pois,e),t.tab&&(e.tab=t.tab))}function i(e){return"?"+e.filter(function(e){return void 0!==e}).join("&")}function c(e){window.history&&window.history.replaceState&&window.history.replaceState({},"",e)}function s(){var e=window.location.href;document.getElementById("share-link-url").setAttribute("value",e)}function u(){d3.select(document).on("click",l),d3.select(".share-link a").on("click",f),d3.select(".share-link-url").on("click",d),d3.select(".share-link-popup-remover").on("click",p)}function l(){var e,t,n=d3.event,r=n.path,a=!1;for(e=0,t=r.length;e<t;e++)if(r[e].className&&r[e].className.indexOf("share-link")!==-1){a=!0;break}a||v()}function f(){d3.select(document.getElementsByClassName("share-link-popup")[0]).classed("active")?v():h()}function p(){v()}function d(){y()}function h(){d3.select(document.getElementsByClassName("share-link-popup")[0]).classed("active",!0),y()}function v(){d3.select(document.getElementsByClassName("share-link-popup")[0]).classed("active",!1)}function y(){var e=document.getElementById("share-link-url");e.focus(),e.setSelectionRange(0,e.value.length)}function m(){var e,t,n,r,a=x(window.location.href),o=document.getElementsByClassName("share-social");for(n=0,r=o.length;n<r;n++)e=o[n],t=e.getAttribute("data-baseurl")+a,e.setAttribute("href",t)}function g(e){var t=e.getCenter();return"center="+t.lat.toString()+","+t.lng.toString()}function b(e){return"zoom="+e.getZoom()}function w(e){var t=[],n={},r=(0,F.GetCurrentLayers)();e.eachLayer(function(e){var t=e.options;t&&t.layers&&(n[t.layers]=t.hasOwnProperty("opacity")?t.opacity:"1")});var a,o;for(o=0;o<r.length;o++)a=r[o],t.push(a),t.push(n[a]);return"layers="+t.join(",")}function k(e){var t=[];return e.eachLayer(function(e){e.options&&e.options.type===D.BASE_LAYER_TYPE&&t.push(e.options.id)}),"baselayers="+t.join(",")}function E(){var e=(0,G.GetAllPointsOfInterest)();if(e.length){var t="pois=";return e.forEach(function(e){t+=e.lat+","+e.lng+";"}),t}}function O(){return"tab="+d3.select(".panel-top-btn.active").attr("data-active")}function _(){var e=window.location.search;if(""!==e)return e=S(e),e=L(e),j(e),e}function S(e){return e=e.substring(1),e=P(e),e.split("&")}function x(e){return e.replace(/\:/g,"%3A").replace(/\//g,"%2F").replace(/\,/g,"%2C").replace(/\&/g,"%26")}function P(e){return e.replace(/\%2[c|C]/g,",").replace(/\%3[b|B]/g,";")}function L(e){var t,n,r={};for(n=0;n<e.length;n++)t=e[n].split("="),r[t[0]]=t[1];return r}function j(e){e.center&&(e.center=C(e.center)),e.layers&&(e.layers=T(e.layers)),e.baselayers&&(e.baselayers=A(e.baselayers)),e.pois&&(e.pois=M(e.pois))}function C(e){return e.split(",")}function T(e){var t,n,r={enabledLayers:[],opacityVals:{}};for(e=e.split(","),n=0;n<e.length;n+=2)t=e[n],r.enabledLayers.push(t),r.opacityVals[t]=e[n+1];return r}function A(e){return e.split(",")}function M(e){return e.split(";").filter(function(e){return""!==e}).map(function(e){return e=e.split(","),{lat:e[0],lng:e[1]}})}function I(e,t){var n=e.enabledLayers;t["active-layers"]=n;var r,a,o,i,c,s,u=t.layers;for(r=0;r<n.length;r++){s=!1,c=n[r];for(o in u){if(!u.hasOwnProperty(o))return;for(i=u[o],a=0;a<i.length;a++)if(i[a].id===c){i[a].opacity=e.opacityVals[c],s=!0;break}if(s)break}}}function B(e,t){var n,r,a=t.baselayers;for(r=0;r<a.length;r++)n=a[r],n.active=e.indexOf(n.id)!==-1}function N(e,t){t.pois=e}Object.defineProperty(t,"__esModule",{value:!0}),t.BindUpdateShareUrl=r,t.updateShareUrl=a,t.AddShareSettingsToConfig=o,t.BindCopyLinkEvents=u;var R=n(24),D=n(26),F=n(23),G=n(27)},function(e,t,n){"use strict";function r(e,t){t=t||[{id:"carto-light-default",url:"http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attributions">CARTO</a>'}],f=t;var n,r,o;for(n=0;n<t.length;n++)o=t[n],o.active&&(r=u(o),o.layer=r,r.addTo(e));a(t)}function a(e){var t=document.createElement("div");t.className="baselayer-ui";for(var n,r,a,i,c=0,s=e.length;c<s;c++)i=e[c],i.hasOwnProperty("image")&&(n=document.createElement("div"),n.setAttribute("data-layer",i.id),r=document.createElement("img"),r.setAttribute("src",i.image),r.setAttribute("alt",i.label),r.setAttribute("title",i.label),a=document.createElement("div"),a.textContent=i.label,n.appendChild(r),n.appendChild(a),n.addEventListener("click",o),d3.select(n).classed("base-selector",!0).classed("active",i.active),t.appendChild(n));document.getElementsByClassName("leaflet-bottom leaflet-left")[0].appendChild(t)}function o(e){e.stopPropagation();var t=this.getAttribute("data-layer");i(this),c(),s(t),(0,d.updateShareUrl)()}function i(e){d3.select(".base-selector.active").classed("active",!1),d3.select(e).classed("active",!0)}function c(){var e=(0,p.GetMap)();e.eachLayer(function(t){t.options.type===h&&e.removeLayer(t)})}function s(e){for(var t,n=(0,p.GetMap)(),r=0,a=f.length;r<a;r++)if(t=f[r],t.id===e){t.layer||(t.layer=u(t)),t.layer.addTo(n),t.layer.bringToBack();break}}function u(e){return L.tileLayer(e.url,l(e))}function l(e){var t={};return e.id&&(t.id=e.id),e.attribution&&(t.attribution=e.attribution),e.subdomains&&(t.subdomains=e.subdomains),t.type=h,t}Object.defineProperty(t,"__esModule",{value:!0}),t.BASE_LAYER_TYPE=void 0,t.CreateBaseLayers=r;var f,p=n(24),d=n(25),h=t.BASE_LAYER_TYPE="baselayer"},function(e,t,n){"use strict";function r(){return m}function a(e,t){var n={lat:e,lng:t};return m.push(n),n}function o(e,t){i(t);var n=r(),e=(0,v.GetMap)();n.forEach(function(t){s(e,t)})}function i(e){Array.prototype.push.apply(m,e)}function c(e){m=m.filter(function(t){return!Object.is(t,e)})}function s(e,t){var n=(0,d.createGraphDiv)(t),r=(0,d.createMarker)(e,t.lat,t.lng);t.graphDiv=n,t.marker=r,r.addTo(e),(0,d.createGraphRemover)(e,n,r,t),d3.select(n).on("mouseenter",function(e){r.setIcon((0,d.getIcon)("hover"))}),d3.select(n).on("mouseleave",function(){r.setIcon((0,d.getIcon)("graph"))}),r.on("click dblclick",function(e){u(e,t)}),r.on("mouseover",function(e){r.setIcon((0,d.getIcon)("hover"))}),r.on("mouseout",function(e){r.setIcon((0,d.getIcon)("graph")),t.graphDiv.getElementsByClassName("pan-to-marker-btn")[0].classList.remove("animate")})}function u(e,t){e.originalEvent.stopPropagation(),(0,y.HandleTabChange)("graphs-active"),f(t),l(t)}function l(e){e.graphDiv.getElementsByClassName("pan-to-marker-btn")[0].classList.add("animate")}function f(e){var t=document.getElementById("right-panel"),n=document.getElementById("right-panel-header");t.scrollTop=e.graphDiv.offsetTop+n.scrollHeight}function p(e,t,n){document.getElementById("graph-list").removeChild(t),e.removeLayer(n),(0,h.updateShareUrl)()}Object.defineProperty(t,"__esModule",{value:!0}),t.GetAllPointsOfInterest=r,t.AddPointOfInterestToTracker=a,t.SetupPointsOfInterest=o,t.AddMultiplePointsOfInterest=i,t.RemovePointOfInterestFromTracker=c,t.SetupPointOfInterestUI=s,t.RemovePointOfInterestUI=p;var d=n(28),h=n(25),v=n(24),y=n(29),m=[]},function(e,t,n){"use strict";function r(){d3.selectAll(".graph-type-btn").on("click",h),a(),R=d3.tip().attr("class","d3-tip").html(function(e){return e})}function a(){Date.prototype.isLeapYear=function(){var e=this.getFullYear();return 0==(3&e)&&(e%100!=0||e%400==0)},Date.prototype.getDOY=function(){var e=[0,31,59,90,120,151,181,212,243,273,304,334],t=this.getMonth(),n=this.getDate(),r=e[t]+n;return t>1&&this.isLeapYear()&&r++,r}}function o(e){e.on("click",c)}function i(e){return"hover"===e?z:$}function c(e){var t=this,n=e.latlng.lat,r=e.latlng.lng,a=(0,D.AddPointOfInterestToTracker)(n,r);(0,D.SetupPointOfInterestUI)(t,a,z,$),(0,G.updateShareUrl)()}function s(e,t,n){return L.marker([t,n],{icon:$})}function u(e,t,n,r){var a=l();t.appendChild(a),d3.select(a).on("click",function(){(0,D.RemovePointOfInterestFromTracker)(r),(0,D.RemovePointOfInterestUI)(e,t,n),(0,F.updatePanelDragOverlayHeight)(),(0,G.updateShareUrl)()})}function l(){var e=document.createElement("button");return e.className="remove-graph",e.innerText=String.fromCharCode("10005"),e.setAttribute("title","Remove graph"),e}function f(e,t,n){var r="https://fcav-ndvi.nemac.org/landdat_product.cgi?args="+t+","+e,a=new XMLHttpRequest;a.addEventListener("load",function(){var r=this.responseText;r=r.replace(/\[|\]|\'/g,"").split(", "),m(r,n,e,t),(0,F.updatePanelDragOverlayHeight)()}),a.open("GET",r),a.send()}function p(e){var t;for(t=0;t<e.length;t++)e[t]=e[t].split(",");return e}function d(e){var t,n,r,a,o={};for(o.keys=[],r=0;r<e.length;r++)t=e[r],n=t[0].substring(0,4),o.hasOwnProperty(n)||(o[n]=[],o.keys.push(n)),o[n].push(t);var i,c;for(o.medians=[],r=0;r<46;r++){for(i=[],a=r;a<e.length;a+=46)i.push(e[a][1]);c=i.sort()[Math.floor(i.length/2)],o.medians.push(c)}return o}function h(){var e=this.dataset.type,t=document.getElementsByClassName("graph-type-btn active")[0],n=t.dataset.type;e!==n&&(d3.select("#graph-list").classed("graph-"+n,!1).classed("graph-"+e,!0),d3.select(t).classed("active",!1),d3.select(this).classed("active",!0))}function v(e){var t=g(e.lat,3),n=g(e.lng,3),r=document.createElement("div"),a=y(e),o=document.createTextNode("Lat: "+t+", Lon: "+n);return r.appendChild(a),r.appendChild(o),r.classList.add("graph-elem"),f(e.lat,e.lng,r),r}function y(e){var t=document.createElement("button");return t.classList.add("btn","pan-to-marker-btn"),t.textContent="Show On Map",t.onclick=function(e,t){(0,U.GetMap)().panTo([e.lat,e.lng])}.bind(t,e),t}function m(e,t,n,r){e=p(e);var a=d(e);b(e,t,a.medians),w(a,t,n,r),k(a,t,n,r),document.getElementById("graph-list").appendChild(t)}function g(e,t){return Math.round(e*Math.pow(10,t))/Math.pow(10,t)}function b(e,t,n){var r={top:30,right:20,bottom:30,left:25},a=580-r.left-r.right,o=270-r.top-r.bottom,i=d3.scaleTime().range([0,a]).domain([A(e[0][0]),A(e[e.length-1][0])]),c=d3.scaleLinear().range([o,0]).domain([0,100]),s=d3.axisBottom(i).ticks(16).tickFormat(function(e){return e.getFullYear()}),u=d3.axisLeft(c).ticks(6),l=d3.line().x(function(e){return i(A(e[0]))}).y(function(e){return c(e[1])}),f=d3.select(t).append("div").classed("timeseries-graph",!0),p=f.append("svg").attr("height",o+r.top+r.bottom).attr("viewBox",function(){return"0 0 "+(a+r.left+r.right)+" "+(o+r.top+r.bottom)}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate("+r.left+","+r.top+")");p.call(R),_(e,l,p),p.append("g").attr("class","x axis").attr("transform","translate(0,"+o+")").call(s),p.append("g").attr("class","y axis").call(u),x(e,l,p,n)}function w(e,t,n,r){function a(e){return H[(e-15)/30]}var o={},i={top:30,right:20,bottom:30,left:25},c=500-i.left-i.right,s=270-i.top-i.bottom,u=e.medians,l=d3.scaleLinear().range([0,c]).domain([0,365]),f=d3.scaleLinear().range([s,0]).domain([0,100]),p=d3.axisBottom(l).ticks(11).tickValues([15,45,75,105,135,165,195,225,255,285,315,345]).tickFormat(a),d=d3.axisLeft(f).ticks(6),h=d3.line().x(function(e,t){return l(Array.isArray(e)?M(e[0]):8*t+3)}).y(function(e){return f(Array.isArray(e)?e[1]:e)}),v=d3.select(t).append("div").classed("overlapping-graph",!0),y=v.append("svg").attr("viewBox",function(){return"0 0 "+(c+i.left+i.right)+" "+(s+i.top+i.bottom)}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate("+i.left+","+i.top+")");y.call(R),y.append("g").attr("class","x axis").attr("transform","translate(0,"+s+")").call(p),y.append("g").attr("class","y axis").call(d),o.medians={path:_(e.medians,h,y)},o[2015]={path:_(e[2015],h,y)},o.medians.points=x(e.medians,h,y,u),o[2015].points=x(e[2015],h,y,u);var m=v.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){C(m,t,"timeseries","2015",o,e,h,y,u,n,r)}),C(m,"medians","timeseries","medians",o,e,h,y,u,n,r)}function k(e,t,n,r){var a=Math.min(490,490)/2-30,o=e.medians,i=E(e),c=O(o,i[1][0]),s=d3.scaleLinear().domain([0,100]).range([0,a]),u=d3.radialLine().radius(function(e){return s(Array.isArray(e)?e[1]:e)}).angle(function(e,t){return((Array.isArray(e)?M(e[0]):8*t+3)-1)%365/365*(2*Math.PI)}),l=d3.select(t).append("div").classed("polar-graph",!0),f=l.append("svg").attr("viewBox",function(){return"0 0 490 490"}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(245,245)");f.call(R);var p=f.append("g").attr("class","r axis").selectAll("g").data(s.ticks(5).slice(1)).enter().append("g");p.append("circle").attr("r",s),p.append("text").attr("y",function(e){return-s(e)-4}).attr("transform","rotate(15)").style("text-anchor","middle").text(function(e){return e});var d=f.append("g").attr("class","a axis").selectAll("g").data(d3.range(0,360,30)).enter().append("g").attr("transform",function(e){return"rotate("+(e-90)+")"});d.append("line").attr("x2",a),d.append("text").attr("x",a+6).attr("dy",".35em").style("text-anchor",function(e){return e<360&&e>180?"end":null}).attr("transform",function(e){return e<360&&e>180?"rotate(180 "+(a+6)+",0)":null}).text(function(e){return H[e/30]});var h=f.append("g").selectAll("g").data(c).enter().append("g").attr("transform",function(e){return"rotate("+(e.data[1][0]-90)+")"});h.append("line").attr("class","line").attr("x2",a),h.append("text").attr("x",a+6).attr("y",function(e){return(e.data[1][0]-1)%365/365*(2*Math.PI)}).attr("dy",".35em").style("text-anchor",function(e){var t=e.data[1][0];return t<360&&t>180?"end":null}).attr("transform",function(e){var t=e.data[1][0];return t<360&&t>180?"rotate(180 "+(a+6)+",0)":null}).text(function(e){return e.label});var v=i[1][0];S([[v,100],[(v+182.5)%365,100]],u,f).classed("growing-season-line","true"),S(i,u,f).classed("center-line","true"),f.selectAll("point").data([i[1]]).enter().append("circle").attr("class","point").attr("transform",function(e){return"translate("+u([e]).slice(1).slice(0,-1)+")"}).attr("r",2.5).attr("stroke","#000").attr("fill","#dd82d2").on("mouseover",function(e){R.show("Center: "+String(e[1]).substring(0,7)),this.setAttribute("r",5),this.setAttribute("stroke-width","2px"),d3.select(this).classed("active",!0)}).on("mouseout",function(e){R.hide(),this.setAttribute("r",2.5),this.setAttribute("stroke-width","1px"),d3.select(this).classed("active",!0)});var y={};y.medians={path:S(o,u,f)},y[2015]={path:S(e[2015],u,f)},y.medians.points=x(o,u,f,o),y[2015].points=x(e[2015],u,f,o);var m=l.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){var a=m.append("div");a.append("input").attr("type","checkbox").attr("id","polar-"+t+n.toString().replace(".","")+"-"+r.toString().replace(".","")).attr("value",t).property("checked","2015"===t).on("change",function(t){var n=this.value;this.checked?(y.hasOwnProperty(n)||(y[n]={}),y[n].path=S(e[n],u,f),y[n].points=x(e[n],u,f,o)):(y[n].path.remove(),y[n].points.remove())}),a.append("label").text(t).attr("for","polar-"+t+n.toString().replace(".","")+"-"+r.toString().replace(".",""))});var g=m.append("div");g.append("input").attr("type","checkbox").attr("id","polar-average-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")).attr("value","medians").property("checked",!0).on("change",function(t){var n=this.value;this.checked?(y.hasOwnProperty(n)||(y[n]={}),y[n].path=S(e[n],u,f),y[n].points=x(e[n],u,f,o)):(y[n].path.remove(),y[n].points.remove())}),g.append("label").text("Baseline").attr("for","polar-average-"+n.toString().replace(".","")+"-"+r.toString().replace(".",""));var b=m.append("div").classed("threshold-checkbox",!0);b.append("input").attr("type","checkbox").attr("id","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")).property("checked",!0).on("change",function(e){h.style("opacity",this.checked?1:0)}),b.append("label").text("Thresholds").attr("for","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".",""))}function E(e){var t,n,r,a,o,i=0,c=0;for(r=46,t=0;t<e.keys.length;t++)if(a=e[e.keys[t]],a.length===r){for(o=0,n=0;n<r/2;n++)o+=a[n][1]-a[n+23][1];o/=23,i+=o}else c++;i=Math.abs(i)/(e.keys.length-c);var s,u,l,f,p,d=1e6,h=0,v=e.medians;for(t=0;t<r/2;t++){for(u=0,l=0,p=0;p<r/2;p++)n=(t+p)%46,f=(n+23)%46,u+=parseInt(v[n],10),l+=parseInt(v[f],10);s=Math.abs(u-l),s<d&&(d=s,h=t)}var y=parseInt(v[h],10),m=parseInt(-v[h+23],10),g=Math.abs(i-y)-Math.abs(i-m);return Math.abs(-i-y)-Math.abs(-i-m)>g&&(h+=23),[[0,0],[8*h+3,i]]}function O(e,t){var n=Math.floor((t-3)/8);n>22&&(n-=23);var r,a,o,i=0;for(o=46,r=0;r<o;r++)a=(n+r)%o,i+=parseInt(e[a],10);var c,s,u,l=.15*i,f=.8*i,p=.85*i,d=!1,h=!1,v=!1;for(i=0,r=0;r<o;r++)if(a=(n+r)%o,i+=parseInt(e[a],10),!d&&i>l)c=a,d=!0;else if(!h&&i>f)s=a,h=!0;else if(!v&&i>p){u=a,v=!0;break}var y=[0,0];return[{label:"15%",data:[y,[8*c+3,100]]},{label:"80%",data:[y,[8*s+3,100]]},{label:"85%",data:[y,[8*u+3,100]]}]}function _(e,t,n){return n.append("path").attr("class","line").attr("d",t(e))}function S(e,t,n){return n.append("path").datum(e).attr("class","line").attr("d",t)}function x(e,t,n,r){return n.selectAll("point").data(e).enter().append("circle").attr("class","point").attr("transform",function(e,n){return"translate("+t([Array.isArray(e)?e:[8*n+3,e]]).slice(1).slice(0,-1)+")"}).attr("r",3).attr("stroke","#000").attr("fill",function(e,t){return T(Array.isArray(e)?e[1]:e,r[t%46],3)}).on("mouseover",P).on("mouseout",j)}function P(e){var t=Array.isArray(e)?I(e[0])+": "+e[1]:"Average: "+e;R.show(t),this.setAttribute("r",5),this.setAttribute("stroke-width","2px")}function j(e){R.hide(),this.setAttribute("r",3),this.setAttribute("stroke-width","1px")}function C(e,t,n,r,a,o,i,c,s,u,l){var f=e.append("div");f.append("input").attr("type","checkbox").attr("id",n+"-"+t+u.toString().replace(".","")+"-"+l.toString().replace(".","")).attr("value",t).property("checked",t===r).on("change",function(e){var t=this.value;this.checked?(a.hasOwnProperty(t)||(a[t]={}),a[t].path=_(o[t],i,c),a[t].points=x(o[t],i,c,s)):(a[t].path.remove(),a[t].points.remove())}),f.append("label").text(t).attr("for",n+"-"+t+u.toString().replace(".","")+"-"+l.toString().replace(".",""))}function T(e,t,n){var r=e-t,a=Math.abs(r)/t*100*n,o=100-a+"%";return r>0?"hsl(8, 79%, "+o+")":"hsl(219, 79%, "+o+")"}function A(e){e=e.toString();var t=e.substring(0,4),n=parseInt(e.substring(4,6),10)-1,r=e.substring(6,8);return new Date(t,n,r)}function M(e){return"string"==typeof e?(e=A(e),e.getDOY()):e}function I(e){return"Average"===e?e:(e=A(e),B(e.getMonth())+" "+N(e.getDate())+", "+e.getFullYear())}function B(e){switch(e){case 0:return"Jan.";case 1:return"Feb.";case 2:return"Mar.";case 3:return"Apr.";case 4:return"May";case 5:return"Jun.";case 6:return"Jul.";case 7:return"Aug.";case 8:return"Sep.";case 9:return"Oct.";case 10:return"Nov.";case 11:return"Dec."}}function N(e){var t=e%10,n=e%100;return 1===t&&11!==n?e+"st":2===t&&12!==n?e+"nd":3===t&&13!==n?e+"rd":e+"th"}Object.defineProperty(t,"__esModule",{value:!0}),t.SetupGraphs=r,t.BindGraphEvents=o,t.getIcon=i,t.createMarker=s,t.createGraphRemover=u,t.createGraphDiv=v;var R,D=n(27),F=n(22),G=n(25),U=n(24),Y=L.Icon.extend({}),$=new Y({iconUrl:"imgs/blue_icon.png",shadowUrl:"imgs/marker_shadow.png",iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]}),z=new Y({iconUrl:"imgs/orange_icon.png",shadowUrl:"imgs/marker_shadow.png",iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]}),H={0:"Jan",1:"Feb",2:"Mar",3:"Apr",4:"May",5:"Jun",6:"Jul",7:"Aug",8:"Sep",9:"Oct",10:"Nov",11:"Dec"}},function(e,t,n){"use strict";function r(){d3.selectAll(".panel-top-btn").on("click",o)}function a(){var e=d3.select("#right-panel");return e.classed("graphs-active")?"graphs-active":e.classed("layers-active")?"layers-active":"about-active"}function o(){this.classList.contains("active")||i(this.getAttribute("data-active"))}function i(e){s(),c(e),(0,f.updateShareUrl)()}function c(e){d3.select(".panel-top-btn[data-active='"+e+"']").classed("active",!0),d3.selectAll("#map-wrapper, #right-panel").classed(e,!0),d3.select(".panel-section-wrapper[data-active='"+e+"']").classed("active",!0),u(),(0,l.updatePanelDragOverlayHeight)()}function s(){var e=d3.select(".panel-top-btn.active").attr("data-active");d3.selectAll("#map-wrapper, #right-panel").classed(e,!1),d3.selectAll(".panel-top-btn.active, .panel-section-wrapper.active").classed("active",!1)}function u(){var e=document.getElementById("right-panel").offsetWidth;document.getElementById("map-wrapper").style.paddingRight=e+"px"}Object.defineProperty(t,"__esModule",{value:!0}),t.BindTabEvents=r,t.GetActiveTab=a,t.HandleTabChange=i;var l=n(22),f=n(25)},function(e,t,n){"use strict";function r(e,t){var n=e.opacity||1,r=f(n);t.select(".opacity-slider-handle").style("top",function(){return r+"px"})}function a(e,t){var n=void 0!==e.opacity?e.opacity:1,r=t.append("div").attr("class","opacity-slider-wrapper");r.append("div").attr("class","opacity-slider-indicator");o(r,e,t,n)}function o(e,t,n,a){var o=e.append("div").attr("class","opacity-slider-track-overlay");o.append("div").attr("class","opacity-slider-track");o.append("div").attr("class","opacity-slider-handle"),t.active&&r(t,n),i(e,t,a)}function i(e,t,n){var r=e.select(".opacity-slider-track-overlay");r.call(d3.drag().on("start drag",function(){var e=s(r);(0,l.updateLayerOpacity)(t,e),c(r,e)}).on("end",function(){(0,u.updateShareUrl)()}))}function c(e,t){e.select(".opacity-slider-handle").style("top",f(t)+"px")}function s(e){var t=d3.mouse(e.node())[1];return f.invert(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.setSliderInitialPos=r,t.makeOpacitySlider=a;var u=n(25),l=n(23),f=d3.scaleLinear().domain([1,0]).range([0,90]).clamp(!0)},function(e,t){"use strict";function n(e){if(e.image){var t=r(),n=a(e),i=e.link?o(e.link):null;i?(i.appendChild(n),t.appendChild(i)):t.appendChild(n);var c=document.getElementsByClassName(e.location)[0],s=c.firstChild;c.insertBefore(t,s)}}function r(){var e=document.createElement("div");return d3.select(e).classed("project-logo",!0),e}function a(e){var t=document.createElement("img");return t.setAttribute("src",e.image),e.label&&(t.setAttribute("alt",e.label),t.setAttribute("title",e.label)),t}function o(e){var t=document.createElement("a");return t.setAttribute("href",e),t.setAttribute("target","_blank"),t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,