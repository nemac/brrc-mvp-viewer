!function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),o=n(3),i=r(o),c=n(22),s=n(26),u=n(28),l=n(29),p=n(24),f=n(25),d=n(23),h=n(31),v=r(h),m=n(27),y=(n(32),function(e){(0,a.ParseConfig)(e,g),(0,u.SetupGraphs)(),(0,l.BindTabEvents)(),(0,f.BindCopyLinkEvents)()}),g=function(e){(0,f.AddShareSettingsToConfig)(e);var t=(0,p.CreateMap)(e.map);(0,s.CreateBaseLayers)(t,e.baselayers),(0,d.CreateDefaultLayers)(e.layers,e["active-layers"]),(0,c.SetupPanel)(e.layers,e.layout),(0,i.default)(t),(0,v.default)(e.logo),e.tab&&(0,l.HandleTabChange)(e.tab),e.graph&&(0,u.HandleGraphTabChange)(e.graph),(0,u.BindGraphEvents)(t),(0,f.BindUpdateShareUrl)(t),(0,m.SetupPointsOfInterest)(t,e.pois),(0,f.updateShareUrl)()};window.Base=y,t.default={Base:y}},function(e,t){"use strict";function n(e,t){a(e,t)}function r(e){var t;return t=window.ActiveXObject?new window.ActiveXObject("MSXML2.XMLHTTP.3.0"):new XMLHttpRequest,t.onreadystatechange=function(){4===t.readyState&&e(t.responseText)},t}function a(e,t){var n=r(function(e){var n=o(e);t(n)});n.open("GET",e,!0),n.send(),console.log("hi")}function o(e){try{var t=JSON.parse(e)}catch(e){console.log("ERROR: Malformed JSON in config file."),console.log(e)}return i(t),c(t),t}function i(e){e.map||(e.map={})}function c(e){var t,n,r=e.layers,a=e.mapserverUrl;e["active-layers"];for(var o in r){if(!r.hasOwnProperty(o))return;for(t=r[o],n=0;n<t.length;n++)s(t[n],a)}}function s(e,t){e.url=e.url||t}Object.defineProperty(t,"__esModule",{value:!0}),t.ParseConfig=n,t.GetAjaxObject=r},function(e,t,n){"use strict";function r(e){var t=new a.EsriProvider,n=new a.GeoSearchControl({provider:t,showMarker:!1,autoComplete:!1});e.addControl(n),L.DomEvent.on(n.searchElement.elements.container,"click",function(e){L.DomEvent.stopPropagation(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var a=n(4)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(5);Object.defineProperty(t,"GeoSearchControl",{enumerable:!0,get:function(){return r(a).default}});var o=n(13);Object.defineProperty(t,"SearchElement",{enumerable:!0,get:function(){return r(o).default}});var i=n(17);Object.defineProperty(t,"BingProvider",{enumerable:!0,get:function(){return r(i).default}});var c=n(19);Object.defineProperty(t,"EsriProvider",{enumerable:!0,get:function(){return r(c).default}});var s=n(20);Object.defineProperty(t,"GoogleProvider",{enumerable:!0,get:function(){return r(s).default}});var u=n(21);Object.defineProperty(t,"OpenStreetMapProvider",{enumerable:!0,get:function(){return r(u).default}});var l=n(18);Object.defineProperty(t,"Provider",{enumerable:!0,get:function(){return r(l).default}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(){if(!L||!L.Control||!L.Control.extend)throw new Error("Leaflet must be loaded before instantiating the GeoSearch control");for(var e=L.Control.extend(m),t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return new(Function.prototype.bind.apply(e,[null].concat(n)))}Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),i=(r(o),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e});t.default=a;var c=n(12),s=r(c),u=n(13),l=r(u),p=n(16),f=r(p),d=n(14),h=n(15),v=function(){return{position:"topleft",style:"button",showMarker:!0,showPopup:!1,marker:{icon:new L.Icon.Default,draggable:!1},maxMarkers:1,retainZoomLevel:!1,animateZoom:!0,searchLabel:"Enter address",notFoundMessage:"Sorry, that address could not be found.",messageHideDelay:3e3,zoomLevel:18,classNames:{container:"leaflet-bar leaflet-control leaflet-control-geosearch",button:"leaflet-bar-part leaflet-bar-part-single",msgbox:"leaflet-bar message",form:"",input:""},autoComplete:!0,autoCompleteDelay:250}},m={initialize:function(e){var t=this;this.markers=new L.FeatureGroup,this.options=i({},v(),e);var n=this.options,r=n.style,a=n.classNames,o=n.searchLabel,c=n.autoComplete,u=n.autoCompleteDelay;"button"!==r&&(this.options.classNames.container+=" "+e.style),this.searchElement=new l.default(i({},this.options,{handleSubmit:function(e){return t.onSubmit(e)}}));var p=this.searchElement.elements,h=p.container,m=p.form,y=p.input;h.addEventListener("dblclick",function(e){e.stopPropagation()});var g=(0,d.createElement)("a",a.button,h);g.title=o,g.href="#",g.addEventListener("click",function(e){t.onClick(e)},!1),c&&(this.resultList=new f.default({handleClick:function(e){var n=e.result;y.value=n.label,t.onSubmit({query:n.label})}}),m.appendChild(this.resultList.elements.container),y.addEventListener("keyup",(0,s.default)(function(e){return t.autoSearch(e)},u),!0),y.addEventListener("keydown",function(e){return t.selectResult(e)},!0),y.addEventListener("keydown",function(e){return t.clearResults(e)},!0)),this.elements={button:g}},onAdd:function(e){var t=this.options,n=t.showMarker,r=t.style;if(this.map=e,n&&this.markers.addTo(e),"bar"===r){var a=this.searchElement.elements.form,o=e.getContainer().querySelector(".leaflet-control-container"),i=(0,d.createElement)("div","leaflet-control-geosearch bar");i.appendChild(a),o.appendChild(i),this.elements.container=i}return this.searchElement.elements.container},onRemove:function(){var e=this.elements.container;return e&&e.remove(),this},onClick:function(e){e.preventDefault();var t=this.searchElement.elements,n=t.container,r=t.input;n.classList.contains("active")?(0,d.removeClassName)(n,"active"):((0,d.addClassName)(n,"active"),r.focus())},selectResult:function(e){if([h.ARROW_DOWN_KEY,h.ARROW_UP_KEY].includes(e.keyCode)){e.preventDefault();var t=this.searchElement.elements.input,n=this.resultList,r=this.resultList.count()-1,a="ArrowDown"===e.code?1+~~n.selected:~~n.selected-1,o=a<0?r:a>r?0:a,i=n.select(o);t.value=i.label}},clearResults:function(e){e.keyCode===h.ESCAPE_KEY&&this.resultList.clear()},autoSearch:function(e){return new Promise(function(t,n){var r,a,o;return h.SPECIAL_KEYS.includes(e.keyCode)?t():(r=e.target.value,a=this.options.provider,a.search({query:r}).then(function(e){return o=e,this.resultList.render(o),t()}.$asyncbind(this,n),n))}.$asyncbind(this))},onSubmit:function(e){return new Promise(function(t,n){var r,a;return r=this.options.provider,r.search(e).then(function(e){return a=e,a&&a.length>0&&this.showResult(a[0]),t()}.$asyncbind(this,n),n)}.$asyncbind(this))},showResult:function(e){var t=Object.keys(this.markers._layers);t.length>=this.options.maxMarkers&&this.markers.removeLayer(t[0]);var n=this.addMarker(e);this.centerMap(e),this.map.fireEvent("geosearch/showlocation",{location:e,marker:n})},addMarker:function(e){var t=this.options,n=t.marker,r=t.showPopup,a=new L.Marker([e.y,e.x],n);return a.bindPopup(e.label),this.markers.addLayer(a),r&&a.openPopup(),a},centerMap:function(e){var t=this.options,n=t.retainZoomLevel,r=t.animateZoom,a=new L.LatLngBounds(e.bounds),o=a.isValid()?a:this.markers.getBounds();!n&&a.isValid()?this.map.fitBounds(o,{animate:r}):this.map.setView(o.getCenter(),this.getZoom(),{animate:r})},getZoom:function(){var e=this.options,t=e.retainZoomLevel,n=e.zoomLevel;return t?this.map.getZoom():n}}},function(e,t,n){"use strict";function r(e,t){if(Function.prototype.$asyncspawn||Object.defineProperty(Function.prototype,"$asyncspawn",{value:r,enumerable:!1,configurable:!0,writable:!0}),this instanceof Function){var n=this;return new e(function(e,r){function a(t,n){var i;try{if(i=t.call(o,n),i.done){if(i.value!==e){if(i.value&&i.value===i.value.then)return i.value(e,r);e&&e(i.value),e=null}return}i.value.then?i.value.then(function(e){a(o.next,e)},function(e){a(o.throw,e)}):a(o.next,i.value)}catch(e){return r&&r(e),void(r=null)}}var o=n.call(t,e,r);a(o.next)})}}var a=function(e,t){for(var n=t.toString(),r="return "+n,a=n.match(/.*\(([^)]*)\)/)[1],o=/['"]!!!([^'"]*)['"]/g,i=[];;){var c=o.exec(r);if(!c)break;i.push(c)}return i.reverse().forEach(function(t){r=r.slice(0,t.index)+e[t[1]]+r.substr(t.index+t[0].length)}),r=r.replace(/\/\*[^*]*\*\//g," ").replace(/\s+/g," "),new Function(a,r)()}({zousan:n(7).toString(),thenable:n(11).toString()},function e(t,n){function r(){return a.apply(t,arguments)}Function.prototype.$asyncbind||Object.defineProperty(Function.prototype,"$asyncbind",{value:e,enumerable:!1,configurable:!0,writable:!0}),e.trampoline||(e.trampoline=function(e,t,n,r,a){return function o(i){for(;i;){if(i.then)return i=i.then(o,r),a?void 0:i;try{if(i.pop){if(i.length)return i.pop()?t.call(e):i;i=n}else i=i.call(e)}catch(e){return r(e)}}}}),e.LazyThenable||(e.LazyThenable="!!!thenable"(),e.EagerThenable=e.Thenable=(e.EagerThenableFactory="!!!zousan")());var a=this;switch(n){case!0:return new e.Thenable(r);case 0:return new e.LazyThenable(r);case void 0:return r.then=r,r;default:return function(){try{return a.apply(t,arguments)}catch(e){return n(e)}}}});a(),r(),e.exports={$asyncbind:a,$asyncspawn:r}},function(e,t,n){(function(t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){function a(e){if(e){var t=this;e(function(e){t.resolve(e)},function(e){t.reject(e)})}}function o(e,t){if("function"==typeof e.y)try{var n=e.y.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.resolve(t)}function i(e,t){if("function"==typeof e.n)try{var n=e.n.call(void 0,t);e.p.resolve(n)}catch(t){e.p.reject(t)}else e.p.reject(t)}e=e||"object"===(void 0===t?"undefined":r(t))&&t.nextTick||"function"==typeof n&&n||function(e){setTimeout(e,0)};var c=function(){function t(){for(;n.length-r;){try{n[r]()}catch(e){}n[r++]=void 0,r===a&&(n.splice(0,a),r=0)}}var n=[],r=0,a=1024;return function(a){n.push(a),n.length-r==1&&e(t)}}();return a.prototype={resolve:function(e){if(void 0===this.state){if(e===this)return this.reject(new TypeError("Attempt to resolve promise with self"));var t=this;if(e&&("function"==typeof e||"object"===(void 0===e?"undefined":r(e))))try{var n=0,a=e.then;if("function"==typeof a)return void a.call(e,function(e){n++||t.resolve(e)},function(e){n++||t.reject(e)})}catch(e){return void(n||this.reject(e))}this.state=o,this.v=e,t.c&&c(function(){for(var n=0,r=t.c.length;n<r;n++)o(t.c[n],e)})}},reject:function(e){if(void 0===this.state){this.state=i,this.v=e;var t=this.c;t&&c(function(){for(var n=0,r=t.length;n<r;n++)i(t[n],e)})}},then:function(e,t){var n=new a,r={y:e,n:t,p:n};if(void 0===this.state)this.c?this.c.push(r):this.c=[r];else{var o=this.state,i=this.v;c(function(){o(r,i)})}return n}},a.resolve=function(e){if(e&&e instanceof a)return e;var t=new a;return t.resolve(e),t},a.reject=function(e){if(e&&e instanceof a)return e;var t=new a;return t.reject(e),t},a.version="2.3.3-nodent",a}}).call(t,n(8),n(9).setImmediate)},function(e,t){"use strict";function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function a(e){if(l===setTimeout)return setTimeout(e,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function o(e){if(p===clearTimeout)return clearTimeout(e);if((p===r||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(e);try{return p(e)}catch(t){try{return p.call(null,e)}catch(t){return p.call(this,e)}}}function i(){v&&d&&(v=!1,d.length?h=d.concat(h):m=-1,h.length&&c())}function c(){if(!v){var e=a(i);v=!0;for(var t=h.length;t;){for(d=h,h=[];++m<t;)d&&d[m].run();m=-1,t=h.length}d=null,v=!1,o(e)}}function s(e,t){this.fun=e,this.array=t}function u(){}var l,p,f=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(e){l=n}try{p="function"==typeof clearTimeout?clearTimeout:r}catch(e){p=r}}();var d,h=[],v=!1,m=-1;f.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];h.push(new s(e,t)),1!==h.length||v||a(c)},s.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=u,f.addListener=u,f.once=u,f.off=u,f.removeListener=u,f.removeAllListeners=u,f.emit=u,f.binding=function(e){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(e){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}},function(e,t,n){"use strict";function r(e,t){this._id=e,this._clearFn=t}var a=Function.prototype.apply;t.setTimeout=function(){return new r(a.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new r(a.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(10),t.setImmediate=setImmediate,t.clearImmediate=clearImmediate},function(e,t,n){(function(e,t){"use strict";!function(e,n){function r(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return u[s]=r,c(s),s++}function a(e){delete u[e]}function o(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}function i(e){if(l)setTimeout(i,0,e);else{var t=u[e];if(t){l=!0;try{o(t)}finally{a(e),l=!1}}}}if(!e.setImmediate){var c,s=1,u={},l=!1,p=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?function(){c=function(e){t.nextTick(function(){i(e)})}}():function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&i(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),c=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){i(e.data)},c=function(t){e.port2.postMessage(t)}}():p&&"onreadystatechange"in p.createElement("script")?function(){var e=p.documentElement;c=function(t){var n=p.createElement("script");n.onreadystatechange=function(){i(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():function(){c=function(e){setTimeout(i,0,e)}}(),f.setImmediate=r,f.clearImmediate=a}}("undefined"==typeof self?void 0===e?void 0:e:self)}).call(t,function(){return this}(),n(8))},function(e,t){"use strict";e.exports=function(){function e(e){return e&&e instanceof Object&&"function"==typeof e.then}function t(n,r,a){try{var o=a?a(r):r;if(n===o)return n.reject(new TypeError("Promise resolution loop"));e(o)?o.then(function(e){t(n,e)},function(e){n.reject(e)}):n.resolve(o)}catch(e){n.reject(e)}}function n(){}function r(e){}function a(e,t){this.resolve=e,this.reject=t}function o(r,a){var o=new n;try{this._resolver(function(n){return e(n)?n.then(r,a):t(o,n,r)},function(e){t(o,e,a)})}catch(e){t(o,e,a)}return o}function i(e){this._resolver=e,this.then=o}return n.prototype={resolve:r,reject:r,then:a},i.resolve=function(e){return i.isThenable(e)?e:{then:function(t){return t(e)}}},i.isThenable=e,i}},function(e,t){(function(t){"use strict";function n(e,t,n){function a(t){var n=v,r=m;return v=m=void 0,_=t,g=e.apply(r,n)}function o(e){return _=e,b=setTimeout(l,t),S?a(e):g}function c(e){var n=e-w,r=e-_,a=t-n;return x?E(a,y-r):a}function u(e){var n=e-w,r=e-_;return void 0===w||n>=t||n<0||x&&r>=y}function l(){var e=O();if(u(e))return p(e);b=setTimeout(l,c(e))}function p(e){return b=void 0,P&&v?a(e):(v=m=void 0,g)}function f(){void 0!==b&&clearTimeout(b),_=0,v=w=m=b=void 0}function d(){return void 0===b?g:p(O())}function h(){var e=O(),n=u(e);if(v=arguments,m=this,w=e,n){if(void 0===b)return o(w);if(x)return b=setTimeout(l,t),a(w)}return void 0===b&&(b=setTimeout(l,t)),g}var v,m,y,g,b,w,_=0,S=!1,x=!1,P=!0;if("function"!=typeof e)throw new TypeError(s);return t=i(t)||0,r(n)&&(S=!!n.leading,x="maxWait"in n,y=x?k(i(n.maxWait)||0,t):y,P="trailing"in n?!!n.trailing:P),h.cancel=f,h.flush=d,h}function r(e){var t=void 0===e?"undefined":c(e);return!!e&&("object"==t||"function"==t)}function a(e){return!!e&&"object"==(void 0===e?"undefined":c(e))}function o(e){return"symbol"==(void 0===e?"undefined":c(e))||a(e)&&w.call(e)==l}function i(e){if("number"==typeof e)return e;if(o(e))return u;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(p,"");var n=d.test(e);return n||h.test(e)?v(e.slice(2),n?2:8):f.test(e)?u:+e}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s="Expected a function",u=NaN,l="[object Symbol]",p=/^\s+|\s+$/g,f=/^[-+]0x[0-9a-f]+$/i,d=/^0b[01]+$/i,h=/^0o[0-7]+$/i,v=parseInt,m="object"==(void 0===t?"undefined":c(t))&&t&&t.Object===Object&&t,y="object"==("undefined"==typeof self?"undefined":c(self))&&self&&self.Object===Object&&self,g=m||y||Function("return this")(),b=Object.prototype,w=b.toString,k=Math.max,E=Math.min,O=function(){return g.Date.now()};e.exports=n}).call(t,function(){return this}())},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),o=(function(e){e&&e.__esModule?e:{default:e}}(a),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=n(14),c=n(15),s=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=n.handleSubmit,o=void 0===a?function(){}:a,c=n.searchLabel,s=void 0===c?"search":c,u=n.classNames,l=void 0===u?{}:u;r(this,e);var p=(0,i.createElement)("div",["geosearch",l.container].join(" ")),f=(0,i.createElement)("form",["",l.form].join(" "),p),d=(0,i.createElement)("input",["glass",l.input].join(" "),f);d.type="text",d.placeholder=s,d.addEventListener("input",function(e){t.onInput(e)},!1),d.addEventListener("keyup",function(e){t.onKeyUp(e)},!1),d.addEventListener("keypress",function(e){t.onKeyPress(e)},!1),d.addEventListener("focus",function(e){t.onFocus(e)},!1),d.addEventListener("blur",function(e){t.onBlur(e)},!1),this.elements={container:p,form:f,input:d},this.handleSubmit=o}return o(e,[{key:"onFocus",value:function(){(0,i.addClassName)(this.elements.form,"active")}},{key:"onBlur",value:function(){(0,i.removeClassName)(this.elements.form,"active")}},{key:"onSubmit",value:function(e){return new Promise(function(t,n){var r,a,o;return e.preventDefault(),e.stopPropagation(),r=this.elements,a=r.input,o=r.container,(0,i.removeClassName)(o,"error"),(0,i.addClassName)(o,"pending"),this.handleSubmit({query:a.value}).then(function(e){return(0,i.removeClassName)(o,"pending"),t()}.$asyncbind(this,n),n)}.$asyncbind(this))}},{key:"onInput",value:function(){var e=this.elements.container;this.hasError&&((0,i.removeClassName)(e,"error"),this.hasError=!1)}},{key:"onKeyUp",value:function(e){var t=this.elements,n=t.container,r=t.input;e.keyCode===c.ESCAPE_KEY&&((0,i.removeClassName)(n,"pending"),(0,i.removeClassName)(n,"active"),r.value="",document.body.focus(),document.body.blur())}},{key:"onKeyPress",value:function(e){e.keyCode===c.ENTER_KEY&&this.onSubmit(e)}},{key:"setQuery",value:function(e){this.elements.input.value=e}}]),e}();t.default=s},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.createElement=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=document.createElement(e);return r.className=t,n&&n.appendChild(r),r};t.createScriptElement=function(e,t){var r=n("script",null,document.body);return r.setAttribute("type","text/javascript"),new Promise(function(n){window[t]=function(e){r.remove(),delete window[t],n(e)},r.setAttribute("src",e)})},t.addClassName=function(e,t){e&&!e.classList.contains(t)&&e.classList.add(t)},t.removeClassName=function(e,t){e&&e.classList.contains(t)&&e.classList.remove(t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.ENTER_KEY=13,r=t.ESCAPE_KEY=27,a=t.ARROW_DOWN_KEY=40,o=t.ARROW_UP_KEY=38,i=t.ARROW_LEFT_KEY=37,c=t.ARROW_RIGHT_KEY=39;t.SPECIAL_KEYS=[n,r,a,o,i,c]},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(14),i=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.join(" ").trim()},c=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.handleClick,a=void 0===n?function(){}:n,c=t.classNames,u=void 0===c?{}:c;r(this,e),s.call(this),this.props={handleClick:a,classNames:u},this.selected=-1;var l=(0,o.createElement)("div",i("results",u.container)),p=(0,o.createElement)("div",i(u.item));l.addEventListener("click",this.onClick,!0),this.elements={container:l,resultItem:p}}return a(e,[{key:"render",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=this.elements,n=t.container,r=t.resultItem;this.clear(),e.forEach(function(e,t){var a=r.cloneNode(!0);a.setAttribute("data-key",t),a.innerHTML=e.label,n.appendChild(a)}),e.length>0&&(0,o.addClassName)(n,"active"),this.results=e}},{key:"select",value:function(e){var t=this.elements.container;return Array.from(t.children).forEach(function(t,n){return n===e?(0,o.addClassName)(t,"active"):(0,o.removeClassName)(t,"active")}),this.selected=e,this.results[e]}},{key:"count",value:function(){return this.results.length}},{key:"clear",value:function(){var e=this.elements.container;for(this.selected=-1;e.lastChild;)e.removeChild(e.lastChild);(0,o.removeClassName)(e,"active")}}]),e}(),s=function(){var e=this;this.onClick=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.target,r=e.props.handleClick,a=e.elements.container;if(n.parentNode===a&&n.hasAttribute("data-key")){var o=n.getAttribute("data-key");r({result:e.results[o]})}}};t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":c(t))&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":c(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var s=n(6),u=(r(s),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),p=n(18),f=r(p),d=n(14),h=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=e.jsonp,a=this.options.params;return n+"//dev.virtualearth.net/REST/v1/Locations?"+this.getParamString(u({},a,{query:t,jsonp:r}))}},{key:"parse",value:function(e){var t=e.data;return 0===t.resourceSets.length?[]:t.resourceSets[0].resources.map(function(e){return{x:e.point.coordinates[1],y:e.point.coordinates[0],label:e.address.formattedAddress,bounds:[[e.bbox[0],e.bbox[1]],[e.bbox[2],e.bbox[3]]],raw:e}})}},{key:"search",value:function(e){return new Promise(function(t,n){var r,a,o,i,c;return r=e.query,a=~location.protocol.indexOf("http")?location.protocol:"https:",o="BING_JSONP_CB_"+Date.now(),i=this.endpoint({query:r,protocol:a,jsonp:o}),(0,d.createScriptElement)(i,o).then(function(e){return c=e,t(this.parse({data:c}))}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),t}(f.default);t.default=h},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),o=(function(e){e&&e.__esModule?e:{default:e}}(a),function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.options=t}return o(e,[{key:"getParamString",value:function(e){return Object.keys(e).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}},{key:"search",value:function(e){return new Promise(function(t,n){var r,a,o,i,c;return r=e.query,a=~location.protocol.indexOf("http")?location.protocol:"https:",o=this.endpoint({query:r,protocol:a}),fetch(o).then(function(e){return i=e,i.json().then(function(e){return c=e,t(this.parse({data:c}))}.$asyncbind(this,n),n)}.$asyncbind(this,n),n)}.$asyncbind(this))}}]),e}();t.default=i},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),p=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),s(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find?"+this.getParamString(c({},r,{f:"json",text:t}))}},{key:"parse",value:function(e){return e.data.locations.map(function(e){return{x:e.feature.geometry.x,y:e.feature.geometry.y,label:e.name,bounds:[[e.extent.ymin,e.extent.xmin],[e.extent.ymax,e.extent.xmax]],raw:e}})}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),p=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),s(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params,a=this.getParamString(c({},r,{address:t}));return(r&&r.key?"https:":n)+"//maps.googleapis.com/maps/api/geocode/json?"+a}},{key:"parse",value:function(e){return e.data.results.map(function(e){return{x:e.geometry.location.lng,y:e.geometry.location.lat,label:e.formatted_address,bounds:[[e.geometry.viewport.southwest.lat,e.geometry.viewport.southwest.lng],[e.geometry.viewport.northeast.lat,e.geometry.viewport.northeast.lng]],raw:e}})}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(18),l=function(e){return e&&e.__esModule?e:{default:e}}(u),p=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),s(t,[{key:"endpoint",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.query,n=e.protocol,r=this.options.params;return n+"//nominatim.openstreetmap.org/search?"+this.getParamString(c({},r,{format:"json",q:t}))}},{key:"parse",value:function(e){return e.data.map(function(e){return{x:e.lon,y:e.lat,label:e.display_name,bounds:[[parseFloat(e.boundingbox[0]),parseFloat(e.boundingbox[2])],[parseFloat(e.boundingbox[1]),parseFloat(e.boundingbox[3])]],raw:e}})}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e,t){p(l(t["layer-groups-order"]),e),i(),o()}function a(){var e=window.navigator.userAgent;return e.indexOf("MSIE")>-1||e.indexOf("rv:11.0")>-1}function o(){document.getElementById("right-panel").onscroll=s}function i(){if(!a()){var e=d3.select("#right-panel-drag-overlay");e.style("cursor","ew-resize"),e.call(d3.drag().on("drag",function(){c.call(this)}))}}function c(){s(),u()}function s(){var e,t=d3.select("#right-panel"),n=t.property("offsetHeight"),r=document.getElementById("right-panel-drag-overlay"),a=document.getElementById("right-panel-header");if(t.classed("graphs-active")){var o=document.getElementById("graph-list");e=a.scrollHeight+o.scrollHeight+700}else{var i=document.getElementById("layer-list");e=a.scrollHeight+i.scrollHeight}e=e>n?e+"px":null,r.style.height=e}function u(){var e=d3.select("#right-panel"),t=+e.style("min-width").slice(0,-2),n=e.property("clientWidth"),r=document.getElementById("wrapper"),a=r.clientWidth,o=document.getElementById("map-wrapper"),i=d3.event.sourceEvent.x,c=a-i-n,s=n+c;s=s<t?t:s>a?a:s,o.style.paddingRight=s+"px",e.style("width",s+"px")}function l(e){return d3.select("#layer-list").selectAll(".layer-group-wrapper").data(e).enter().append("div").attr("class","layer-group-wrapper").attr("id",function(e){return e.id}).classed("active",function(e){return e.active}).each(function(e){d3.select(this).append("div").attr("class","layer-group-btn btn").on("click",function(e){e.active=!e.active,d3.select(this.parentNode).classed("active",function(){return e.active}),s()}).text(e.name)}).append("div").attr("class","layer-group")}function p(e,t){e.selectAll(".layer-select").data(function(e){return t[e.id]}).enter().append("div").attr("class","layer-select").each(function(e){var t=(this.parentNode.parentNode.id,d3.select(this));f(e,t),d(e,t),h(e,t),v(e,t)})}function f(e,t){t.append("input").attr("type","checkbox").attr("id",function(e){return e.id}).attr("checked",function(e){return e.active?"checked":null}).on("click",function(e){(0,y.toggleLayer)(e),t.select(".layer-tools-wrapper").classed("active",e.active),e.active&&(0,g.setSliderInitialPos)(e,t)})}function d(e,t){t.append("div").attr("class","layer-label-wrapper").append("label").attr("for",function(e){return e.id}).attr("class","layer-label").html(function(e){return e.name})}function h(e,t){e.info&&""!==e.info&&(t.append("div").attr("class","layer-info-btn").text("(?)").on("click",function(){d3.select(this.parentNode).select(".layer-info-wrapper").classed("active",function(){return!d3.select(this).classed("active")})}),t.append("div").attr("class","layer-info-wrapper").text(function(e){return e.info}))}function v(e,t){var n=t.append("div").attr("class","layer-tools-wrapper").classed("active",function(){return e.active});(0,g.makeOpacitySlider)(e,n),m(e,n)}function m(e,t){t.append("div").attr("class","legend-wrapper").append("img").attr("src",e.legend||"mean_ndvi_legend.jpg")}Object.defineProperty(t,"__esModule",{value:!0}),t.SetupPanel=r,t.updatePanelDragOverlayHeight=s;var y=n(23),g=n(30);n(25)},function(e,t,n){"use strict";function r(){return v}function a(e,t){var n,r,a,o,c,s;if(t&&0!==t.length)for(n=0;n<t.length;n++){s=!1,c=t[n];for(a in e){if(!e.hasOwnProperty(a))return;for(o=e[a],r=0;r<o.length;r++)if(o[r].id===c){i(o[r]),s=!0;break}if(s)break}}}function o(e){e.active?u(e):i(e)}function i(e){var t=(0,d.GetMap)();e.active=!0,e.mapLayer=e.mapLayer||f(e),t.addLayer(e.mapLayer),s(e),c(),(0,h.updateShareUrl)()}function c(){var e,t,n;for(t=0,n=m.length;t<n;t++)e=m[t],"overlay"===e.type&&e.mapLayer.bringToFront()}function s(e){v.push(e.id),m.push(e)}function u(e){var t=(0,d.GetMap)();e.active=!1,e.mapLayer&&t.hasLayer(e.mapLayer)&&t.removeLayer(e.mapLayer),l(e),(0,h.updateShareUrl)()}function l(e){var t=v.indexOf(e.id);t!==-1&&(v.splice(t,1),m.splice(t,1))}function p(e,t){e.opacity=t,e.mapLayer.setOpacity(t)}function f(e){return L.tileLayer.wms(e.url,{layers:e.id,transparent:e.transparent||!0,version:e.version||"1.3.0",crs:e.crs||L.CRS.EPSG900913,format:e.format||"image/png",opacity:e.opacity||1,tileSize:e.tileSize||document.getElementById("map").clientWidth})}Object.defineProperty(t,"__esModule",{value:!0}),t.GetCurrentLayers=r,t.CreateDefaultLayers=a,t.toggleLayer=o,t.enableLayer=i,t.disableLayer=u,t.updateLayerOpacity=p;var d=n(24),h=n(25),v=[],m=[]},function(e,t){"use strict";function n(e){var t=e.id||"map",n=e.options||{scrollWheelZoom:!1},r=e.center||["38.5","-81"],o=e.zoom||6;return a=L.map(t,n).setView(r,o),L.control.attribution().addTo(a),a}function r(){return a}Object.defineProperty(t,"__esModule",{value:!0}),t.CreateMap=n,t.GetMap=r;var a},function(e,t,n){"use strict";function r(e){e.on("moveend",a)}function a(e){var t=(0,D.GetMap)();c(i([b(t),w(t),k(t),E(t),O(),_(),S()])),s(),g()}function o(e){var t=x();t&&(t.center&&(e.map.center=t.center),t.zoom&&(e.map.zoom=t.zoom),t.layers&&N(t.layers,e),t.baselayers&&R(t.baselayers,e),t.pois&&G(t.pois,e),t.tab&&(e.tab=t.tab),t.graph&&(e.graph=t.graph))}function i(e){return"?"+e.filter(function(e){return void 0!==e}).join("&")}function c(e){window.history&&window.history.replaceState&&window.history.replaceState({},"",e)}function s(){var e=window.location.href;document.getElementById("share-link-url").setAttribute("value",e)}function u(){d3.select(document).on("click",l),d3.select(".share-link a").on("click",f),d3.select(".share-link-url").on("click",h),d3.select(".share-link-popup-remover").on("click",d)}function l(){var e=d3.event,t=[];t=e.path?e.path:p(e.srcElement);var n,r,a=!1;for(n=0,r=t.length;n<r;n++)if(t[n].className&&"string"==typeof t[n].className&&t[n].className.indexOf("share-link")!==-1){a=!0;break}a||m()}function p(e){for(var t=[];e;)t.push(e),e=e.parentNode;return t}function f(){d3.select(document.getElementsByClassName("share-link-popup")[0]).classed("active")?m():v()}function d(){m()}function h(){y()}function v(){d3.select(document.getElementsByClassName("share-link-popup")[0]).classed("active",!0),y()}function m(){d3.select(document.getElementsByClassName("share-link-popup")[0]).classed("active",!1)}function y(){var e=document.getElementById("share-link-url");e.focus(),e.setSelectionRange(0,e.value.length)}function g(){var e,t,n,r,a=L(window.location.href),o=document.getElementsByClassName("share-social");for(n=0,r=o.length;n<r;n++)e=o[n],t=e.getAttribute("data-baseurl")+a,e.setAttribute("href",t)}function b(e){var t=e.getCenter();return"center="+t.lat.toString()+","+t.lng.toString()}function w(e){return"zoom="+e.getZoom()}function k(e){var t=[],n={},r=(0,U.GetCurrentLayers)();e.eachLayer(function(e){var t=e.options;t&&t.layers&&(n[t.layers]=t.hasOwnProperty("opacity")?t.opacity:"1")});var a,o;for(o=0;o<r.length;o++)a=r[o],t.push(a),t.push(n[a]);return"layers="+t.join(",")}function E(e){var t=[];return e.eachLayer(function(e){e.options&&e.options.type===F.BASE_LAYER_TYPE&&t.push(e.options.id)}),"baselayers="+t.join(",")}function O(){var e=(0,Y.GetAllPointsOfInterest)();if(e.length){var t="pois=";return e.forEach(function(e){t+=e.lat+","+e.lng+";"}),t}}function _(){return"tab="+d3.select(".panel-top-btn.active").attr("data-active")}function S(){return"graph="+d3.select(".graph-type-btn.active").attr("data-type")}function x(){var e=window.location.search;if(""!==e)return e=P(e),e=C(e),A(e),e}function P(e){return e=e.substring(1),e=j(e),e.split("&")}function L(e){return e.replace(/\:/g,"%3A").replace(/\//g,"%2F").replace(/\,/g,"%2C").replace(/\&/g,"%26")}function j(e){return e.replace(/\%2[c|C]/g,",").replace(/\%3[b|B]/g,";")}function C(e){var t,n,r={};for(n=0;n<e.length;n++)t=e[n].split("="),r[t[0]]=t[1];return r}function A(e){e.center&&(e.center=T(e.center)),e.layers&&(e.layers=M(e.layers)),e.baselayers&&(e.baselayers=I(e.baselayers)),e.pois&&(e.pois=B(e.pois))}function T(e){return e.split(",")}function M(e){var t,n,r={enabledLayers:[],opacityVals:{}};for(e=e.split(","),n=0;n<e.length;n+=2)t=e[n],r.enabledLayers.push(t),r.opacityVals[t]=e[n+1];return r}function I(e){return e.split(",")}function B(e){return e.split(";").filter(function(e){return""!==e}).map(function(e){return e=e.split(","),{lat:e[0],lng:e[1]}})}function N(e,t){var n=e.enabledLayers;t["active-layers"]=n;var r,a,o,i,c,s,u=t.layers;for(r=0;r<n.length;r++){s=!1,c=n[r];for(o in u){if(!u.hasOwnProperty(o))return;for(i=u[o],a=0;a<i.length;a++)if(i[a].id===c){i[a].opacity=e.opacityVals[c],s=!0;break}if(s)break}}}function R(e,t){var n,r,a=t.baselayers;for(r=0;r<a.length;r++)n=a[r],n.active=e.indexOf(n.id)!==-1}function G(e,t){t.pois=e}Object.defineProperty(t,"__esModule",{value:!0}),t.BindUpdateShareUrl=r,t.updateShareUrl=a,t.AddShareSettingsToConfig=o,t.BindCopyLinkEvents=u;var D=n(24),F=n(26),U=n(23),Y=n(27)},function(e,t,n){"use strict";function r(e,t){t=t||[{id:"carto-light-default",url:"http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attributions">CARTO</a>'}],p=t;var n,r,o;for(n=0;n<t.length;n++)o=t[n],o.active&&(r=u(o),o.layer=r,r.addTo(e));a(t)}function a(e){var t=document.createElement("div");t.className="baselayer-ui";for(var n,r,a,i,c=0,s=e.length;c<s;c++)i=e[c],i.hasOwnProperty("image")&&(n=document.createElement("div"),n.setAttribute("data-layer",i.id),r=document.createElement("img"),r.setAttribute("src",i.image),r.setAttribute("alt",i.label),r.setAttribute("title",i.label),a=document.createElement("div"),a.textContent=i.label,n.appendChild(r),n.appendChild(a),n.addEventListener("click",o),d3.select(n).classed("base-selector",!0).classed("active",i.active),t.appendChild(n));document.getElementsByClassName("leaflet-bottom leaflet-left")[0].appendChild(t)}function o(e){e.stopPropagation();var t=this.getAttribute("data-layer");i(this),c(),s(t),(0,d.updateShareUrl)()}function i(e){d3.select(".base-selector.active").classed("active",!1),d3.select(e).classed("active",!0)}function c(){var e=(0,f.GetMap)();e.eachLayer(function(t){t.options.type===h&&e.removeLayer(t)})}function s(e){for(var t,n=(0,f.GetMap)(),r=0,a=p.length;r<a;r++)if(t=p[r],t.id===e){t.layer||(t.layer=u(t)),t.layer.addTo(n),t.layer.bringToBack();break}}function u(e){return L.tileLayer(e.url,l(e))}function l(e){var t={};return e.id&&(t.id=e.id),e.attribution&&(t.attribution=e.attribution),e.subdomains&&(t.subdomains=e.subdomains),t.type=h,t}Object.defineProperty(t,"__esModule",{value:!0}),t.BASE_LAYER_TYPE=void 0,t.CreateBaseLayers=r;var p,f=n(24),d=n(25),h=t.BASE_LAYER_TYPE="baselayer"},function(e,t,n){"use strict";function r(){return y}function a(e,t){var n={lat:e,lng:t};return y.push(n),n}function o(e,t){i(t);var n=r(),e=(0,v.GetMap)();n.forEach(function(t){s(e,t)})}function i(e){Array.prototype.push.apply(y,e)}function c(e){y=y.filter(function(t){return!(t===e)})}function s(e,t){var n=(0,d.createGraphDiv)(t),r=(0,d.createMarker)(e,t.lat,t.lng);t.graphDiv=n,t.marker=r,r.addTo(e),(0,d.createGraphRemover)(e,n,r,t),d3.select(n).on("mouseenter",function(e){r.setIcon((0,d.getIcon)("hover"))}),d3.select(n).on("mouseleave",function(){r.setIcon((0,d.getIcon)("graph"))}),r.on("click dblclick",function(e){u(e,t)}),r.on("mouseover",function(e){r.setIcon((0,d.getIcon)("hover"))}),r.on("mouseout",function(e){r.setIcon((0,d.getIcon)("graph")),t.graphDiv.getElementsByClassName("pan-to-marker-btn")[0].classList.remove("animate")})}function u(e,t){e.originalEvent.stopPropagation(),(0,m.HandleTabChange)("graphs-active"),p(t),l(t)}function l(e){e.graphDiv.getElementsByClassName("pan-to-marker-btn")[0].classList.add("animate")}function p(e){var t=document.getElementById("right-panel");document.getElementById("right-panel-header"),document.getElementById("graph-type-header");t.scrollTop=e.graphDiv.offsetTop}function f(e,t,n){document.getElementById("graph-list").removeChild(t),e.removeLayer(n),(0,h.updateShareUrl)()}Object.defineProperty(t,"__esModule",{value:!0}),t.GetAllPointsOfInterest=r,t.AddPointOfInterestToTracker=a,t.SetupPointsOfInterest=o,t.AddMultiplePointsOfInterest=i,t.RemovePointOfInterestFromTracker=c,t.SetupPointOfInterestUI=s,t.RemovePointOfInterestUI=f;var d=n(28),h=n(25),v=n(24),m=n(29),y=[]},function(e,t,n){"use strict";function r(){d3.selectAll(".graph-type-btn").on("click",v),a(),K=d3.tip().attr("class","d3-tip").html(function(e){return e})}function a(){Date.prototype.isLeapYear=function(){var e=this.getFullYear();return 0==(3&e)&&(e%100!=0||e%400==0)},Date.prototype.getDOY=function(){var e=[0,31,59,90,120,151,181,212,243,273,304,334],t=this.getMonth(),n=this.getDate(),r=e[t]+n;return t>1&&this.isLeapYear()&&r++,r}}function o(e){e.on("click",c)}function i(e){return"hover"===e?Z:q}function c(e){var t=this,n=e.latlng.lat,r=e.latlng.lng,a=(0,U.AddPointOfInterestToTracker)(n,r);(0,U.SetupPointOfInterestUI)(t,a,Z,q),(0,$.updateShareUrl)()}function s(e,t,n){return L.marker([t,n],{icon:q})}function u(e,t,n,r){var a=l();t.getElementsByClassName("graph-elem-header")[0].appendChild(a),d3.select(a).on("click",function(){(0,U.RemovePointOfInterestFromTracker)(r),(0,U.RemovePointOfInterestUI)(e,t,n),(0,Y.updatePanelDragOverlayHeight)(),(0,$.updateShareUrl)()})}function l(){var e=document.createElement("button");return e.className="remove-graph",e.innerText=String.fromCharCode("10005"),e.setAttribute("title","Remove graph"),e}function p(e,t,n,r){r=r.replace(/\[|\]|\'/g,"").split(", "),k(r,e,t,n),(0,Y.updatePanelDragOverlayHeight)()}function f(e,t,n){var r="https://fcav-ndvi.nemac.org/landdat_product.cgi?args="+t+","+e,a=(0,H.GetAjaxObject)(function(r){p(n,e,t,r)});a.open("GET",r),a.send()}function d(e){var t;for(t=0;t<e.length;t++)e[t]=e[t].split(",");return e}function h(e){var t,n,r,a,o={};for(o.keys=[],r=0;r<e.length;r++)t=e[r],n=t[0].substring(0,4),o.hasOwnProperty(n)||(o[n]=[],o.keys.push(n)),o[n].push(t);var i=[];for(r=0;r<o.keys.length;r++)n=o.keys[r],46!==o[n].length&&i.push(n);for(r=0;r<i.length;r++)n=i[r],delete o[n],o.keys.splice(o.keys.indexOf(n),1);var c,s;for(o.medians=[],r=0;r<46;r++){for(c=[],a=r;a<e.length;a+=46)c.push(e[a][1]);s=c.sort()[Math.floor(c.length/2)],o.medians.push(s)}return o}function v(){var e=this.getAttribute("data-type");e!==document.getElementsByClassName("graph-type-btn active")[0].getAttribute("data-type")&&m(e)}function m(e){y(),g(e),(0,$.updateShareUrl)()}function y(){var e=document.getElementsByClassName("graph-type-btn active")[0],t="graph-"+e.getAttribute("data-type");e.classList.remove("active"),document.getElementById("graph-list").classList.remove(t)}function g(e){d3.select(".graph-type-btn[data-type='"+e+"']").classed("active",!0),document.getElementById("graph-list").classList.add("graph-"+e),d3.selectAll(".graph-type-info").classed("active",function(){return e===this.id.split("-")[0]})}function b(e){var t=E(e.lat,3),n=E(e.lng,3),r=document.createElement("div"),a=document.createElement("div");r.appendChild(a);var o=w(e),i=document.createTextNode("Lat: "+t+", Lon: "+n),c=document.createElement("div");return c.className="graph-lat-lon",c.appendChild(i),a.appendChild(o),a.appendChild(c),r.classList.add("graph-elem"),a.classList.add("graph-elem-header"),f(e.lat,e.lng,r),r}function w(e){var t=document.createElement("button");return t.classList.add("btn"),t.classList.add("pan-to-marker-btn"),t.textContent="Show On Map",t.onclick=function(e,t){(0,z.GetMap)().panTo([e.lat,e.lng])}.bind(t,e),t}function k(e,t,n,r){e=d(e);var a=h(e);O(e,t,a.medians),_(a,t,n,r),S(a,t,n,r),document.getElementById("graph-list").appendChild(t)}function E(e,t){return Math.round(e*Math.pow(10,t))/Math.pow(10,t)}function O(e,t,n){var r={top:30,right:20,bottom:30,left:29},a=580-r.left-r.right,o=270-r.top-r.bottom,i=d3.scaleTime().range([0,a]).domain([N(e[0][0]),N(e[e.length-1][0])]),c=d3.scaleLinear().range([o,0]).domain([0,100]),s=d3.axisBottom(i).ticks(16).tickFormat(function(e){return e.getFullYear()}),u=d3.axisLeft(c).ticks(6),l=d3.line().x(function(e){return i(N(e[0]))}).y(function(e){return c(e[1])}),p=d3.select(t).append("div").classed("timeseries-graph",!0),f=p.append("svg").attr("height",o+r.top+r.bottom).attr("viewBox",function(){return"0 0 "+(a+r.left+r.right)+" "+(o+r.top+r.bottom)}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate("+r.left+","+r.top+")");f.call(K),j(e,l,f),f.append("g").attr("class","x axis").attr("transform","translate(0,"+o+")").call(s),f.append("g").attr("class","y axis").call(u),A(e,l,f,n)}function _(e,t,n,r){function a(e){return J[(e-15)/30]}var o={},i={top:30,right:20,bottom:30,left:29},c=500-i.left-i.right,s=270-i.top-i.bottom,u=e.medians,l=d3.scaleLinear().range([0,c]).domain([0,365]),p=d3.scaleLinear().range([s,0]).domain([0,100]),f=d3.axisBottom(l).ticks(11).tickValues([15,45,75,105,135,165,195,225,255,285,315,345]).tickFormat(a),d=d3.axisLeft(p).ticks(6),h=d3.line().x(function(e,t){return l(Array.isArray(e)?R(e[0]):8*t+3)}).y(function(e){return p(Array.isArray(e)?e[1]:e)}),v=d3.select(t).append("div").classed("overlapping-graph",!0),m=v.append("svg").attr("viewBox",function(){return"0 0 "+(c+i.left+i.right)+" "+(s+i.top+i.bottom)}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate("+i.left+","+i.top+")");m.call(K),m.append("g").attr("class","x axis").attr("transform","translate(0,"+s+")").call(f),m.append("g").attr("class","y axis").call(d),o.medians={path:j(e.medians,h,m)},o[2015]={path:j(e[2015],h,m)},o.medians.points=A(e.medians,h,m,u),o[2015].points=A(e[2015],h,m,u);var y=v.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){I(y,t,"timeseries","2015",o,e,h,m,u,n,r)}),I(y,"medians","timeseries","medians",o,e,h,m,u,n,r)}function S(e,t,n,r){var a=Math.min(490,490)/2-30,o=e.medians,i=x(e),c=P(o,i[1][0]),s=d3.scaleLinear().domain([0,100]).range([0,a]),u=d3.radialLine().radius(function(e){return s(Array.isArray(e)?e[1]:e)}).angle(function(e,t){return((Array.isArray(e)?R(e[0]):8*t+3)-1)%365/365*(2*Math.PI)}),l=d3.select(t).append("div").classed("polar-graph",!0),p=l.append("svg").attr("viewBox",function(){return"0 0 490 490"}).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(245,245)");p.call(K);var f=p.append("g").attr("class","r axis").selectAll("g").data(s.ticks(5).slice(1)).enter().append("g");f.append("circle").attr("r",s),f.append("text").attr("y",function(e){return-s(e)-4}).attr("transform","rotate(15)").style("text-anchor","middle").text(function(e){return e});var d=p.append("g").attr("class","a axis").selectAll("g").data(d3.range(0,360,30)).enter().append("g").attr("transform",function(e){return"rotate("+(e-90)+")"});d.append("line").attr("x2",a),d.append("text").attr("x",a+6).attr("dy",".35em").style("text-anchor",function(e){return e<360&&e>180?"end":null}).attr("transform",function(e){return e<360&&e>180?"rotate(180 "+(a+6)+",0)":null}).text(function(e){return J[e/30]});var h=p.append("g").selectAll("g").data(c).enter().append("g").attr("transform",function(e){return"rotate("+(e.data[1][0]-90)+")"});h.append("line").attr("class","line").attr("x2",a),h.append("text").attr("x",function(e){var t=e.data[1][0];return t<360&&t>180?a+30:a-30}).attr("y",function(e){return e.data[1][0]%365/365*(2*Math.PI)+6}).attr("dy",".35em").style("text-anchor",function(e){var t=e.data[1][0];return t<360&&t>180?"middle":null}).attr("transform",function(e){var t=e.data[1][0];return t<360&&t>180?"rotate(180 "+(a+6)+",0)":null}).text(function(e){return e.label});var v=i[1][0];C([[v,100],[(v+182.5)%365,100]],u,p).classed("growing-season-line","true"),C(i,u,p).classed("center-line","true"),p.selectAll("point").data([i[1]]).enter().append("circle").attr("class","point").attr("transform",function(e){return"translate("+u([e]).slice(1).slice(0,-1)+")"}).attr("r",4).attr("stroke","#000").attr("fill","#ea0c48").on("mouseover",function(e){K.show("Center: "+String(e[1]).substring(0,7)),this.setAttribute("r",5),this.setAttribute("stroke-width","2px"),d3.select(this).classed("active",!0)}).on("mouseout",function(e){K.hide(),this.setAttribute("r",4),this.setAttribute("stroke-width","1px"),d3.select(this).classed("active",!0)});var m={};m.medians={path:C(o,u,p)},m[2015]={path:C(e[2015],u,p)},m.medians.points=A(o,u,p,o),m[2015].points=A(e[2015],u,p,o);var y=l.append("div").classed("input-wrapper",!0);e.keys.forEach(function(t){var a=y.append("div");a.append("input").attr("type","checkbox").attr("id","polar-"+t+n.toString().replace(".","")+"-"+r.toString().replace(".","")).attr("value",t).property("checked","2015"===t).on("change",function(t){var n=this.value;this.checked?(m.hasOwnProperty(n)||(m[n]={}),m[n].path=C(e[n],u,p),m[n].points=A(e[n],u,p,o)):(m[n].path.remove(),m[n].points.remove())}),a.append("label").text(t).attr("for","polar-"+t+n.toString().replace(".","")+"-"+r.toString().replace(".","")),a.append("div").style("background",B("medians"!==t?t:0)).classed("graph-pip-example",!0)});var g=y.append("div");g.append("input").attr("type","checkbox").attr("id","polar-average-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")).attr("value","medians").property("checked",!0).on("change",function(t){var n=this.value;this.checked?(m.hasOwnProperty(n)||(m[n]={}),m[n].path=C(e[n],u,p),m[n].points=A(e[n],u,p,o)):(m[n].path.remove(),m[n].points.remove())}),g.append("label").text("Baseline").attr("for","polar-average-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")),g.append("div").style("background",B(0)).classed("graph-pip-example",!0);var b=y.append("div").classed("threshold-checkbox",!0);b.append("input").attr("type","checkbox").attr("id","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".","")).property("checked",!0).on("change",function(e){h.style("opacity",this.checked?1:0)}),b.append("label").text("Thresholds").attr("for","threshold-checkbox-"+n.toString().replace(".","")+"-"+r.toString().replace(".",""))}function x(e){var t,n,r,a,o,i=0,c=0;for(r=46,t=0;t<e.keys.length;t++)if(a=e[e.keys[t]],a.length===r){for(o=0,n=0;n<r/2;n++)o+=a[n][1]-a[n+23][1];o/=23,i+=o}else c++;i=Math.abs(i)/(e.keys.length-c);var s,u,l,p,f,d=1e6,h=0,v=e.medians;for(t=0;t<r/2;t++){for(u=0,l=0,f=0;f<r/2;f++)n=(t+f)%46,p=(n+23)%46,u+=parseInt(v[n],10),l+=parseInt(v[p],10);s=Math.abs(u-l),s<d&&(d=s,h=t)}var m=parseInt(v[h],10),y=parseInt(-v[h+23],10),g=Math.abs(i-m)-Math.abs(i-y);return Math.abs(-i-m)-Math.abs(-i-y)>g&&(h+=23),[[0,0],[8*h+3,i]]}function P(e,t){var n=Math.floor((t-3)/8);n>22&&(n-=23);var r,a,o,i=0;for(o=46,r=0;r<o;r++)a=(n+r)%o,i+=parseInt(e[a],10);var c,s,u=.15*i,l=.8*i,p=!1,f=!1;for(i=0,r=0;r<o;r++)a=(n+r)%o,i+=parseInt(e[a],10),!p&&i>u?(c=a,p=!0):!f&&i>l&&(s=a,f=!0);var d=[0,0];return[{label:"15%",data:[d,[8*c+3,100]]},{label:"80%",data:[d,[8*s+3,100]]}]}function j(e,t,n){return n.append("path").attr("class","line").attr("d",t(e))}function C(e,t,n){return n.append("path").datum(e).attr("class","line").attr("d",t)}function A(e,t,n,r){return n.selectAll("point").data(e).enter().append("circle").attr("class","point").attr("transform",function(e,n){var r=Array.isArray(e)?e:[8*n+3,e];return"translate("+t([r]).slice(1).slice(0,-1)+")"}).attr("r",3).attr("stroke","#000").attr("fill",function(e,t){return B(Array.isArray(e)?e[0].substring(0,4):0)}).on("mouseover",T).on("mouseout",M)}function T(e){var t=Array.isArray(e)?G(e[0])+": "+e[1]:"Average: "+e;K.show(t),this.setAttribute("r",5),this.setAttribute("stroke-width","2px")}function M(e){K.hide(),this.setAttribute("r",3),this.setAttribute("stroke-width","1px")}function I(e,t,n,r,a,o,i,c,s,u,l){var p=e.append("div");p.append("input").attr("type","checkbox").attr("id",n+"-"+t+u.toString().replace(".","")+"-"+l.toString().replace(".","")).attr("value",t).property("checked",t===r).on("change",function(e){var t=this.value;this.checked?(a.hasOwnProperty(t)||(a[t]={}),a[t].path=j(o[t],i,c),a[t].points=A(o[t],i,c,s)):(a[t].path.remove(),a[t].points.remove())}),p.append("label").text(t).attr("for",n+"-"+t+u.toString().replace(".","")+"-"+l.toString().replace(".","")),p.append("div").style("background",B("medians"!==t?t:0)).classed("graph-pip-example",!0)}function B(e){var t=["#ffe476","#036593","#116c91","#1e7390","#2c7b8e","#39828c","#4c8c8a","#5e9589","#719f87","#83a886","#95b183","#a6ba80","#b8c37c","#cacc79","#d6d279","#e2d779","#efdd78","#fbe378"];return 0===e?"#fff":t[parseInt(e,10)%t.length]}function N(e){e=e.toString();var t=e.substring(0,4),n=parseInt(e.substring(4,6),10)-1,r=e.substring(6,8);return new Date(t,n,r)}function R(e){return"string"==typeof e?(e=N(e),e.getDOY()):e}function G(e){return"Average"===e?e:(e=N(e),D(e.getMonth())+" "+F(e.getDate())+", "+e.getFullYear())}function D(e){switch(e){case 0:return"Jan.";case 1:return"Feb.";case 2:return"Mar.";case 3:return"Apr.";case 4:return"May";case 5:return"Jun.";case 6:return"Jul.";case 7:return"Aug.";case 8:return"Sep.";case 9:return"Oct.";case 10:return"Nov.";case 11:return"Dec."}}function F(e){var t=e%10,n=e%100;return 1===t&&11!==n?e+"st":2===t&&12!==n?e+"nd":3===t&&13!==n?e+"rd":e+"th"}Object.defineProperty(t,"__esModule",{value:!0}),t.SetupGraphs=r,t.BindGraphEvents=o,t.getIcon=i,t.createMarker=s,t.createGraphRemover=u,t.HandleGraphTabChange=m,t.createGraphDiv=b;var U=n(27),Y=n(22),$=n(25),z=n(24),H=n(2),K={},W=L.Icon.extend({}),q=new W({iconUrl:"imgs/blue_icon.png",shadowUrl:"imgs/marker_shadow.png",iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]}),Z=new W({iconUrl:"imgs/orange_icon.png",shadowUrl:"imgs/marker_shadow.png",iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]}),J={0:"Jan",1:"Feb",2:"Mar",3:"Apr",4:"May",5:"Jun",6:"Jul",7:"Aug",8:"Sep",9:"Oct",10:"Nov",11:"Dec"}},function(e,t,n){"use strict";function r(){d3.selectAll(".panel-top-btn").on("click",o)}function a(){return document.getElementsByClassName("panel-top-btn active")[0].getAttribute("data-active")}function o(){this.classList.contains("active")||i(this.getAttribute("data-active"))}function i(e){s(),c(e),(0,p.updateShareUrl)()}function c(e){d3.select(".panel-top-btn[data-active='"+e+"']").classed("active",!0),d3.selectAll("#map-wrapper, #right-panel").classed(e,!0),d3.select(".panel-section-wrapper[data-active='"+e+"']").classed("active",!0),u(),(0,l.updatePanelDragOverlayHeight)()}function s(){var e=d3.select(".panel-top-btn.active").attr("data-active");d3.selectAll("#map-wrapper, #right-panel").classed(e,!1),d3.selectAll(".panel-top-btn.active, .panel-section-wrapper.active").classed("active",!1)}function u(){var e=document.getElementById("right-panel").offsetWidth;document.getElementById("map-wrapper").style.paddingRight=e+"px"}Object.defineProperty(t,"__esModule",{value:!0}),t.BindTabEvents=r,t.GetActiveTab=a,t.HandleTabChange=i;var l=n(22),p=n(25)},function(e,t,n){"use strict";function r(e,t){var n=e.opacity||1,r=p(n);t.select(".opacity-slider-handle").style("top",function(){return r+"px"})}function a(e,t){var n=void 0!==e.opacity?e.opacity:1,r=t.append("div").attr("class","opacity-slider-wrapper");r.append("div").attr("class","opacity-slider-indicator");o(r,e,t,n)}function o(e,t,n,a){var o=e.append("div").attr("class","opacity-slider-track-overlay");o.append("div").attr("class","opacity-slider-track");o.append("div").attr("class","opacity-slider-handle"),t.active&&r(t,n),i(e,t,a)}function i(e,t,n){var r=e.select(".opacity-slider-track-overlay");r.call(d3.drag().on("start drag",function(){var e=s(r);(0,l.updateLayerOpacity)(t,e),c(r,e)}).on("end",function(){(0,u.updateShareUrl)()}))}function c(e,t){e.select(".opacity-slider-handle").style("top",p(t)+"px")}function s(e){var t=d3.mouse(e.node())[1];return p.invert(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.setSliderInitialPos=r,t.makeOpacitySlider=a;var u=n(25),l=n(23),p=d3.scaleLinear().domain([1,0]).range([0,90]).clamp(!0)},function(e,t){"use strict";function n(e){if(e.image){var t=r(),n=a(e),i=e.link?o(e.link):null;i?(i.appendChild(n),t.appendChild(i)):t.appendChild(n);var c=document.getElementsByClassName(e.location)[0],s=c.firstChild;c.insertBefore(t,s)}}function r(){var e=document.createElement("div");return d3.select(e).classed("project-logo",!0),e}function a(e){var t=document.createElement("img");return t.setAttribute("src",e.image),e.label&&(t.setAttribute("alt",e.label),t.setAttribute("title",e.label)),t}function o(e){var t=document.createElement("a");return t.setAttribute("href",e),t.setAttribute("target","_blank"),t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,